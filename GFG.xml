<information>
  <class>
    <name>apci_cap_af</name>
    <description>class apci_cap_af</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_af",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>avery_reg_field</name>
    <description>class avery_reg_field</description>
    <member>
      <name>name</name>
      <type>string</type>
    </member>
    <member>
      <name>sticky</name>
      <type>bit</type>
    </member>
    <member>
      <name>sticky_flr</name>
      <type>bit</type>
    </member>
    <member>
      <name>name</name>
      <type>string</type>
    </member>
    <member>
      <name>sticky</name>
      <type>bit</type>
    </member>
    <member>
      <name>sticky_flr</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>avery_reg</type>
          <name>parent</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>field_size</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>lsb_loc</name>
        </input_arg>
        <input_arg>
          <type>avery_reg_val_t</type>
          <name>default_val</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>sticky</name>
        </input_arg>
        <input_arg>
          <type>avery_reg_acc_e</type>
          <name>acctype</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>rand_default</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>rand_sticky</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>rand_acc</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_static</name>
        </input_arg>
      </body>
      <description>    function new(
	    string           name = "avery_reg_field",
	    avery_reg        parent = null,      	    int              field_size,         	    int              lsb_loc,            	    avery_reg_val_t  default_val  = 0,
	    bit              sticky       = 0,
	    avery_reg_acc_e  acctype      = AVERY_REG_ACC_RsvdP,   	    bit              rand_default = 1,   	    bit              rand_sticky  = 1,   	    bit              rand_acc     = 1,   	    bit              is_static    = 0    	);
    </description>
    </function>
    <function>
      <body>
        <name>set_v</name>
        <input_arg>
          <type>avery_reg_val_t</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_v(avery_reg_val_t v);
    </description>
    </function>
    <function>
      <body>
        <name>set_dv</name>
        <input_arg>
          <type>avery_reg_val_t</type>
          <name>dv</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_dv(avery_reg_val_t dv);
    </description>
    </function>
    <function>
      <body>
        <name>set_acctype</name>
        <input_arg>
          <type>avery_reg_acc_e</type>
          <name>acctype</name>
        </input_arg>
      </body>
      <description>    virtual function void set_acctype(avery_reg_acc_e acctype);
    </description>
    </function>
    <function>
      <body>
        <name>set_sticky</name>
        <input_arg>
          <type>bit</type>
          <name>sticky</name>
        </input_arg>
      </body>
      <description>    virtual function void set_sticky(bit sticky);
    </description>
    </function>
    <function>
      <body>
        <name>set_sticky_flr</name>
        <input_arg>
          <type>bit</type>
          <name>sticky_flr</name>
        </input_arg>
      </body>
      <description>    virtual function void set_sticky_flr(bit sticky_flr);
    </description>
    </function>
    <function>
      <body>
        <name>set_lsb_loc</name>
        <input_arg>
          <type>int</type>
          <name>lsb_loc</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_lsb_loc(int lsb_loc);
    </description>
    </function>
    <function>
      <body>
        <name>set_write_mask</name>
        <input_arg>
          <type>avery_reg_val_t</type>
          <name>mask</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_write_mask(avery_reg_val_t mask);
    </description>
    </function>
    <function>
      <body>
        <name>get_write_mask</name>
      </body>
      <description>    extern virtual function avery_reg_val_t get_write_mask();
    </description>
    </function>
    <function>
      <body>
        <name>get_field_size</name>
      </body>
      <description>    extern virtual function int get_field_size();
    </description>
    </function>
    <function>
      <body>
        <name>get_lsb_loc</name>
      </body>
      <description>    extern virtual function int get_lsb_loc();
    </description>
    </function>
    <function>
      <body>
        <name>read_dw</name>
        <input_arg>
          <type>int</type>
          <name>bit_offset</name>
        </input_arg>
        <input_arg>
          <type>avery_u32</type>
          <name>bit_enable</name>
        </input_arg>
      </body>
      <description>    extern virtual function avery_reg_val_t read_dw(int bit_offset, avery_u32 bit_enable = 'hffff_ffff);
    </description>
    </function>
    <function>
      <body>
        <name>write_dw</name>
        <input_arg>
          <type>int</type>
          <name>bit_offset</name>
        </input_arg>
        <input_arg>
          <type>avery_u32</type>
          <name>value</name>
        </input_arg>
        <input_arg>
          <type>avery_u32</type>
          <name>bit_enable</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>dbg</name>
        </input_arg>
      </body>
      <description>    extern virtual function void write_dw(
				    int       bit_offset,
				    avery_u32 value     ,
				    avery_u32 bit_enable='hffff_ffff,   				    string    dbg=""     );
    </description>
    </function>
    <function>
      <body>
        <name>sprint_path</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
      </body>
      <description>    extern virtual function string sprint_path(int verbosity = 0);
    </description>
    </function>
    <function>
      <body>
        <name>get_offset_dw</name>
      </body>
      <description>    extern virtual function bit       get_offset_dw();
    </description>
    </function>
    <function>
      <body>
        <name>get_offset</name>
      </body>
      <description>    extern virtual function bit       get_offset();
    </description>
    </function>
    <function>
      <body>
        <name>set_shared</name>
        <input_arg>
          <type>avery_reg_field</type>
          <name>shared</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_shared(avery_reg_field shared);
    </description>
    </function>
    <function>
      <body>
        <name>inverse</name>
      </body>
      <description>    extern virtual function void inverse();
    </description>
    </function>
    <function>
      <body>
        <name>set_one</name>
      </body>
      <description>    extern virtual function void set_one();
    </description>
    </function>
    <function>
      <body>
        <name>compare</name>
        <input_arg>
          <type>avery_reg_field</type>
          <name>tgt</name>
        </input_arg>
      </body>
      <description>    extern virtual function bit compare(avery_reg_field tgt);
    </description>
    </function>
    <function>
      <body>
        <name>set_print_verbosity</name>
        <input_arg>
          <type>int</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_print_verbosity(int v);
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>avery_reg</type>
          <name>parent</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>field_size</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>lsb_loc</name>
        </input_arg>
        <input_arg>
          <type>avery_reg_val_t</type>
          <name>default_val</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>sticky</name>
        </input_arg>
        <input_arg>
          <type>avery_reg_acc_e</type>
          <name>acctype</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>rand_default</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>rand_sticky</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>rand_acc</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_static</name>
        </input_arg>
      </body>
      <description>    function new(
            string           name = "avery_reg_field",
            avery_reg        parent = null,                  int              field_size,                     int              lsb_loc,                        avery_reg_val_t  default_val  = 0,
            bit              sticky       = 0,
            avery_reg_acc_e  acctype      = AVERY_REG_ACC_RsvdP,               bit              rand_default = 1,               bit              rand_sticky  = 1,               bit              rand_acc     = 1,               bit              is_static    = 0            );
    </description>
    </function>
    <function>
      <body>
        <name>set_v</name>
        <input_arg>
          <type>avery_reg_val_t</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_v(avery_reg_val_t v);
    </description>
    </function>
    <function>
      <body>
        <name>set_dv</name>
        <input_arg>
          <type>avery_reg_val_t</type>
          <name>dv</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_dv(avery_reg_val_t dv);
    </description>
    </function>
    <function>
      <body>
        <name>set_acctype</name>
        <input_arg>
          <type>avery_reg_acc_e</type>
          <name>acctype</name>
        </input_arg>
      </body>
      <description>    virtual function void set_acctype(avery_reg_acc_e acctype);
    </description>
    </function>
    <function>
      <body>
        <name>set_sticky</name>
        <input_arg>
          <type>bit</type>
          <name>sticky</name>
        </input_arg>
      </body>
      <description>    virtual function void set_sticky(bit sticky);
    </description>
    </function>
    <function>
      <body>
        <name>set_sticky_flr</name>
        <input_arg>
          <type>bit</type>
          <name>sticky_flr</name>
        </input_arg>
      </body>
      <description>    virtual function void set_sticky_flr(bit sticky_flr);
    </description>
    </function>
    <function>
      <body>
        <name>set_lsb_loc</name>
        <input_arg>
          <type>int</type>
          <name>lsb_loc</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_lsb_loc(int lsb_loc);
    </description>
    </function>
    <function>
      <body>
        <name>set_write_mask</name>
        <input_arg>
          <type>avery_reg_val_t</type>
          <name>mask</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_write_mask(avery_reg_val_t mask);
    </description>
    </function>
    <function>
      <body>
        <name>get_write_mask</name>
      </body>
      <description>    extern virtual function avery_reg_val_t get_write_mask();
    </description>
    </function>
    <function>
      <body>
        <name>get_field_size</name>
      </body>
      <description>    extern virtual function int get_field_size();
    </description>
    </function>
    <function>
      <body>
        <name>get_lsb_loc</name>
      </body>
      <description>    extern virtual function int get_lsb_loc();
    </description>
    </function>
    <function>
      <body>
        <name>read_dw</name>
        <input_arg>
          <type>int</type>
          <name>bit_offset</name>
        </input_arg>
        <input_arg>
          <type>avery_u32</type>
          <name>bit_enable</name>
        </input_arg>
      </body>
      <description>    extern virtual function avery_reg_val_t read_dw(int bit_offset, avery_u32 bit_enable = 'hffff_ffff);
    </description>
    </function>
    <function>
      <body>
        <name>write_dw</name>
        <input_arg>
          <type>int</type>
          <name>bit_offset</name>
        </input_arg>
        <input_arg>
          <type>avery_u32</type>
          <name>value</name>
        </input_arg>
        <input_arg>
          <type>avery_u32</type>
          <name>bit_enable</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>dbg</name>
        </input_arg>
      </body>
      <description>    extern virtual function void write_dw(
                                    int       bit_offset,
                                    avery_u32 value     ,
                                    avery_u32 bit_enable='hffff_ffff,                                       string    dbg=""     );
    </description>
    </function>
    <function>
      <body>
        <name>sprint_path</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
      </body>
      <description>    extern virtual function string sprint_path(int verbosity = 0);
    </description>
    </function>
    <function>
      <body>
        <name>get_offset_dw</name>
      </body>
      <description>    extern virtual function bit       get_offset_dw();
    </description>
    </function>
    <function>
      <body>
        <name>get_offset</name>
      </body>
      <description>    extern virtual function bit       get_offset();
    </description>
    </function>
    <function>
      <body>
        <name>set_shared</name>
        <input_arg>
          <type>avery_reg_field</type>
          <name>shared</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_shared(avery_reg_field shared);
    </description>
    </function>
    <function>
      <body>
        <name>inverse</name>
      </body>
      <description>    extern virtual function void inverse();
    </description>
    </function>
    <function>
      <body>
        <name>set_one</name>
      </body>
      <description>    extern virtual function void set_one();
    </description>
    </function>
    <function>
      <body>
        <name>compare</name>
        <input_arg>
          <type>avery_reg_field</type>
          <name>tgt</name>
        </input_arg>
      </body>
      <description>    extern virtual function bit compare(avery_reg_field tgt);
    </description>
    </function>
    <function>
      <body>
        <name>set_print_verbosity</name>
        <input_arg>
          <type>int</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_print_verbosity(int v);
    </description>
    </function>
  </class>
  <class>
    <name>avery_hash_list</name>
    <description>class avery_hash_list</description>
    <function>
      <body>
        <name>new</name>
      </body>
      <description>    function new();
    </description>
    </function>
    <function>
      <body>
        <name>push_back</name>
        <input_arg>
          <type>TKEY</type>
          <name>key</name>
        </input_arg>
        <input_arg>
          <type>T</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    function void push_back(TKEY key, T v);
    </description>
    </function>
    <function>
      <body>
        <name>push_front</name>
        <input_arg>
          <type>TKEY</type>
          <name>key</name>
        </input_arg>
        <input_arg>
          <type>T</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    function void push_front(TKEY key, T v);
    </description>
    </function>
    <function>
      <body>
        <name>lookup</name>
        <input_arg>
          <type>TKEY</type>
          <name>key</name>
        </input_arg>
      </body>
      <description>    function T lookup(TKEY key);
    </description>
    </function>
    <function>
      <body>
        <name>insert</name>
        <input_arg>
          <type>TKEY</type>
          <name>key</name>
        </input_arg>
        <input_arg>
          <type>T</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    function void insert(TKEY key, T v);
    </description>
    </function>
    <function>
      <body>
        <name>delete_all</name>
      </body>
      <description>    function void delete_all();
    </description>
    </function>
    <function>
      <body>
        <name>delete</name>
        <input_arg>
          <type>TKEY</type>
          <name>key</name>
        </input_arg>
      </body>
      <description>    function void delete(TKEY key);
    </description>
    </function>
  </class>
  <class>
    <name>apci_data_base</name>
    <description>class apci_data_base</description>
    <member>
      <name>bfmlog</name>
      <type>apci_log</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_data_base");
    </description>
    </function>
    <function>
      <body>
        <name>annotate</name>
        <input_arg>
          <type>string</type>
          <name>s</name>
        </input_arg>
      </body>
      <description>    virtual function void annotate(string s);
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_rc_int_link_ctrl</name>
    <description>class apci_cap_rc_int_link_ctrl</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_rc_int_link_ctrl",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_rtr</name>
    <description>class apci_cap_rtr</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();               
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_rtr",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>apci_ltssm_timeout_mon</name>
    <description>class apci_ltssm_timeout_mon</description>
    <member>
      <name>name</name>
      <type>string</type>
    </member>
    <member>
      <name>log</name>
      <type>apci_log</type>
    </member>
    <member>
      <name>dev</name>
      <type>apci_device</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
        <input_arg>
          <type>apci_device</type>
          <name>dev</name>
        </input_arg>
      </body>
      <description>    function new(string name, apci_log log, apci_device dev);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern virtual function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <task>
      <body>
        <name>monitor_ltssm_timeout</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
      </body>
      <description>    extern virtual task monitor_ltssm_timeout(int port_id = 0);
    </description>
    </task>
    <task>
      <body>
        <name>detect_ltssm_state_change</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>apci_ltssm_state_e</type>
          <name>state</name>
        </input_arg>
        <input_arg>
          <type>avery_u64</type>
          <name>state_timer</name>
        </input_arg>
      </body>
      <description>    extern virtual task detect_ltssm_state_change(int port_id = 0, apci_ltssm_state_e state, avery_u64 state_timer);
    </description>
    </task>
  </class>
  <class>
    <name>acxl_cmd_set_shutdown_state</name>
    <description>class acxl_cmd_set_shutdown_state</description>
    <struct>
      <name>in</name>
      <arv>
        <name>state</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_set_shutdown_state); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_clear_poison</name>
    <description>class acxl_cmd_clear_poison</description>
    <struct>
      <name>in</name>
      <arv>
        <name>write_data</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>physical_addr</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_clear_poison); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_cxl_test_alg</name>
    <description>class apci_cap_cxl_test_alg</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_cxl_test_alg");
    </description>
    </function>
    <function>
      <body>
        <name>fwrite_cb</name>
        <input_arg>
          <type>avery_reg_field</type>
          <name>f</name>
        </input_arg>
        <input_arg>
          <type>avery_reg_val_t</type>
          <name>old_v</name>
        </input_arg>
      </body>
      <description>    virtual function void fwrite_cb(avery_reg_field f, avery_reg_val_t old_v);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();                                                                                                                                
    </description>
    </function>
    <function>
      <body>
        <name>reset_cap</name>
        <input_arg>
          <type>apci_rst_e</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    virtual function void reset_cap(apci_rst_e kind);                                                                                                                    
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_vsec</name>
    <description>class apci_cap_vsec</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_vsec",
	         apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cdat_dsis</name>
    <description>class acxl_cdat_dsis</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    function new(string name = "acxl_cdat_dsis");
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_get_event_int_policy</name>
    <description>class acxl_cmd_get_event_int_policy</description>
    <struct>
      <name>fatal</name>
      <arv>
        <name>interrupt_msg_num</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rsvd0_2</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>interrupt_mode</name>
        <type>bit</type>
      </arv>
    </struct>
    <struct>
      <name>failure</name>
      <arv>
        <name>interrupt_msg_num</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rsvd0_2</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>interrupt_mode</name>
        <type>bit</type>
      </arv>
    </struct>
    <struct>
      <name>warn</name>
      <arv>
        <name>interrupt_msg_num</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rsvd0_2</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>interrupt_mode</name>
        <type>bit</type>
      </arv>
    </struct>
    <struct>
      <name>info</name>
      <arv>
        <name>interrupt_msg_num</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rsvd0_2</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>interrupt_mode</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_get_event_int_policy); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cdat_dsmscis</name>
    <description>class acxl_cdat_dsmscis</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    function new(string name = "acxl_cdat_dsmscis");
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_scan_media</name>
    <description>class acxl_cmd_scan_media</description>
    <struct>
      <name>in</name>
      <arv>
        <name>scan_media_flags</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>physical_addr_len</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>physical_addr</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_scan_media); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_tx_os_uvm_port</name>
    <description>class apci_tx_os_uvm_port</description>
    <member>
      <name>bfm</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>port_id</name>
      <type>int</type>
    </member>
    <member>
      <name>active_oses</name>
      <type>apci_os</type>
    </member>
    <member>
      <name>inactive_oses</name>
      <type>apci_os</type>
    </member>
    <function>
      <body>
        <name>set</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>apci_os</type>
          <name>active_oses</name>
        </input_arg>
        <input_arg>
          <type>apci_os</type>
          <name>inactive_oses</name>
        </input_arg>
      </body>
      <description>    function void set( apci_device    bfm		,
		       int	      port_id		,
		       apci_os	      active_oses      	,
		       apci_os	      inactive_oses         );
    </description>
    </function>
  </class>
  <class>
    <name>acxl_msg_callbacks</name>
    <description>class acxl_msg_callbacks</description>
  </class>
  <class>
    <name>avery_log</name>
    <description>class avery_log</description>
    <member>
      <name>name</name>
      <type>string</type>
    </member>
    <member>
      <name>instance_name</name>
      <type>string</type>
    </member>
    <member>
      <name>version_str</name>
      <type>string</type>
    </member>
    <member>
      <name>info_en</name>
      <type>bit</type>
    </member>
    <member>
      <name>warn_en</name>
      <type>bit</type>
    </member>
    <member>
      <name>exp_en</name>
      <type>bit</type>
    </member>
    <member>
      <name>error_en</name>
      <type>bit</type>
    </member>
    <member>
      <name>fatal_en</name>
      <type>bit</type>
    </member>
    <member>
      <name>runlog</name>
      <type>int</type>
    </member>
    <member>
      <name>num_violations</name>
      <type>int</type>
    </member>
    <member>
      <name>global_num_violations</name>
      <type>int</type>
    </member>
    <member>
      <name>fail_flag</name>
      <type>bit</type>
    </member>
    <member>
      <name>global_fail_flag</name>
      <type>bit</type>
    </member>
    <member>
      <name>emu_abnormal_trigger_g</name>
      <type>bit</type>
    </member>
    <member>
      <name>emu_monitor_trig_g</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>`avery_xvm_parent</name>
        </input_arg>
      </body>
      <description>    extern function new(string name, `avery_xvm_parent);
    </description>
    </function>
    <function>
      <body>
        <name>error</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <input_arg>
          <type>avery_data_base</type>
          <name>f</name>
        </input_arg>
      </body>
      <description>    extern virtual function void error       (string msg = "", avery_data_base f=null);
    </description>
    </function>
    <function>
      <body>
        <name>fatal</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg2</name>
        </input_arg>
      </body>
      <description>    extern virtual function void fatal       (string msg, string msg2 = "");
    </description>
    </function>
    <function>
      <body>
        <name>info</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>line_breaks_prefix</name>
        </input_arg>
      </body>
      <description>    extern virtual function void info        (string msg="", int line_breaks_prefix=0)             ;
    </description>
    </function>
    <function>
      <body>
        <name>warn</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    extern virtual function void warn        (string msg="");
    </description>
    </function>
    <function>
      <body>
        <name>asst</name>
        <input_arg>
          <type>string</type>
          <name>idname</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <input_arg>
          <type>avery_data_base</type>
          <name>f</name>
        </input_arg>
      </body>
      <description>    extern virtual function void asst        (string idname, string msg="", avery_data_base f=null);
    </description>
    </function>
    <function>
      <body>
        <name>usage</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>is_finish</name>
        </input_arg>
      </body>
      <description>    extern virtual function void usage       (string msg, int is_finish=1);
    </description>
    </function>
    <function>
      <body>
        <name>trigger</name>
        <input_arg>
          <type>string</type>
          <name>idname</name>
        </input_arg>
      </body>
      <description>    virtual function void trigger            (string idname); 
    </description>
    </function>
    <function>
      <body>
        <name>set_global_severity</name>
        <input_arg>
          <type>string</type>
          <name>idname</name>
        </input_arg>
        <input_arg>
          <type>avery_severity</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_global_severity(string idname, avery_severity v) ;
    </description>
    </function>
    <function>
      <body>
        <name>set_severity</name>
        <input_arg>
          <type>string</type>
          <name>idname</name>
        </input_arg>
        <input_arg>
          <type>avery_severity</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_severity       (string idname, avery_severity v) ;
    </description>
    </function>
    <function>
      <body>
        <name>is_fired</name>
        <input_arg>
          <type>string</type>
          <name>idname</name>
        </input_arg>
      </body>
      <description>    virtual function bit  is_fired           (string idname );
    </description>
    </function>
    <function>
      <body>
        <name>coverage_rpt</name>
        <input_arg>
          <type>string</type>
          <name>filename</name>
        </input_arg>
      </body>
      <description>    virtual function void coverage_rpt       (string filename="");
    </description>
    </function>
    <function>
      <body>
        <name>internal</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_abort</name>
        </input_arg>
        <input_arg>
          <type>avery_data_base</type>
          <name>f</name>
        </input_arg>
      </body>
      <description>    virtual function void internal           (string msg, bit is_abort = 1, avery_data_base f=null);
    </description>
    </function>
    <function>
      <body>
        <name>intern</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_abort</name>
        </input_arg>
        <input_arg>
          <type>avery_data_base</type>
          <name>f</name>
        </input_arg>
      </body>
      <description>    virtual function void intern (string msg, bit is_abort = 1, avery_data_base f=null);
    </description>
    </function>
    <function>
      <body>
        <name>debug</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    virtual function void debug              (string msg);
    </description>
    </function>
    <function>
      <body>
        <name>spec_error</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    virtual function void spec_error(string msg);
    </description>
    </function>
    <function>
      <body>
        <name>sdebug</name>
        <input_arg>
          <type>string</type>
          <name>scope</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    virtual function void sdebug(string scope, string msg);
    </description>
    </function>
    <function>
      <body>
        <name>sinfo</name>
        <input_arg>
          <type>string</type>
          <name>scope</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    virtual function void sinfo(string scope, string msg);
    </description>
    </function>
    <function>
      <body>
        <name>swarning</name>
        <input_arg>
          <type>string</type>
          <name>scope</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    virtual function void swarning(string scope, string msg);
    </description>
    </function>
    <function>
      <body>
        <name>serror</name>
        <input_arg>
          <type>string</type>
          <name>scope</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    virtual function void serror(string scope, string msg);
    </description>
    </function>
    <function>
      <body>
        <name>susage</name>
        <input_arg>
          <type>string</type>
          <name>scope</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_abort</name>
        </input_arg>
      </body>
      <description>    virtual function void susage(string scope, string msg, bit is_abort = 0);
    </description>
    </function>
    <function>
      <body>
        <name>sstep</name>
        <input_arg>
          <type>string</type>
          <name>scope</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    virtual function void sstep(string scope, string msg);
    </description>
    </function>
    <function>
      <body>
        <name>todo</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>is_finish</name>
        </input_arg>
      </body>
      <description>    function void todo( string msg, int is_finish = 0);
    </description>
    </function>
    <function>
      <body>
        <name>runlog_is_stdout</name>
      </body>
      <description>    function bit runlog_is_stdout();
    </description>
    </function>
    <function>
      <body>
        <name>append_callback</name>
        <input_arg>
          <type>avery_log_callbacks</type>
          <name>cb</name>
        </input_arg>
      </body>
      <description>    function void append_callback(input avery_log_callbacks cb);
    </description>
    </function>
  </class>
  <class>
    <name>acxl_coh_dev_attr_table</name>
    <description>class acxl_coh_dev_attr_table</description>
    <member>
      <name>tab_hdr</name>
      <type>acxl_cdat_header</type>
    </member>
    <member>
      <name>cdat_structure</name>
      <type>avery_reg</type>
    </member>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    function new(string name = "");
    </description>
    </function>
  </class>
  <class>
    <name>apci_eds_pkt</name>
    <description>class apci_eds_pkt</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    extern function new(string name = "apci_eds_pkt");
    </description>
    </function>
    <function>
      <body>
        <name>copy</name>
        <input_arg>
          <type>apci_eds_pkt</type>
          <name>to</name>
        </input_arg>
      </body>
      <description>    extern function apci_eds_pkt copy(apci_eds_pkt to = null);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
  </class>
  <class>
    <name>apci_lpif_gasket_base</name>
    <description>class apci_lpif_gasket_base</description>
    <function>
      <body>
        <name>send_over_lpif</name>
        <input_arg>
          <type>apci_data_base</type>
          <name>d</name>
        </input_arg>
      </body>
      <description>    virtual function void send_over_lpif(apci_data_base d);
    </description>
    </function>
  </class>
  <class>
    <name>avery_mem_model</name>
    <description>class avery_mem_model</description>
    <member>
      <name>inst_name</name>
      <type>string</type>
    </member>
    <member>
      <name>log</name>
      <type>avery_log</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>avery_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    function new(string name, avery_log log = null);
    </description>
    </function>
    <function>
      <body>
        <name>exists</name>
        <input_arg>
          <type>T2</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    function bit exists(T2 addr);
    </description>
    </function>
    <function>
      <body>
        <name>read</name>
        <input_arg>
          <type>T2</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    function T read(T2 addr);                                                                                                                                                                 
    </description>
    </function>
    <function>
      <body>
        <name>write</name>
        <input_arg>
          <type>T2</type>
          <name>addr</name>
        </input_arg>
        <input_arg>
          <type>T</type>
          <name>data2</name>
        </input_arg>
      </body>
      <description>    function void write(T2 addr, T data2);
    </description>
    </function>
    <function>
      <body>
        <name>size</name>
      </body>
      <description>    function bit       size();
    </description>
    </function>
    <function>
      <body>
        <name>delete</name>
        <input_arg>
          <type>T2</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    function void delete(T2 addr);
    </description>
    </function>
    <function>
      <body>
        <name>delete_all</name>
      </body>
      <description>    function void delete_all();
    </description>
    </function>
  </class>
  <class>
    <name>apci_al_tl_if</name>
    <description>class apci_al_tl_if</description>
    <member>
      <name>log</name>
      <type>apci_log</type>
    </member>
    <member>
      <name>al2tl_pkt_q</name>
      <type>apci_tlp</type>
    </member>
    <member>
      <name>tl2al_pkt_q</name>
      <type>apci_tlp</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    function new(apci_log log);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    virtual function string sprint(int verbosity=0, string prefix="");
    </description>
    </function>
  </class>
  <class>
    <name>avery_assertion_item</name>
    <description>class avery_assertion_item</description>
    <member>
      <name>id</name>
      <type>string</type>
    </member>
    <member>
      <name>description</name>
      <type>string</type>
    </member>
    <member>
      <name>cvg_cnt</name>
      <type>int</type>
    </member>
    <member>
      <name>mask</name>
      <type>bit</type>
    </member>
    <member>
      <name>fire_cnt</name>
      <type>int</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>avery_severity</type>
          <name>severity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>id</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>des</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>cvg_cnt</name>
        </input_arg>
      </body>
      <description>    function new(avery_severity severity, string id, string des, int cvg_cnt = 0);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
      </body>
      <description>    function string sprint(int verbosity = 0);
    </description>
    </function>
  </class>
  <class>
    <name>apci_uvm_seqr</name>
    <description>class apci_uvm_seqr</description>
    <member>
      <name>bfm</name>
      <type>apci_device</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>uvm_component</type>
          <name>parent</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_uvm_seqr", uvm_component parent = null);
    </description>
    </function>
  </class>
  <class>
    <name>apci_dllp</name>
    <description>class apci_dllp</description>
    <member>
      <name>crc</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <parameter>
          <type>apci_dllp_type</type>
          <name>kind</name>
        </parameter>
      </body>
      <description>    function new(`avery_strname  apci_dllp_type kind = APCI_DLLP_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern virtual function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <function>
      <body>
        <name>rehash_link_crc</name>
      </body>
      <description>    extern virtual function void rehash_link_crc();
    </description>
    </function>
    <function>
      <body>
        <name>is_ack</name>
      </body>
      <description>    function bit is_ack();          return kind == APCI_DLLP_ack;          endfunction 
    </description>
    </function>
    <function>
      <body>
        <name>is_nak</name>
      </body>
      <description>    function bit is_nak();          return kind == APCI_DLLP_nak;          endfunction 
    </description>
    </function>
    <function>
      <body>
        <name>is_pm_enter_l1</name>
      </body>
      <description>    function bit is_pm_enter_l1();  return kind == APCI_DLLP_pm_enter_l1;  endfunction 
    </description>
    </function>
    <function>
      <body>
        <name>is_pm_enter_l23</name>
      </body>
      <description>    function bit is_pm_enter_l23(); return kind == APCI_DLLP_pm_enter_l23; endfunction 
    </description>
    </function>
    <function>
      <body>
        <name>is_pm_as_req_l1</name>
      </body>
      <description>    function bit is_pm_as_req_l1(); return kind == APCI_DLLP_pm_as_req_l1; endfunction 
    </description>
    </function>
    <function>
      <body>
        <name>is_pm_req_ack</name>
      </body>
      <description>    function bit is_pm_req_ack();   return kind == APCI_DLLP_pm_req_ack;   endfunction 
    </description>
    </function>
    <function>
      <body>
        <name>is_vendor</name>
      </body>
      <description>    function bit is_vendor();       return kind == APCI_DLLP_vendor;       endfunction 
    </description>
    </function>
    <function>
      <body>
        <name>is_ifc1_p</name>
      </body>
      <description>    function bit is_ifc1_p();       return kind == APCI_DLLP_ifc1_p;       endfunction 
    </description>
    </function>
    <function>
      <body>
        <name>is_ifc1_np</name>
      </body>
      <description>    function bit is_ifc1_np();      return kind == APCI_DLLP_ifc1_np;      endfunction 
    </description>
    </function>
    <function>
      <body>
        <name>is_ifc1_cpl</name>
      </body>
      <description>    function bit is_ifc1_cpl();     return kind == APCI_DLLP_ifc1_cpl;     endfunction 
    </description>
    </function>
    <function>
      <body>
        <name>is_ifc2_p</name>
      </body>
      <description>    function bit is_ifc2_p();       return kind == APCI_DLLP_ifc2_p;       endfunction 
    </description>
    </function>
    <function>
      <body>
        <name>is_ifc2_np</name>
      </body>
      <description>    function bit is_ifc2_np();      return kind == APCI_DLLP_ifc2_np;      endfunction 
    </description>
    </function>
    <function>
      <body>
        <name>is_ifc2_cpl</name>
      </body>
      <description>    function bit is_ifc2_cpl();     return kind == APCI_DLLP_ifc2_cpl;     endfunction 
    </description>
    </function>
    <function>
      <body>
        <name>is_ufc_p</name>
      </body>
      <description>    function bit is_ufc_p();        return kind == APCI_DLLP_ufc_p;        endfunction 
    </description>
    </function>
    <function>
      <body>
        <name>is_ufc_np</name>
      </body>
      <description>    function bit is_ufc_np();       return kind == APCI_DLLP_ufc_np;       endfunction 
    </description>
    </function>
    <function>
      <body>
        <name>is_ufc_cpl</name>
      </body>
      <description>    function bit is_ufc_cpl();      return kind == APCI_DLLP_ufc_cpl;      endfunction 
    </description>
    </function>
    <function>
      <body>
        <name>is_fc_p</name>
      </body>
      <description>    function bit is_fc_p();         return kind inside {APCI_DLLP_ifc1_p, APCI_DLLP_ifc2_p, APCI_DLLP_ufc_p}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_fc_np</name>
      </body>
      <description>    function bit is_fc_np();        return kind inside {APCI_DLLP_ifc1_np, APCI_DLLP_ifc2_np, APCI_DLLP_ufc_np}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_fc_cpl</name>
      </body>
      <description>    function bit is_fc_cpl();       return kind inside {APCI_DLLP_ifc1_cpl, APCI_DLLP_ifc2_cpl, APCI_DLLP_ufc_cpl}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_dl_feature</name>
      </body>
      <description>    function bit is_dl_feature();   return kind == APCI_DLLP_dl_feature;   endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_fc</name>
      </body>
      <description>    function bit is_fc(); 
    </description>
    </function>
    <function>
      <body>
        <name>is_ufc</name>
      </body>
      <description>    function bit is_ufc(); 
    </description>
    </function>
    <function>
      <body>
        <name>is_ifc1</name>
      </body>
      <description>    function bit is_ifc1(); 
    </description>
    </function>
    <function>
      <body>
        <name>is_ifc2</name>
      </body>
      <description>    function bit is_ifc2(); 
    </description>
    </function>
    <function>
      <body>
        <name>is_acknak</name>
      </body>
      <description>    function bit is_acknak(); 
    </description>
    </function>
    <function>
      <body>
        <name>is_pm</name>
      </body>
      <description>    function bit is_pm(); 
    </description>
    </function>
    <function>
      <body>
        <name>hdr_fc_ratio</name>
      </body>
      <description>    function int hdr_fc_ratio();
    </description>
    </function>
    <function>
      <body>
        <name>data_fc_ratio</name>
      </body>
      <description>    function int data_fc_ratio();
    </description>
    </function>
    <function>
      <body>
        <name>get_hdr_fc</name>
        <input_arg>
          <type>bit</type>
          <name>enable_scaled_fc</name>
        </input_arg>
      </body>
      <description>    function int get_hdr_fc(bit enable_scaled_fc);
    </description>
    </function>
    <function>
      <body>
        <name>get_data_fc</name>
        <input_arg>
          <type>bit</type>
          <name>enable_scaled_fc</name>
        </input_arg>
      </body>
      <description>    function int get_data_fc(bit enable_scaled_fc);
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_get_event_records</name>
    <description>class acxl_cmd_get_event_records</description>
    <struct>
      <name>in</name>
      <arv>
        <name>event_log</name>
        <type>bit</type>
      </arv>
    </struct>
    <struct>
      <name>out</name>
      <arv>
        <name>rsvd16</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>event_record_cnt</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>last_overflow_event_timestamp</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>first_overflow_event_timestamp</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>overflow_err_cnt</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rsvd1</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rsvd0_2</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>more_event_records</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>overflow</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_get_event_records); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>cb_eios_any_lane</name>
    <description>class cb_eios_any_lane</description>
    <member>
      <name>lane_num</name>
      <type>int</type>
    </member>
    <member>
      <name>drop_eios</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>tx_os_enter_lane</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <ref_arg>
          <type>apci_os</type>
          <name>active_oses</name>
        </ref_arg>
        <ref_arg>
          <type>apci_os</type>
          <name>inactive_oses</name>
        </ref_arg>
      </body>
      <description>    virtual function void tx_os_enter_lane(
            apci_device bfm            ,
            int         port_id        ,
            ref apci_os active_oses        ,
            ref apci_os inactive_oses      
        );
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_set_sld_qos_ctrl</name>
    <description>class acxl_cmd_set_sld_qos_ctrl</description>
    <struct>
      <name>in</name>
      <arv>
        <name>backpressure_sample_interval</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>egress_severe_percentage</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>egress_moderate_percentage</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>qos_telemetry_ctrl</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_set_sld_qos_ctrl); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>(TC0)")</name>
    <description>class (TC0)")</description>
  </class>
  <class>
    <name>apci_cap_cxl_bar_virt_acl</name>
    <description>class apci_cap_cxl_bar_virt_acl</description>
    <member>
      <name>log</name>
      <type>apci_log</type>
    </member>
    <member>
      <name>num_vectors</name>
      <type>int</type>
    </member>
    <member>
      <name>register_bir</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>rsvd1</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>start_offset</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>rsvd2</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>reg_size</name>
      <type>avery_reg_field</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_cxl_bar_virt_acl", apci_log log = null);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();  
    </description>
    </function>
    <function>
      <body>
        <name>reset_cap</name>
        <input_arg>
          <type>apci_rst_e</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    virtual function void reset_cap(apci_rst_e kind);                                                                                                                    
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_cxl_dev_cmd_if</name>
    <description>class apci_cap_cxl_dev_cmd_if</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_cxl_dev_cmd_if", apci_log log = null);
    </description>
    </function>
    <function>
      <body>
        <name>reset_cap</name>
        <input_arg>
          <type>apci_rst_e</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    virtual function void reset_cap(apci_rst_e kind);                                                                                                                    
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cdat_sslbis</name>
    <description>class acxl_cdat_sslbis</description>
    <member>
      <name>num_ports</name>
      <type>int</type>
    </member>
    <member>
      <name>port_x_id</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>port_y_id</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>len_or_bandwith</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>rsvd2</name>
      <type>avery_reg_field</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>num_ports</name>
        </input_arg>
      </body>
      <description>    function new(string name = "acxl_cdat_sslbis", int num_ports);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();  
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_secure_erase</name>
    <description>class acxl_cmd_secure_erase</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_secure_erase); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_device_base</name>
    <description>class apci_device_base</description>
    <member>
      <name>name</name>
      <type>string</type>
    </member>
    <member>
      <name>device_id</name>
      <type>int</type>
    </member>
    <member>
      <name>log</name>
      <type>apci_log</type>
    </member>
    <member>
      <name>cfg_info</name>
      <type>apci_cfg_info</type>
    </member>
    <member>
      <name>cxl_cfg_info</name>
      <type>acxl_cfg_info</type>
    </member>
    <member>
      <name>int1</name>
      <type>integer</type>
    </member>
    <function>
      <body>
        <name>post_transaction</name>
        <input_arg>
          <type>apci_transaction</type>
          <name>tr</name>
        </input_arg>
      </body>
      <description>    virtual function void post_transaction( apci_transaction  tr);
    </description>
    </function>
    <function>
      <body>
        <name>post_tlp</name>
        <input_arg>
          <type>apci_tlp</type>
          <name>p</name>
        </input_arg>
      </body>
      <description>    virtual function void post_tlp( apci_tlp  p );
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>`avery_xvm_parent</name>
        </input_arg>
      </body>
      <description>    function new( string name, `avery_xvm_parent);
    </description>
    </function>
    <function>
      <body>
        <name>build_phase</name>
        <input_arg>
          <type>uvm_phase</type>
          <name>phase</name>
        </input_arg>
      </body>
      <description>    virtual function void build_phase(uvm_phase phase);
    </description>
    </function>
    <task>
      <body>
        <name>run</name>
      </body>
      <description>    virtual task run();
    </description>
    </task>
    <function>
      <body>
        <name>bus_enum_load_cfg</name>
        <input_arg>
          <type>int</type>
          <name>phase</name>
        </input_arg>
        <input_arg>
          <type>apci_cfg_space</type>
          <name>csp</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>pid</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>fid</name>
        </input_arg>
      </body>
      <description>    virtual function void bus_enum_load_cfg(int phase, apci_cfg_space csp = null, int pid = 0, int fid = 0);
    </description>
    </function>
    <function>
      <body>
        <name>bus_enum_load_db</name>
        <ref_arg>
          <type>apci_bdf_t</type>
          <name>k2p</name>
        </ref_arg>
      </body>
      <description>    virtual function void bus_enum_load_db(ref apci_bdf_t k2p      );
    </description>
    </function>
  </class>
  <class>
    <name>apipe_msg_bus_transaction</name>
    <description>class apipe_msg_bus_transaction</description>
  </class>
  <class>
    <name>apci_cap_rc_link_declaration</name>
    <description>class apci_cap_rc_link_declaration</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_rc_link_declaration",
        apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_doe_table_access</name>
    <description>class apci_cap_doe_table_access</description>
  </class>
  <class>
    <name>apci_mem_adaptor</name>
    <description>class apci_mem_adaptor</description>
    <task>
      <body>
        <name>write_mem_line</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>byte_enable</name>
        </input_arg>
        <ref_arg>
          <type>bit</type>
          <name>bytes</name>
        </ref_arg>
        <input_arg>
          <type>avery_data_base</type>
          <name>src</name>
        </input_arg>
      </body>
      <description>    virtual task write_mem_line(
            input bit               addr        ,
            input bit               byte_enable ,
	    ref   bit               bytes           ,
	    input avery_data_base   src = null       
	);	
    </description>
    </task>
    <task>
      <body>
        <name>read_mem_line</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
        <ref_arg>
          <type>bit</type>
          <name>bytes</name>
        </ref_arg>
        <input_arg>
          <type>avery_data_base</type>
          <name>src</name>
        </input_arg>
      </body>
      <description>    virtual task read_mem_line(
	    input bit               addr        ,
	    ref   bit               bytes           ,
	    input avery_data_base   src = null 
	);	
    </description>
    </task>
    <task>
      <body>
        <name>write_noncoh_mem</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>first_be</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>last_be</name>
        </input_arg>
        <ref_arg>
          <type>bit</type>
          <name>va</name>
        </ref_arg>
        <input_arg>
          <type>avery_data_base</type>
          <name>src</name>
        </input_arg>
      </body>
      <description>    virtual task write_noncoh_mem(
	    input bit             addr       ,
	    input bit              first_be   ,
	    input bit              last_be    ,
	    ref   bit             va             ,
	    input avery_data_base src         
	);	
    </description>
    </task>
    <task>
      <body>
        <name>read_noncoh_mem</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>ndw</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>first_be</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>last_be</name>
        </input_arg>
        <ref_arg>
          <type>bit</type>
          <name>va</name>
        </ref_arg>
        <input_arg>
          <type>avery_data_base</type>
          <name>src</name>
        </input_arg>
      </body>
      <description>    virtual task read_noncoh_mem(
	    input bit             addr    ,
	    input bit             ndw     ,
	    input bit              first_be,
	    input bit              last_be ,
	    ref   bit             va      ,
	    input avery_data_base src
	);	
    </description>
    </task>
  </class>
  <class>
    <name>apci_device_util</name>
    <description>class apci_device_util</description>
    <member>
      <name>bfm</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>log</name>
      <type>apci_log</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
      </body>
      <description>function new(apci_device bfm);
    </description>
    </function>
    <task>
      <body>
        <name>wait_tx_msg</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>apci_msg_code_e</type>
          <name>code</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>virtual task wait_tx_msg(int port_id, apci_msg_code_e code, time timer = 0, string msg = "");
    </description>
    </task>
    <task>
      <body>
        <name>wait_rx_msg</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>apci_msg_code_e</type>
          <name>code</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>virtual task wait_rx_msg(int port_id, apci_msg_code_e code, time timer = 0, string msg = "");
    </description>
    </task>
    <task>
      <body>
        <name>wait_rx_err_msg</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <output_arg>
          <type>apci_tlp</type>
          <name>tlp</name>
        </output_arg>
      </body>
      <description>virtual task wait_rx_err_msg(int port_id, time timer = 0, string msg = "", output apci_tlp tlp);
    </description>
    </task>
    <task>
      <body>
        <name>wait_tx_dllp</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>apci_dllp_type</type>
          <name>t</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>virtual task wait_tx_dllp(int port_id, apci_dllp_type t, time timer = 0, string msg = "");
    </description>
    </task>
    <task>
      <body>
        <name>wait_rx_dllp</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>apci_dllp_type</type>
          <name>t</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>virtual task wait_rx_dllp(int port_id, apci_dllp_type t, time timer = 0, string msg = "");
    </description>
    </task>
    <task>
      <body>
        <name>msix_mask_unmask</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_mask</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>int_vector</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
      </body>
      <description>virtual task msix_mask_unmask(apci_bdf_t bdf, bit is_mask, int int_vector, output bit err);
    </description>
    </task>
    <task>
      <body>
        <name>get_interrupt_enabled</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>func_id</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>pin_enabled</name>
        </output_arg>
        <output_arg>
          <type>bit</type>
          <name>msi_enabled</name>
        </output_arg>
        <output_arg>
          <type>bit</type>
          <name>msix_enabled</name>
        </output_arg>
      </body>
      <description>virtual task get_interrupt_enabled(
        input  int port_id     ,
        input  int func_id     ,
        output bit pin_enabled ,
        output bit msi_enabled ,
        output bit msix_enabled );
    </description>
    </task>
    <task>
      <body>
        <name>clear_reg_interrupt_status</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>func_id</name>
        </input_arg>
      </body>
      <description>virtual task clear_reg_interrupt_status (
        input  int port_id     ,
        input  int func_id);
    </description>
    </task>
    <function>
      <body>
        <name>check_dev_type</name>
        <input_arg>
          <type>apci_device_type</type>
          <name>dt</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>local function void check_dev_type(apci_device_type dt, string msg);
    </description>
    </function>
    <function>
      <body>
        <name>convert_rw_size</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>size</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>dw_addr</name>
        </output_arg>
        <input_arg>
          <type>bit</type>
          <name>first_be</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>last_be</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>dw_size</name>
        </input_arg>
      </body>
      <description>virtual function void convert_rw_size(
    input  bit       addr,	             bit       size,	      output bit       dw_addr,
           bit       first_be,
           bit       last_be,
           int       dw_size
    );
    </description>
    </function>
    <function>
      <body>
        <name>dw_to_byte</name>
        <input_arg>
          <type>bit</type>
          <name>first_be</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>last_be</name>
        </input_arg>
        <ref_arg>
          <type>bit</type>
          <name>va</name>
        </ref_arg>
        <output_arg>
          <type>bit</type>
          <name>ba</name>
        </output_arg>
      </body>
      <description>virtual function void dw_to_byte(
    input  bit       first_be,
           bit       last_be,
    ref    bit       va      ,
    output bit       ba      
    );
    </description>
    </function>
    <function>
      <body>
        <name>byte_to_dw</name>
        <input_arg>
          <type>bit</type>
          <name>first_be</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>last_be</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>dw_size</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>ba</name>
        </input_arg>
        <ref_arg>
          <type>bit</type>
          <name>va</name>
        </ref_arg>
      </body>
      <description>virtual function void byte_to_dw(
    input  bit       first_be,
           bit       last_be,
           int       dw_size,
           bit       ba      ,
    ref    bit       va      
    );
    </description>
    </function>
    <function>
      <body>
        <name>be_trace</name>
        <input_arg>
          <type>bit</type>
          <name>be</name>
        </input_arg>
        <output_arg>
          <type>int</type>
          <name>start</name>
        </output_arg>
        <input_arg>
          <type>int</type>
          <name>limit</name>
        </input_arg>
      </body>
      <description>local function void be_trace(
    input  bit       be,
    output int	     start,
	   int	     limit
    );
    </description>
    </function>
    <task>
      <body>
        <name>rc_get_BDF_BAR</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf2</name>
        </input_arg>
        <input_arg>
          <type>apci_cap_type0</type>
          <name>pcie_cap2</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>start2</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>total2</name>
        </input_arg>
      </body>
      <description>task rc_get_BDF_BAR(   
    input apci_bdf_t bdf2,
    input apci_cap_type0 pcie_cap2,
    input int start2= 0,       input int total2= 1);       </description>
    </task>
    <task>
      <body>
        <name>send_doe_data</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>apci_cap_doe</type>
          <name>doe_cap</name>
        </input_arg>
        <input_arg>
          <type>apci_doe_data</type>
          <name>dd</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>wait_response</name>
        </input_arg>
      </body>
      <description>task send_doe_data(apci_bdf_t bdf, apci_cap_doe doe_cap, apci_doe_data dd, bit wait_response = 1);
    </description>
    </task>
    <task>
      <body>
        <name>fetch_doe_data</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>apci_cap_doe</type>
          <name>cap</name>
        </input_arg>
        <input_arg>
          <type>apci_doe_data</type>
          <name>req</name>
        </input_arg>
        <output_arg>
          <type>apci_doe_data</type>
          <name>rsp</name>
        </output_arg>
        <input_arg>
          <type>bit</type>
          <name>err</name>
        </input_arg>
      </body>
      <description>task fetch_doe_data(apci_bdf_t bdf, apci_cap_doe cap, apci_doe_data req, output apci_doe_data rsp, bit err);
    </description>
    </task>
    <task>
      <body>
        <name>do_doe_discovery</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>apci_cap_doe</type>
          <name>doe_cap</name>
        </input_arg>
        <output_arg>
          <type>apci_doe_discovery_table</type>
          <name>d_table</name>
        </output_arg>
        <input_arg>
          <type>bit</type>
          <name>err</name>
        </input_arg>
      </body>
      <description>task do_doe_discovery(apci_bdf_t bdf, apci_cap_doe doe_cap, output apci_doe_discovery_table d_table, bit err);
    </description>
    </task>
    <task>
      <body>
        <name>do_doe_cdat_search</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>apci_cap_doe</type>
          <name>doe_cap</name>
        </input_arg>
        <output_arg>
          <type>acxl_coh_dev_attr_table</type>
          <name>cdat</name>
        </output_arg>
        <input_arg>
          <type>bit</type>
          <name>err</name>
        </input_arg>
      </body>
      <description>task do_doe_cdat_search(apci_bdf_t bdf, apci_cap_doe doe_cap, output acxl_coh_dev_attr_table cdat, bit err);
    </description>
    </task>
    <task>
      <body>
        <name>send_cxl_device_cmd</name>
        <input_arg>
          <type>acxl_device_cmd</type>
          <name>cmd</name>
        </input_arg>
      </body>
      <description>task send_cxl_device_cmd(acxl_device_cmd cmd);
    </description>
    </task>
    <task>
      <body>
        <name>cfgwr_wait_done</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>avery_u16</type>
          <name>offset</name>
        </input_arg>
        <input_arg>
          <type>avery_u32</type>
          <name>v</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
        <input_arg>
          <type>string</type>
          <name>dbg</name>
        </input_arg>
      </body>
      <description>local task cfgwr_wait_done(apci_bdf_t bdf, avery_u16 offset, avery_u32 v, output bit err, input string dbg="");
    </description>
    </task>
    <task>
      <body>
        <name>cfgrd_wait_done</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>avery_u16</type>
          <name>offset</name>
        </input_arg>
        <output_arg>
          <type>avery_u32</type>
          <name>v</name>
        </output_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
        <input_arg>
          <type>string</type>
          <name>dbg</name>
        </input_arg>
      </body>
      <description>local task cfgrd_wait_done(apci_bdf_t bdf, avery_u16 offset, output avery_u32 v, output bit err, input string dbg="");
    </description>
    </task>
  </class>
  <class>
    <name>acxl_cmd_inject_poison</name>
    <description>class acxl_cmd_inject_poison</description>
    <struct>
      <name>in</name>
      <arv>
        <name>physical_addr</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_inject_poison); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>acxl_fm_enum_vcs</name>
    <description>class acxl_fm_enum_vcs</description>
    <member>
      <name>vcs_id</name>
      <type>bit</type>
    </member>
    <member>
      <name>vcs_state</name>
      <type>bit</type>
    </member>
    <member>
      <name>usp_id</name>
      <type>bit</type>
    </member>
    <member>
      <name>num_vppbs</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>unpack</name>
        <input_arg>
          <type>acxl_fm_cmd</type>
          <name>m</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
        <ref_arg>
          <type>bit</type>
          <name>bq</name>
        </ref_arg>
      </body>
      <description>    function bit unpack(acxl_fm_cmd m, apci_log log, ref bit       bq      );
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    function string sprint(int verbosity = 0, string prefix="");
    </description>
    </function>
  </class>
  <class>
    <name>apci_statistics</name>
    <description>class apci_statistics</description>
    <member>
      <name>port_id</name>
      <type>int</type>
    </member>
    <member>
      <name>is_tx</name>
      <type>bit</type>
    </member>
    <member>
      <name>n_tlps</name>
      <type>bit</type>
    </member>
    <member>
      <name>n_dllps</name>
      <type>bit</type>
    </member>
    <member>
      <name>n_tlp_bytes</name>
      <type>bit</type>
    </member>
    <member>
      <name>n_dllp_bytes</name>
      <type>bit</type>
    </member>
    <member>
      <name>n_ts</name>
      <type>bit</type>
    </member>
    <member>
      <name>n_skpos</name>
      <type>bit</type>
    </member>
    <member>
      <name>n_eieos</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_tx</name>
        </input_arg>
      </body>
      <description>    function new(int port_id, bit is_tx);
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_dpa</name>
    <description>class apci_cap_dpa</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_dpa",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>apci_seq_mem_pair</name>
    <description>class apci_seq_mem_pair</description>
    <member>
      <name>num_tr</name>
      <type>int</type>
    </member>
    <member>
      <name>max_tr_size</name>
      <type>int</type>
    </member>
    <member>
      <name>check_data</name>
      <type>bit</type>
    </member>
    <member>
      <name>mgr</name>
      <type>apci_device_mgr</type>
    </member>
    <member>
      <name>tr_sent</name>
      <type>bit</type>
    </member>
    <member>
      <name>with_numvf</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_device_mgr</type>
          <name>mgr</name>
        </input_arg>
      </body>
      <description>    function new(apci_device bfm, apci_device_mgr mgr);
    </description>
    </function>
    <task>
      <body>
        <name>run</name>
      </body>
      <description>    virtual task run();
    </description>
    </task>
    <task>
      <body>
        <name>send_tr_pair</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>apci_bar_t</type>
          <name>mbar</name>
        </input_arg>
        <input_arg>
          <type>output</type>
          <name>err</name>
        </input_arg>
      </body>
      <description>    virtual task send_tr_pair(apci_func_info func, apci_bar_t mbar, output err);
    </description>
    </task>
  </class>
  <class>
    <name>apci_cap_null_ext</name>
    <description>class apci_cap_null_ext</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_null_ext",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>apci_cfg_seq_util</name>
    <description>class apci_cfg_seq_util</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
      </body>
      <description>    function new(apci_device bfm);
    </description>
    </function>
    <task>
      <body>
        <name>bdf_cfg_read</name>
        <input_arg>
          <type>bit</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>cap_offset</name>
        </input_arg>
        <output_arg>
          <type>avery_u32</type>
          <name>v</name>
        </output_arg>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
      </body>
      <description>    virtual task bdf_cfg_read(
	input bit        bdf,
	input int 	 cap_offset,
	output avery_u32 v,
	input int        port_id = 0);
    </description>
    </task>
    <task>
      <body>
        <name>bdf_cfg_write</name>
        <input_arg>
          <type>bit</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>cap_offset</name>
        </input_arg>
        <input_arg>
          <type>avery_u32</type>
          <name>v</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
      </body>
      <description>    virtual task bdf_cfg_write(
	input bit        bdf,
	input int 	 cap_offset,
	input avery_u32  v,
	input int        port_id = 0);
    </description>
    </task>
  </class>
  <class>
    <name>apci_test_info</name>
    <description>class apci_test_info</description>
    <member>
      <name>name</name>
      <type>string</type>
    </member>
    <member>
      <name>bfm_started_timeout</name>
      <type>bit</type>
    </member>
    <member>
      <name>dut_vendor_id</name>
      <type>bit</type>
    </member>
    <member>
      <name>dut_device_id</name>
      <type>bit</type>
    </member>
    <member>
      <name>serial_phy</name>
      <type>bit</type>
    </member>
    <member>
      <name>user_dir_speed</name>
      <type>byte</type>
    </member>
    <member>
      <name>err_type</name>
      <type>int</type>
    </member>
    <member>
      <name>cfg_test_capable_speed</name>
      <type>int</type>
    </member>
    <member>
      <name>test_capable_speed</name>
      <type>int</type>
    </member>
    <member>
      <name>cfg_test_iterations</name>
      <type>int</type>
    </member>
    <member>
      <name>cfg_test_15_iterations</name>
      <type>int</type>
    </member>
    <member>
      <name>rx_any_compliance_count</name>
      <type>int</type>
    </member>
    <member>
      <name>mod_comp_pattern_lock_time</name>
      <type>time</type>
    </member>
    <member>
      <name>mod_comp_pattern</name>
      <type>bit</type>
    </member>
    <member>
      <name>rx_req_l1_reject_tolerance</name>
      <type>int</type>
    </member>
    <member>
      <name>ack_latency_tolerance</name>
      <type>real</type>
    </member>
    <member>
      <name>con_rst_finish_time</name>
      <type>time</type>
    </member>
    <member>
      <name>func_level_rst_finish_time</name>
      <type>time</type>
    </member>
    <member>
      <name>fund_rst_finish_time</name>
      <type>time</type>
    </member>
    <member>
      <name>polling_cap_time</name>
      <type>time</type>
    </member>
    <member>
      <name>retrain_link_time</name>
      <type>time</type>
    </member>
    <member>
      <name>wait_ack_previous_tlp</name>
      <type>time</type>
    </member>
    <member>
      <name>wait_ufc_previous_tlp</name>
      <type>time</type>
    </member>
    <member>
      <name>wait_set_err_reg</name>
      <type>time</type>
    </member>
    <member>
      <name>wait_replied_tlp</name>
      <type>time</type>
    </member>
    <member>
      <name>wait_tr_done</name>
      <type>time</type>
    </member>
    <member>
      <name>wait_margining_ready</name>
      <type>time</type>
    </member>
    <member>
      <name>disabled_hold_time</name>
      <type>time</type>
    </member>
    <member>
      <name>link_width_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>gen1_infer_idle_not_supported</name>
      <type>bit</type>
    </member>
    <member>
      <name>gen4_jitter_not_supported</name>
      <type>bit</type>
    </member>
    <member>
      <name>gen5_jitter_not_supported</name>
      <type>bit</type>
    </member>
    <member>
      <name>gen6_jitter_not_supported</name>
      <type>bit</type>
    </member>
    <member>
      <name>tx_msg_vendor_not_supported</name>
      <type>bit</type>
    </member>
    <member>
      <name>max_jitter_in_ppm</name>
      <type>int</type>
    </member>
    <member>
      <name>ltssm_1ms_timeout</name>
      <type>time</type>
    </member>
    <member>
      <name>ltssm_2ms_timeout</name>
      <type>time</type>
    </member>
    <member>
      <name>ltssm_4ms_timeout</name>
      <type>time</type>
    </member>
    <member>
      <name>ltssm_12ms_timeout</name>
      <type>time</type>
    </member>
    <member>
      <name>ltssm_24ms_timeout</name>
      <type>time</type>
    </member>
    <member>
      <name>ltssm_32ms_timeout</name>
      <type>time</type>
    </member>
    <member>
      <name>ltssm_48ms_timeout</name>
      <type>time</type>
    </member>
    <member>
      <name>ltssm_timeout_long</name>
      <type>time</type>
    </member>
    <member>
      <name>detect_clkreq_time</name>
      <type>time</type>
    </member>
    <member>
      <name>wait_dev_stable</name>
      <type>time</type>
    </member>
    <member>
      <name>wait_dev_loopbk_data</name>
      <type>time</type>
    </member>
    <member>
      <name>loopbk_sym_time</name>
      <type>time</type>
    </member>
    <member>
      <name>delay_10us</name>
      <type>time</type>
    </member>
    <member>
      <name>delay_100us</name>
      <type>time</type>
    </member>
    <member>
      <name>delay_100ms</name>
      <type>time</type>
    </member>
    <member>
      <name>fc_update_interval_ext_sync</name>
      <type>time</type>
    </member>
    <member>
      <name>wait_L1_stable</name>
      <type>time</type>
    </member>
    <member>
      <name>eq_timeout_type</name>
      <type>bit</type>
    </member>
    <member>
      <name>testsuite_all_speeds</name>
      <type>bit</type>
    </member>
    <member>
      <name>alt_speed_change</name>
      <type>bit</type>
    </member>
    <member>
      <name>predetermined_lane_equal_max_lane</name>
      <type>bit</type>
    </member>
    <member>
      <name>skew_by_skp</name>
      <type>bit</type>
    </member>
    <member>
      <name>testing_time</name>
      <type>time</type>
    </member>
    <member>
      <name>any_lane</name>
      <type>bit</type>
    </member>
    <member>
      <name>sris_mode</name>
      <type>bit</type>
    </member>
    <member>
      <name>ltr_switch</name>
      <type>time</type>
    </member>
    <member>
      <name>eieos_interval_ts1_limit</name>
      <type>int</type>
    </member>
    <member>
      <name>cxl_pm_wait_time</name>
      <type>time</type>
    </member>
    <member>
      <name>cxl_cache_tr_unit</name>
      <type>time</type>
    </member>
    <member>
      <name>cxl_num_addr_incr_max</name>
      <type>int</type>
    </member>
    <member>
      <name>cxl_num_sets_max</name>
      <type>int</type>
    </member>
    <member>
      <name>cxl_num_loops_max</name>
      <type>int</type>
    </member>
    <member>
      <name>cxl_max_num_retry</name>
      <type>int</type>
    </member>
    <member>
      <name>cxl_max_num_phy_reinit</name>
      <type>int</type>
    </member>
    <member>
      <name>cxl_host_not_reply_pmreq</name>
      <type>bit</type>
    </member>
    <member>
      <name>inject_cnt</name>
      <type>int</type>
    </member>
    <struct>
      <name>opt_checks</name>
      <arv>
        <name>uncor_internal_err</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>corrected_internal_err</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>framing_err_8b10b</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>framing_err_128b</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>receiver_err_tlp_len</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>receiver_err_in_Recovery</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>receiver_err_in_Disabled</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>receiver_err_in_HotReset</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>infer_ei_L0</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rcvr_overflow</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>check_infinite_ufc_sup</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>check_scale_ufc_sup</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>byte_enable</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>cross_4k</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>io_req</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>cfg_req</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>intx_msg_upstream</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rx_mal_tlp_update_fc</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>cross_rcb</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>drs_msg_chk</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>frs_msg_chk</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>hid_msg_chk</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>route_to_rc_err_downstream</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>broadcast_from_rc_err_upstream</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>sw_check_ecrc_of_forward_tlp</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>mal_unexpected_cpl</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>mal_retry_cpl</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>vendor_type0_sup</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>max_pasid_width_chk</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>hdr_log_overflow</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>ctrl_skp_margin_err</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>link_err_to_recovery</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>dstate_is_uc</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>ur_for_ecrc_err</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>cpl_timeout_recv_cnt</name>
        <type>int</type>
      </arv>
      <arv>
        <name>cxl_static_bits_check_err</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_test_info");
    </description>
    </function>
    <function>
      <body>
        <name>add_dut</name>
        <input_arg>
          <type>int</type>
          <name>vendor_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>device_id</name>
        </input_arg>
      </body>
      <description>    virtual function void add_dut(int vendor_id, int device_id);
    </description>
    </function>
    <function>
      <body>
        <name>is_dut</name>
        <input_arg>
          <type>int</type>
          <name>vendor_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>device_id</name>
        </input_arg>
      </body>
      <description>    virtual function bit is_dut(int vendor_id, int device_id);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    virtual function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_vc</name>
    <description>class apci_cap_vc</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_vc",
	         apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
    <function>
      <body>
        <name>tc_2_vc</name>
        <input_arg>
          <type>bit</type>
          <name>tc</name>
        </input_arg>
        <output_arg>
          <type>int</type>
          <name>resource_id</name>
        </output_arg>
      </body>
      <description>    virtual function int tc_2_vc(bit       tc, output int resource_id);
    </description>
    </function>
    <function>
      <body>
        <name>sanity_check</name>
        <input_arg>
          <type>bit</type>
          <name>is_fatal</name>
        </input_arg>
      </body>
      <description>    virtual function void sanity_check(bit is_fatal = 1);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_dvsec_cxl_port_ext</name>
    <description>class apci_cap_dvsec_cxl_port_ext</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_dvsec_cxl_port_ext",
		 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>add_alt_ranges</name>
        <ref_arg>
          <type>apci_bar_t</type>
          <name>q</name>
        </ref_arg>
      </body>
      <description>    function void add_alt_ranges(ref apci_bar_t q      );
    </description>
    </function>
    <function>
      <body>
        <name>get_local_rcrb</name>
      </body>
      <description>    function apci_bar_t get_local_rcrb();
    </description>
    </function>
    <function>
      <body>
        <name>get_rcrb_base</name>
      </body>
      <description>    function avery_u64 get_rcrb_base();
    </description>
    </function>
    <function>
      <body>
        <name>add_rcrb_range</name>
        <ref_arg>
          <type>apci_bar_t</type>
          <name>q</name>
        </ref_arg>
      </body>
      <description>    function void add_rcrb_range(ref apci_bar_t q      );
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_dvsec_gpf_cxl_device</name>
    <description>class apci_cap_dvsec_gpf_cxl_device</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_dvsec_gpf_cxl_device",
            apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_get_partition_info</name>
    <description>class acxl_cmd_get_partition_info</description>
    <struct>
      <name>out</name>
      <arv>
        <name>next_persistent_capacity</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>next_volatile_capacity</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>active_persistent_capacity</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>active_volatile_capacity</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_get_partition_info); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_type0</name>
    <description>class apci_cap_type0</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>post_randomize</name>
      </body>
      <description>    function void post_randomize();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_type0",
	         apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>collect_bar_ranges</name>
        <ref_arg>
          <type>apci_bar_t</type>
          <name>ranges</name>
        </ref_arg>
        <input_arg>
          <type>bit</type>
          <name>expansion_rom</name>
        </input_arg>
        <input_arg>
          <type>input</type>
          <name>vga_sup</name>
        </input_arg>
      </body>
      <description>    function void collect_bar_ranges(ref apci_bar_t ranges      , input bit expansion_rom = 1, input vga_sup = 0);
    </description>
    </function>
  </class>
  <class>
    <name>acxl_doe_cdat</name>
    <description>class acxl_doe_cdat</description>
    <member>
      <name>bytes</name>
      <type>bit</type>
    </member>
    <member>
      <name>dwords</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_read</name>
        </input_arg>
        <input_arg>
          <type>acxl_cdat_struc_type_e</type>
          <name>rsp_kind</name>
        </input_arg>
      </body>
      <description>    function new (string name="", bit is_read = 0, acxl_cdat_struc_type_e rsp_kind = ACXL_CDAT_DSMAS);
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_cxl_link</name>
    <description>class apci_cap_cxl_link</description>
    <member>
      <name>log</name>
      <type>apci_log</type>
    </member>
    <member>
      <name>cxl_sup</name>
      <type>byte</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
        <input_arg>
          <type>byte</type>
          <name>cxl_sup</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_cxl_link", apci_log log = null, byte cxl_sup = 1);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>reset_cap</name>
        <input_arg>
          <type>apci_rst_e</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    virtual function void reset_cap(apci_rst_e kind);                                                                                                                    
    </description>
    </function>
  </class>
  <class>
    <name>apci_callbacks</name>
    <description>class apci_callbacks</description>
    <function>
      <body>
        <name>setup_cfg_space</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_cfg_space</type>
          <name>csp</name>
        </input_arg>
      </body>
      <description>    virtual function void setup_cfg_space(
	    input apci_device      bfm,
	    input apci_cfg_space   csp
	);	return;
    </description>
    </function>
    <function>
      <body>
        <name>setup_mmio_reg</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_mmio_reg</type>
          <name>mmreg</name>
        </input_arg>
      </body>
      <description>    virtual function void setup_mmio_reg(
	    input apci_device      bfm,
	    input apci_mmio_reg    mmreg 
	);	return;
    </description>
    </function>
    <task>
      <body>
        <name>pre_enum_wait_user</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
      </body>
      <description>    virtual task pre_enum_wait_user(input apci_device bfm);
    </description>
    </task>
    <function>
      <body>
        <name>pre_enum_phase0</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>bus</name>
        </input_arg>
        <inout_arg>
          <type>bit</type>
          <name>skip_enum</name>
        </inout_arg>
      </body>
      <description>    virtual function void pre_enum_phase0(
	    input apci_device  bfm,
	    input bit           bus,
	    inout bit          skip_enum   	);	return;
    </description>
    </function>
    <function>
      <body>
        <name>pre_enum_phase1</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_device_mgr</type>
          <name>dmgr</name>
        </input_arg>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <inout_arg>
          <type>bit</type>
          <name>skip_enum</name>
        </inout_arg>
      </body>
      <description>    virtual function void pre_enum_phase1(
	    apci_device     bfm,
	    apci_device_mgr dmgr,
	    apci_bdf_t      bdf,
	    inout bit       skip_enum
	);	return;
    </description>
    </function>
    <function>
      <body>
        <name>enum_done</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_device_mgr</type>
          <name>mgr</name>
        </input_arg>
      </body>
      <description>    virtual function void enum_done(
	    input apci_device     bfm,
	    input apci_device_mgr mgr
	);	return;
    </description>
    </function>
    <task>
      <body>
        <name>enum_done_wait_user</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_device_mgr</type>
          <name>mgrs</name>
        </input_arg>
      </body>
      <description>    virtual task enum_done_wait_user(
	    input apci_device     bfm,
	    input apci_device_mgr mgrs      
	);	return;
    </description>
    </task>
    <function>
      <body>
        <name>read_mem_cb</name>
        <input_arg>
          <type>bit</type>
          <name>is_host_mem</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>ndw</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>first_be</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>last_be</name>
        </input_arg>
        <ref_arg>
          <type>bit</type>
          <name>va</name>
        </ref_arg>
        <input_arg>
          <type>avery_data_base</type>
          <name>src</name>
        </input_arg>
      </body>
      <description>    virtual function void read_mem_cb(
	    input bit             is_host_mem,
	    input bit             addr    ,
	    input bit             ndw     ,
	    input bit              first_be,
	    input bit              last_be ,
	    ref   bit             va      ,
	    input avery_data_base src
	);	
    </description>
    </function>
    <function>
      <body>
        <name>write_mem_cb</name>
        <input_arg>
          <type>bit</type>
          <name>is_host_mem</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>first_be</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>last_be</name>
        </input_arg>
        <ref_arg>
          <type>bit</type>
          <name>va</name>
        </ref_arg>
        <input_arg>
          <type>avery_data_base</type>
          <name>src</name>
        </input_arg>
      </body>
      <description>    virtual function void write_mem_cb(
            input bit             is_host_mem,
            input bit             addr       ,
            input bit              first_be   ,
            input bit              last_be    ,
	    ref   bit             va             ,
	    input avery_data_base src         
	);	
    </description>
    </function>
    <function>
      <body>
        <name>rx_interrupt</name>
        <input_arg>
          <type>apci_device</type>
          <name>rc</name>
        </input_arg>
        <ref_arg>
          <type>apci_irq_t</type>
          <name>irq</name>
        </ref_arg>
      </body>
      <description>    virtual function void rx_interrupt(
	        apci_device  rc,
	    ref apci_irq_t   irq
	);	return;
    </description>
    </function>
    <function>
      <body>
        <name>tx_transaction_done</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_transaction</type>
          <name>tr</name>
        </input_arg>
      </body>
      <description>    virtual function void tx_transaction_done(
	    apci_device      bfm,
	    apci_transaction tr
	);	return;
    </description>
    </function>
    <function>
      <body>
        <name>tx_create_cpl</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_tlp</type>
          <name>req</name>
        </input_arg>
        <input_arg>
          <type>apci_tlp</type>
          <name>cpl</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>ith_split</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>mps_dw</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>rcb_dw</name>
        </input_arg>
        <inout_arg>
          <type>int</type>
          <name>delay_ns</name>
        </inout_arg>
      </body>
      <description>    virtual function void tx_create_cpl(
	    input apci_device bfm      ,
	    input apci_tlp    req      ,
	    input apci_tlp    cpl      ,
	    input int         ith_split,
	    input int         mps_dw   ,
	    input int         rcb_dw   ,
	    inout int         delay_ns  
	);	return;
    </description>
    </function>
    <function>
      <body>
        <name>tx_pkt_exit_tl</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_tlp</type>
          <name>tlp</name>
        </input_arg>
      </body>
      <description>    virtual function void tx_pkt_exit_tl(
	    apci_device   bfm,
	    apci_tlp      tlp
	);	return;
    </description>
    </function>
    <function>
      <body>
        <name>tx_pkt_exit_dll</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_packet</type>
          <name>pkt</name>
        </input_arg>
      </body>
      <description>    virtual function void tx_pkt_exit_dll(
	    apci_device      bfm,
	    apci_packet      pkt
	);	return;
    </description>
    </function>
    <function>
      <body>
        <name>tx_pkt_exit_mac</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_packet</type>
          <name>pkt</name>
        </input_arg>
      </body>
      <description>    virtual function void tx_pkt_exit_mac(
	    apci_device      bfm,
	    apci_packet      pkt
	);	return;
    </description>
    </function>
    <function>
      <body>
        <name>tx_pkt_enter_lane</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <ref_arg>
          <type>apci_packet</type>
          <name>pkts</name>
        </ref_arg>
        <ref_arg>
          <type>apci_raw_sym_t</type>
          <name>syms</name>
        </ref_arg>
        <ref_arg>
          <type>apci_os</type>
          <name>os_after</name>
        </ref_arg>
        <input_arg>
          <type>int</type>
          <name>block128_index</name>
        </input_arg>
      </body>
      <description>    virtual function void tx_pkt_enter_lane(
	    input apci_device    bfm,
	    input int            port_id,
	    ref   apci_packet    pkts      ,
	    ref   apci_raw_sym_t syms      ,
	    ref   apci_os        os_after,       
	    input int            block128_index
	);	return;
    </description>
    </function>
    <function>
      <body>
        <name>tx_os_enter_lane</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <ref_arg>
          <type>apci_os</type>
          <name>active_oses</name>
        </ref_arg>
        <ref_arg>
          <type>apci_os</type>
          <name>inactive_oses</name>
        </ref_arg>
      </body>
      <description>    virtual function void tx_os_enter_lane(
	    input apci_device   bfm,
	    input int           port_id,
	    ref   apci_os       active_oses      ,
	    ref   apci_os       inactive_oses      
	);	return;
    </description>
    </function>
    <function>
      <body>
        <name>rx_os_enter_lane</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>logic_lane_num</name>
        </input_arg>
        <input_arg>
          <type>apci_os</type>
          <name>os</name>
        </input_arg>
      </body>
      <description>    virtual function void rx_os_enter_lane(
	    apci_device  bfm,
	    int          logic_lane_num,
	    apci_os      os
	);	return;
    </description>
    </function>
    <function>
      <body>
        <name>rx_pkt_enter_mac</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_packet</type>
          <name>pkt</name>
        </input_arg>
      </body>
      <description>    virtual function void rx_pkt_enter_mac(
	    apci_device  bfm,
	    apci_packet  pkt 
	);	return;
    </description>
    </function>
    <function>
      <body>
        <name>rx_pkt_enter_dll</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_packet</type>
          <name>pkt</name>
        </input_arg>
      </body>
      <description>    virtual function void rx_pkt_enter_dll(
	    apci_device  bfm,
	    apci_packet  pkt 
	);	return;
    </description>
    </function>
    <function>
      <body>
        <name>rx_pkt_enter_tl</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_tlp</type>
          <name>tlp</name>
        </input_arg>
      </body>
      <description>    virtual function void rx_pkt_enter_tl(
	    apci_device  bfm,
	    apci_tlp     tlp
	);	return;
    </description>
    </function>
    <function>
      <body>
        <name>commit_data</name>
        <input_arg>
          <type>apci_device</type>
          <name>host</name>
        </input_arg>
      </body>
      <description>    virtual function void commit_data(
	    apci_device   host
	);	return;
    </description>
    </function>
    <function>
      <body>
        <name>tx_sym_before_scramble</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>logic_lane_num</name>
        </input_arg>
        <inout_arg>
          <type>apci_raw_sym_t</type>
          <name>raw</name>
        </inout_arg>
      </body>
      <description>    virtual function void tx_sym_before_scramble(
            input apci_device    bfm           ,
            input int            port_id       ,
            input int            logic_lane_num,
            inout apci_raw_sym_t raw            );
    </description>
    </function>
    <function>
      <body>
        <name>tx_sym_after_scramble</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>logic_lane_num</name>
        </input_arg>
        <inout_arg>
          <type>apci_raw_sym_t</type>
          <name>raw</name>
        </inout_arg>
      </body>
      <description>    virtual function void tx_sym_after_scramble(
                  apci_device    bfm           ,
                  int            port_id       ,
                  int            logic_lane_num,
            inout apci_raw_sym_t raw            );
    </description>
    </function>
    <function>
      <body>
        <name>rx_sym_before_scramble</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>logic_lane_num</name>
        </input_arg>
        <inout_arg>
          <type>bit</type>
          <name>sym</name>
        </inout_arg>
        <input_arg>
          <type>apci_os_type</type>
          <name>os_type</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>os_index</name>
        </input_arg>
      </body>
      <description>    virtual function void rx_sym_before_scramble(
            input apci_device    bfm           ,
            input int            port_id       ,
            input int            logic_lane_num,
            inout bit             sym           ,
	    input apci_os_type   os_type       ,
	    input bit             os_index      
	);
    </description>
    </function>
    <function>
      <body>
        <name>rx_sym_after_scramble</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>logic_lane_num</name>
        </input_arg>
        <inout_arg>
          <type>bit</type>
          <name>sym</name>
        </inout_arg>
        <input_arg>
          <type>apci_os_type</type>
          <name>os_type</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>os_index</name>
        </input_arg>
      </body>
      <description>    virtual function void rx_sym_after_scramble(
            input apci_device    bfm           ,
            input int            port_id       ,
            input int            logic_lane_num,
            inout bit             sym           ,
	    input apci_os_type   os_type       ,
	    input bit             os_index      
	);
    </description>
    </function>
    <function>
      <body>
        <name>start_acknak_latency_timer</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>latency_limit</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>speed</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>mps</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>linkwidth</name>
        </input_arg>
        <inout_arg>
          <type>int</type>
          <name>latency</name>
        </inout_arg>
      </body>
      <description>    virtual function void start_acknak_latency_timer(
                  apci_device bfm    ,
                  int   latency_limit,
                  int   speed        ,
                  int   mps          ,
                  int   linkwidth    ,
            inout int   latency        
       	);
    </description>
    </function>
    <function>
      <body>
        <name>ltssm_transition</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>apci_ltssm_state_e</type>
          <name>from</name>
        </input_arg>
        <input_arg>
          <type>apci_ltssm_state_e</type>
          <name>to</name>
        </input_arg>
      </body>
      <description>    virtual function void ltssm_transition (
                  apci_device        bfm    , 
                  int                port_id, 
                  apci_ltssm_state_e from   , 
                  apci_ltssm_state_e to
       	);
    </description>
    </function>
    <function>
      <body>
        <name>equalization_check_coef</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>logic_lane_num</name>
        </input_arg>
        <input_arg>
          <type>byte</type>
          <name>fs</name>
        </input_arg>
        <input_arg>
          <type>byte</type>
          <name>lf</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>use_preset</name>
        </input_arg>
        <inout_arg>
          <type>byte</type>
          <name>preset</name>
        </inout_arg>
        <inout_arg>
          <type>bit</type>
          <name>postcc</name>
        </inout_arg>
        <inout_arg>
          <type>bit</type>
          <name>cc</name>
        </inout_arg>
        <inout_arg>
          <type>bit</type>
          <name>precc</name>
        </inout_arg>
        <inout_arg>
          <type>bit</type>
          <name>sec_precc</name>
        </inout_arg>
        <inout_arg>
          <type>bit</type>
          <name>reject</name>
        </inout_arg>
      </body>
      <description>    virtual function void equalization_check_coef (
	          apci_device bfm           ,
	          int         port_id       ,
	          int         logic_lane_num,
	          byte        fs            ,
	          byte        lf            ,
	          bit         use_preset    ,
	    inout byte        preset        ,
	    inout bit          postcc        ,
	    inout bit          cc            ,
	    inout bit          precc         ,
	    inout bit          sec_precc     ,
	    inout bit         reject
	);
    </description>
    </function>
    <function>
      <body>
        <name>equalization_request_coef</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>logic_lane_num</name>
        </input_arg>
        <input_arg>
          <type>byte</type>
          <name>fs</name>
        </input_arg>
        <input_arg>
          <type>byte</type>
          <name>lf</name>
        </input_arg>
        <inout_arg>
          <type>bit</type>
          <name>use_preset</name>
        </inout_arg>
        <inout_arg>
          <type>byte</type>
          <name>preset</name>
        </inout_arg>
        <inout_arg>
          <type>bit</type>
          <name>postcc</name>
        </inout_arg>
        <inout_arg>
          <type>bit</type>
          <name>cc</name>
        </inout_arg>
        <inout_arg>
          <type>bit</type>
          <name>precc</name>
        </inout_arg>
        <inout_arg>
          <type>bit</type>
          <name>sec_precc</name>
        </inout_arg>
      </body>
      <description>    virtual function void equalization_request_coef (
	          apci_device bfm           ,
	          int         port_id       ,
	          int         logic_lane_num,
	          byte        fs            ,
	          byte        lf            ,
	    inout bit         use_preset    ,
	    inout byte        preset        ,
	    inout bit          postcc        ,
	    inout bit          cc            ,
	    inout bit          precc         ,
	    inout bit          sec_precc
	);
    </description>
    </function>
    <function>
      <body>
        <name>rx_margin_cmd_before_update</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>logic_lane_num</name>
        </input_arg>
        <input_arg>
          <type>apci_margin_cmd</type>
          <name>cmd</name>
        </input_arg>
      </body>
      <description>    virtual function void rx_margin_cmd_before_update(
            apci_device     bfm,
            int             logic_lane_num,
            apci_margin_cmd cmd
        );      return;
    </description>
    </function>
    <function>
      <body>
        <name>mon_tx_os_enter_lane</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>logic_lane_num</name>
        </input_arg>
        <input_arg>
          <type>apci_os</type>
          <name>os</name>
        </input_arg>
      </body>
      <description>    virtual function void mon_tx_os_enter_lane(
	    apci_device  bfm,
	    int          logic_lane_num,
	    apci_os      os
	);	return;
    </description>
    </function>
    <function>
      <body>
        <name>tx_pkt_after_encrypt</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_tlp</type>
          <name>tlp</name>
        </input_arg>
      </body>
      <description>    virtual function void tx_pkt_after_encrypt(
            apci_device  bfm,
            apci_tlp     tlp
        );      return;
    </description>
    </function>
    <function>
      <body>
        <name>tx_flit_exit_dll</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_flit</type>
          <name>flit</name>
        </input_arg>
      </body>
      <description>    virtual function void tx_flit_exit_dll(
	    apci_device   bfm,
	    apci_flit     flit 
	);  return;
    </description>
    </function>
    <function>
      <body>
        <name>tx_flit_exit_mac</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_flit</type>
          <name>flit</name>
        </input_arg>
      </body>
      <description>    virtual function void tx_flit_exit_mac(
	    apci_device   bfm,
	    apci_flit     flit 
	);  return;
    </description>
    </function>
    <function>
      <body>
        <name>rx_flit_enter_mac</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_flit</type>
          <name>flit</name>
        </input_arg>
      </body>
      <description>    virtual function void rx_flit_enter_mac(
	    apci_device   bfm,
	    apci_flit     flit 
	);  return;
    </description>
    </function>
    <function>
      <body>
        <name>rx_doe_data</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <ref_arg>
          <type>bit</type>
          <name>rx_dwords</name>
        </ref_arg>
        <ref_arg>
          <type>bit</type>
          <name>user_tx_dwords</name>
        </ref_arg>
      </body>
      <description>    virtual function void rx_doe_data(
            input apci_device bfm,
	    input apci_bdf_t  bdf,
            ref   bit         rx_dwords      ,
            ref   bit         user_tx_dwords      
        );      return;
    </description>
    </function>
    <task>
      <body>
        <name>rx_device_cmd</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>acxl_device_cmd</type>
          <name>cmd</name>
        </input_arg>
      </body>
      <description>    virtual task rx_device_cmd (
            input apci_device     bfm,
	    input acxl_device_cmd cmd
        );      return;
    </description>
    </task>
  </class>
  <class>
    <name>acxl_dut_seq_avery</name>
    <description>class acxl_dut_seq_avery</description>
    <member>
      <name>avery_bfm</name>
      <type>apci_device</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_device</type>
          <name>avery_bfm</name>
        </input_arg>
      </body>
      <description>    function new(string name = "acxl_dut_seq_avery", apci_device avery_bfm);
    </description>
    </function>
    <task>
      <body>
        <name>get_cacheline</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
        <output_arg>
          <type>acxl_cacheline</type>
          <name>cline</name>
        </output_arg>
      </body>
      <description>    virtual task get_cacheline (bit       addr, output acxl_cacheline cline);
    </description>
    </task>
    <task>
      <body>
        <name>cline_to_invalid</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task cline_to_invalid(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>cline_to_exclusive_clean</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task cline_to_exclusive_clean(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>cline_to_modified</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task cline_to_modified(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_CleanEvict</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_CleanEvict(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_DirtyEvict</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_DirtyEvict(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_RdOwn</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_RdOwn(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_RdOwnNoData</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_RdOwnNoData(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_RdShared</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_RdShared(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_RdAny</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_RdAny(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_CLFlush</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_CLFlush(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_ItoMWr</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_ItoMWr(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_MemWr</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_MemWr(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_WOWrInv</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_WOWrInv(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_WOWrInvF</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_WOWrInvF(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_WrInv</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_WrInv(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>enter_pkgc_l1</name>
      </body>
      <description>    virtual task enter_pkgc_l1();
    </description>
    </task>
    <task>
      <body>
        <name>add_ide_key</name>
        <input_arg>
          <type>bit</type>
          <name>key</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>iv</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_tx</name>
        </input_arg>
      </body>
      <description>    virtual task add_ide_key(bit       key, bit       iv, bit is_tx);
    </description>
    </task>
    <task>
      <body>
        <name>start_ide_sequence</name>
      </body>
      <description>    virtual task start_ide_sequence();
    </description>
    </task>
  </class>
  <class>
    <name>apci_cap_ats</name>
    <description>class apci_cap_ats</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_ats",
	         apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_stu</name>
      </body>
      <description>    function avery_u64 get_stu();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_doe</name>
    <description>class apci_cap_doe</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_doe",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
    <function>
      <body>
        <name>fwrite_cb</name>
        <input_arg>
          <type>avery_reg_field</type>
          <name>f</name>
        </input_arg>
        <input_arg>
          <type>avery_reg_val_t</type>
          <name>old_v</name>
        </input_arg>
      </body>
      <description>    virtual function void fwrite_cb(avery_reg_field f, avery_reg_val_t old_v);
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_unlock</name>
    <description>class acxl_cmd_unlock</description>
    <struct>
      <name>in</name>
      <arv>
        <name>cur_passphrase</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_unlock); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_rcrb</name>
    <description>class apci_cap_rcrb</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_rcrb",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_cxl_security</name>
    <description>class apci_cap_cxl_security</description>
    <member>
      <name>log</name>
      <type>apci_log</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_cxl_security", apci_log log = null);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>reset_cap</name>
        <input_arg>
          <type>apci_rst_e</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    virtual function void reset_cap(apci_rst_e kind);                                                                                                                    
    </description>
    </function>
  </class>
  <class>
    <name>apci_coverage_sampler</name>
    <description>class apci_coverage_sampler</description>
    <member>
      <name>tlp</name>
      <type>apci_tlp</type>
    </member>
    <member>
      <name>dllp</name>
      <type>apci_dllp</type>
    </member>
    <member>
      <name>os</name>
      <type>apci_os</type>
    </member>
    <member>
      <name>mem_address</name>
      <type>bit</type>
    </member>
    <member>
      <name>mem_proc_hint</name>
      <type>bit</type>
    </member>
    <member>
      <name>mem_ido</name>
      <type>bit</type>
    </member>
    <member>
      <name>mem_no_snoop</name>
      <type>bit</type>
    </member>
    <member>
      <name>mem_relaxed_order</name>
      <type>bit</type>
    </member>
    <member>
      <name>ts1_tx_mod_com_loopbk</name>
      <type>bit</type>
    </member>
    <member>
      <name>ts2_retimers_present_bit</name>
      <type>bit</type>
    </member>
    <struct>
      <name>phy</name>
      <arv>
        <name>link_width</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>link_speed</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>lane_reversal</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rx_polarity</name>
        <type>bit</type>
      </arv>
    </struct>
    <member>
      <name>link_speed</name>
      <type>bit</type>
    </member>
    <member>
      <name>cross_weight</name>
      <type>int</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_coverage_sampler");
    </description>
    </function>
    <function>
      <body>
        <name>sample_tlp_at_dll</name>
        <input_arg>
          <type>apci_packet</type>
          <name>p</name>
        </input_arg>
      </body>
      <description>    virtual function void sample_tlp_at_dll(apci_packet p);
    </description>
    </function>
    <function>
      <body>
        <name>sample_tlp_dllp</name>
        <input_arg>
          <type>apci_packet</type>
          <name>p</name>
        </input_arg>
      </body>
      <description>    virtual function void sample_tlp_dllp(apci_packet p);
    </description>
    </function>
    <function>
      <body>
        <name>sample_os</name>
        <input_arg>
          <type>apci_os</type>
          <name>os</name>
        </input_arg>
        <input_arg>
          <type>apci_ltssm_state_e</type>
          <name>ltssm_state</name>
        </input_arg>
        <input_arg>
          <type>byte</type>
          <name>link_speed</name>
        </input_arg>
      </body>
      <description>    virtual function void sample_os(
            apci_os            os         ,
            apci_ltssm_state_e ltssm_state,
            byte               link_speed);
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_shadow_func</name>
    <description>class apci_cap_shadow_func</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_shadow_func",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_set_alert_cfg</name>
    <description>class acxl_cmd_set_alert_cfg</description>
    <struct>
      <name>in</name>
      <arv>
        <name>corrected_persistent_mem_err_warning_threshold</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>corrected_volatile_mem_err_warning_threshold</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>under_temp_warning_threshold</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>over_temp_warning_threshold</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rsvd3</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>life_used_warning_threshold</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>enable_alert_actions</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>valid_alert_actions</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_set_alert_cfg); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_native_pcie</name>
    <description>class apci_cap_native_pcie</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>     virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>     virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>     virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_native_pcie",
	         apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_dvsec_ccix_tp</name>
    <description>class apci_cap_dvsec_ccix_tp</description>
    <member>
      <name>esm_quicksim_scale</name>
      <type>int</type>
    </member>
    <member>
      <name>dsport_tx_preset_20</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>usport_tx_preset_20</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>dsport_tx_preset_25</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>usport_tx_preset_25</name>
      <type>avery_reg_field</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_dvsec_ccix_tp",
            apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
    <function>
      <body>
        <name>get_eq_p2_timeout</name>
      </body>
      <description>    function avery_u64 get_eq_p2_timeout();
    </description>
    </function>
    <function>
      <body>
        <name>get_eq_p3_timeout</name>
      </body>
      <description>    function avery_u64 get_eq_p3_timeout();
    </description>
    </function>
    <function>
      <body>
        <name>get_quick_eq_timeout</name>
        <input_arg>
          <type>bit</type>
          <name>is_p2</name>
        </input_arg>
      </body>
      <description>    function avery_u64 get_quick_eq_timeout(input bit is_p2);
    </description>
    </function>
    <function>
      <body>
        <name>get_calib_time</name>
      </body>
      <description>    function avery_u64 get_calib_time();
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_cxl_mem_dev</name>
    <description>class apci_cap_cxl_mem_dev</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_cxl_mem_dev", apci_log log = null);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>get_avery_cap_id</name>
      </body>
      <description>    virtual function int get_avery_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>reset_cap</name>
        <input_arg>
          <type>apci_rst_e</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    virtual function void reset_cap(apci_rst_e kind);                                                                                                                    
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_flit_err_inject</name>
    <description>class apci_cap_flit_err_inject</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_flit_err_inject",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>apci_transaction</name>
    <description>class apci_transaction</description>
    <member>
      <name>port_id</name>
      <type>int</type>
    </member>
    <member>
      <name>func_id</name>
      <type>int</type>
    </member>
    <member>
      <name>is_write</name>
      <type>bit</type>
    </member>
    <member>
      <name>addr</name>
      <type>bit</type>
    </member>
    <member>
      <name>length</name>
      <type>bit</type>
    </member>
    <member>
      <name>first_be</name>
      <type>bit</type>
    </member>
    <member>
      <name>last_be</name>
      <type>bit</type>
    </member>
    <member>
      <name>tc</name>
      <type>bit</type>
    </member>
    <member>
      <name>msg_header2</name>
      <type>bit</type>
    </member>
    <member>
      <name>msg_header3</name>
      <type>bit</type>
    </member>
    <member>
      <name>proc_hint</name>
      <type>bit</type>
    </member>
    <member>
      <name>steering_tag</name>
      <type>bit</type>
    </member>
    <member>
      <name>relaxed_order</name>
      <type>bit</type>
    </member>
    <member>
      <name>no_snoop</name>
      <type>bit</type>
    </member>
    <member>
      <name>payload</name>
      <type>bit</type>
    </member>
    <member>
      <name>atomic_op1</name>
      <type>bit</type>
    </member>
    <member>
      <name>atomic_op2</name>
      <type>bit</type>
    </member>
    <member>
      <name>tlp_prefixes</name>
      <type>bit</type>
    </member>
    <struct>
      <name>user_ctrl</name>
      <arv>
        <name>is_ei</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>cfg_type</name>
        <type>byte</type>
      </arv>
      <arv>
        <name>user_qid</name>
        <type>byte</type>
      </arv>
      <arv>
        <name>locked</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>deferrable</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>use_ido</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>req_id</name>
        <type>int</type>
      </arv>
      <arv>
        <name>alignment</name>
        <type>int</type>
      </arv>
      <arv>
        <name>retry_tlp</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>at</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>th</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>ep</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>ats_nw</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>route</name>
        <type>byte</type>
      </arv>
      <arv>
        <name>use_5bit_8bit_tag</name>
        <type>byte</type>
      </arv>
      <arv>
        <name>allocate_if_cache_miss</name>
        <type>byte</type>
      </arv>
      <arv>
        <name>ide_stream_id</name>
        <type>int</type>
      </arv>
    </struct>
    <member>
      <name>is_enter_vc</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_issued</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_done</name>
      <type>bit</type>
    </member>
    <member>
      <name>act_length</name>
      <type>int</type>
    </member>
    <member>
      <name>last_rx_cpl</name>
      <type>apci_tlp</type>
    </member>
    <member>
      <name>tlps</name>
      <type>apci_tlp</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <parameter>
          <type>apci_trans_type</type>
          <name>kind</name>
        </parameter>
        <input_arg>
          <type>bit</type>
          <name>is_write</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>length</name>
        </input_arg>
      </body>
      <description>    function new( `avery_strname  
		  apci_trans_type kind     = APCI_TRANS_mem,
                  bit             is_write = 0,
                  bit             addr     = 0,
                  bit             length   = 0 );
    </description>
    </function>
    <function>
      <body>
        <name>get_be</name>
        <input_arg>
          <type>int</type>
          <name>dw_index</name>
        </input_arg>
      </body>
      <description>    function bit       get_be(int dw_index);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern virtual function string sprint (int verbosity = 0, string prefix="");
    </description>
    </function>
    <function>
      <body>
        <name>copy</name>
        <input_arg>
          <type>apci_transaction</type>
          <name>to</name>
        </input_arg>
      </body>
      <description>    extern function      apci_transaction copy(apci_transaction to = null);
    </description>
    </function>
    <task>
      <body>
        <name>wait_done</name>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    extern task          wait_done(time timer = 0, string msg = "");
    </description>
    </task>
    <task>
      <body>
        <name>wait_issued</name>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    extern task          wait_issued(time timer = 0, string msg = "");
    </description>
    </task>
    <task>
      <body>
        <name>wait_enter_vc</name>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    extern task          wait_enter_vc(time timer = 0, string msg = "");
    </description>
    </task>
    <function>
      <body>
        <name>get_byte_addr</name>
      </body>
      <description>    extern function bit       get_byte_addr();
    </description>
    </function>
    <function>
      <body>
        <name>get_func_num</name>
        <input_arg>
          <type>bit</type>
          <name>is_ari</name>
        </input_arg>
      </body>
      <description>    function bit       get_func_num(bit is_ari);
    </description>
    </function>
    <function>
      <body>
        <name>get_dev_func_num</name>
      </body>
      <description>    function bit       get_dev_func_num();
    </description>
    </function>
    <function>
      <body>
        <name>annotate</name>
        <input_arg>
          <type>string</type>
          <name>s</name>
        </input_arg>
      </body>
      <description>    extern virtual function void annotate(string s);
    </description>
    </function>
    <function>
      <body>
        <name>get_addr</name>
      </body>
      <description>    virtual function bit       get_addr();
    </description>
    </function>
    <function>
      <body>
        <name>get_payload_dw</name>
        <input_arg>
          <type>int</type>
          <name>dw_index</name>
        </input_arg>
      </body>
      <description>    function bit       get_payload_dw(int dw_index);
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_cxl_sec_mailbox</name>
    <description>class apci_cap_cxl_sec_mailbox</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_cxl_sec_mailbox", apci_log log = null);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>get_avery_cap_id</name>
      </body>
      <description>    virtual function int get_avery_cap_id();
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_ide</name>
    <description>class apci_cap_ide</description>
    <member>
      <name>user_addr_blok_size</name>
      <type>int</type>
    </member>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();                                                                                                                                
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_ide",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
    <function>
      <body>
        <name>create_sec_dynamic_fields</name>
      </body>
      <description>    function void create_sec_dynamic_fields();
    </description>
    </function>
    <function>
      <body>
        <name>is_id_exist</name>
        <input_arg>
          <type>bit</type>
          <name>id</name>
        </input_arg>
      </body>
      <description>    virtual function int is_id_exist(bit       id);
    </description>
    </function>
    <function>
      <body>
        <name>is_stream_enable</name>
        <input_arg>
          <type>bit</type>
          <name>id</name>
        </input_arg>
      </body>
      <description>    virtual function int is_stream_enable(bit       id);
    </description>
    </function>
    <function>
      <body>
        <name>is_link_stream</name>
        <input_arg>
          <type>bit</type>
          <name>id</name>
        </input_arg>
      </body>
      <description>    virtual function int is_link_stream(bit       id);
    </description>
    </function>
    <function>
      <body>
        <name>get_stream_tc</name>
        <input_arg>
          <type>bit</type>
          <name>id</name>
        </input_arg>
      </body>
      <description>    virtual function int get_stream_tc(bit       id);
    </description>
    </function>
    <function>
      <body>
        <name>get_rid_base</name>
        <input_arg>
          <type>bit</type>
          <name>id</name>
        </input_arg>
      </body>
      <description>    virtual function bit       get_rid_base(bit       id);
    </description>
    </function>
    <function>
      <body>
        <name>get_aggregate_size</name>
        <input_arg>
          <type>bit</type>
          <name>id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>mode</name>
        </input_arg>
      </body>
      <description>    function int get_aggregate_size(bit       id, int mode);
    </description>
    </function>
    <function>
      <body>
        <name>is_pcrc_enable</name>
        <input_arg>
          <type>bit</type>
          <name>id</name>
        </input_arg>
      </body>
      <description>    function int is_pcrc_enable(bit       id);
    </description>
    </function>
    <function>
      <body>
        <name>get_stream_id_from_tc</name>
        <input_arg>
          <type>bit</type>
          <name>tc</name>
        </input_arg>
      </body>
      <description>    function int get_stream_id_from_tc (bit       tc);
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_cxl_arb_mux</name>
    <description>class apci_cap_cxl_arb_mux</description>
    <member>
      <name>log</name>
      <type>apci_log</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_cxl_arb_mux", apci_log log = null);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>reset_cap</name>
        <input_arg>
          <type>apci_rst_e</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    virtual function void reset_cap(apci_rst_e kind);                                                                                                                    
    </description>
    </function>
  </class>
  <class>
    <name>avery_reg</name>
    <description>class avery_reg</description>
    <member>
      <name>fields</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>fields</name>
      <type>avery_reg_field</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    function new(string name = "avery_reg");
    </description>
    </function>
    <function>
      <body>
        <name>get_size_dw</name>
      </body>
      <description>    extern virtual function int get_size_dw();
    </description>
    </function>
    <function>
      <body>
        <name>get_size</name>
      </body>
      <description>    extern virtual function int get_size();
    </description>
    </function>
    <function>
      <body>
        <name>fread_dw</name>
        <input_arg>
          <type>int</type>
          <name>dw_offset</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>byte_enable</name>
        </input_arg>
      </body>
      <description>    extern virtual function avery_reg_val_t fread_dw( int      dw_offset  ,
                                                      bit       byte_enable = 4'b1111 );
    </description>
    </function>
    <function>
      <body>
        <name>fwrite_dw</name>
        <input_arg>
          <type>int</type>
          <name>dw_offset</name>
        </input_arg>
        <input_arg>
          <type>avery_u32</type>
          <name>value</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>byte_enable</name>
        </input_arg>
        <input_arg>
          <type>avery_data_base</type>
          <name>modifier</name>
        </input_arg>
      </body>
      <description>    extern virtual function void fwrite_dw( int             dw_offset  ,
                                            avery_u32       value      ,
                                            bit              byte_enable = 4'b1111,
                                            avery_data_base modifier    = null );
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern virtual function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <function>
      <body>
        <name>configure</name>
        <input_arg>
          <type>int</type>
          <name>n_dwords</name>
        </input_arg>
      </body>
      <description>    extern function void configure(int n_dwords = 0);
    </description>
    </function>
    <function>
      <body>
        <name>get_dword</name>
        <input_arg>
          <type>int</type>
          <name>dw_offset</name>
        </input_arg>
      </body>
      <description>    extern function avery_reg_val_t get_dword(int dw_offset);
    </description>
    </function>
    <function>
      <body>
        <name>sprint_dword</name>
        <input_arg>
          <type>int</type>
          <name>dw_offset</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
      </body>
      <description>    extern function string sprint_dword(int dw_offset, int verbosity= 0);
    </description>
    </function>
    <function>
      <body>
        <name>set_dword</name>
        <input_arg>
          <type>int</type>
          <name>dw_offset</name>
        </input_arg>
        <input_arg>
          <type>avery_u32</type>
          <name>value</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>byte_enable</name>
        </input_arg>
        <input_arg>
          <type>avery_data_base</type>
          <name>modifier</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_dword(
            int             dw_offset  ,
            avery_u32       value      ,
            bit              byte_enable = 4'b1111,
            avery_data_base modifier    = null );
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
    <function>
      <body>
        <name>create_sec_dynamic_fields</name>
      </body>
      <description>    virtual function void create_sec_dynamic_fields();                                                                                                                      
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    function new(string name = "avery_reg");
    </description>
    </function>
    <function>
      <body>
        <name>get_size_dw</name>
      </body>
      <description>    extern virtual function int get_size_dw();
    </description>
    </function>
    <function>
      <body>
        <name>get_size</name>
      </body>
      <description>    extern virtual function int get_size();
    </description>
    </function>
    <function>
      <body>
        <name>fread_dw</name>
        <input_arg>
          <type>int</type>
          <name>dw_offset</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>byte_enable</name>
        </input_arg>
      </body>
      <description>    extern virtual function avery_reg_val_t fread_dw( int      dw_offset  ,
                                                      bit       byte_enable = 4'b1111 );
    </description>
    </function>
    <function>
      <body>
        <name>fwrite_dw</name>
        <input_arg>
          <type>int</type>
          <name>dw_offset</name>
        </input_arg>
        <input_arg>
          <type>avery_u32</type>
          <name>value</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>byte_enable</name>
        </input_arg>
        <input_arg>
          <type>avery_data_base</type>
          <name>modifier</name>
        </input_arg>
      </body>
      <description>    extern virtual function void fwrite_dw( int             dw_offset  ,
                                            avery_u32       value      ,
                                            bit              byte_enable = 4'b1111,
                                            avery_data_base modifier    = null );
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern virtual function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <function>
      <body>
        <name>configure</name>
        <input_arg>
          <type>int</type>
          <name>n_dwords</name>
        </input_arg>
      </body>
      <description>    extern function void configure(int n_dwords = 0);
    </description>
    </function>
    <function>
      <body>
        <name>get_dword</name>
        <input_arg>
          <type>int</type>
          <name>dw_offset</name>
        </input_arg>
      </body>
      <description>    extern function avery_reg_val_t get_dword(int dw_offset);
    </description>
    </function>
    <function>
      <body>
        <name>sprint_dword</name>
        <input_arg>
          <type>int</type>
          <name>dw_offset</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
      </body>
      <description>    extern function string sprint_dword(int dw_offset, int verbosity= 0);
    </description>
    </function>
    <function>
      <body>
        <name>set_dword</name>
        <input_arg>
          <type>int</type>
          <name>dw_offset</name>
        </input_arg>
        <input_arg>
          <type>avery_u32</type>
          <name>value</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>byte_enable</name>
        </input_arg>
        <input_arg>
          <type>avery_data_base</type>
          <name>modifier</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_dword(
            int             dw_offset  ,
            avery_u32       value      ,
            bit              byte_enable = 4'b1111,
            avery_data_base modifier    = null );
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
  </class>
  <class>
    <name>avery_log_callbacks</name>
    <description>class avery_log_callbacks</description>
    <function>
      <body>
        <name>assertion_msg_cb</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <inout_arg>
          <type>bit</type>
          <name>is_disable</name>
        </inout_arg>
        <ref_arg>
          <type>avery_assertion_item</type>
          <name>item</name>
        </ref_arg>
      </body>
      <description>    virtual function void assertion_msg_cb(
                        input string msg,
                        inout bit is_disable,
                        ref avery_assertion_item item
                    );
    </description>
    </function>
    <function>
      <body>
        <name>error_msg_cb</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <inout_arg>
          <type>bit</type>
          <name>is_disable</name>
        </inout_arg>
      </body>
      <description>    virtual function void error_msg_cb(
                        input string msg,
                        inout bit is_disable 
                    );
    </description>
    </function>
    <function>
      <body>
        <name>fatal_msg_cb</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <inout_arg>
          <type>bit</type>
          <name>is_disable</name>
        </inout_arg>
      </body>
      <description>    virtual function void fatal_msg_cb(
                        input string msg,
                        inout bit is_disable
                    );
    </description>
    </function>
  </class>
  <class>
    <name>apci_device</name>
    <description>class apci_device</description>
    <member>
      <name>enable_coverage</name>
      <type>bit</type>
    </member>
    <member>
      <name>logs</name>
      <type>apci_log</type>
    </member>
    <member>
      <name>txlogs</name>
      <type>apci_log</type>
    </member>
    <member>
      <name>rxlogs</name>
      <type>apci_log</type>
    </member>
    <member>
      <name>uvm_num_ports</name>
      <type>int</type>
    </member>
    <member>
      <name>is_active</name>
      <type>bit</type>
    </member>
    <member>
      <name>sequencer</name>
      <type>apci_uvm_seqr</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>`avery_xvm_parent</name>
        </input_arg>
        <input_arg>
          <type>apci_device_type</type>
          <name>dev_type</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>n_ports</name>
        </input_arg>
      </body>
      <description>extern function new(
       	string name,
       	`avery_xvm_parent,
	apci_device_type dev_type = APCI_DEVICE_unknown,
	int              n_ports  = 1);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>extern virtual function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <function>
      <body>
        <name>build_phase</name>
        <input_arg>
          <type>uvm_phase</type>
          <name>phase</name>
        </input_arg>
      </body>
      <description>extern virtual function void build_phase(uvm_phase phase);
    </description>
    </function>
    <function>
      <body>
        <name>connect_phase</name>
        <input_arg>
          <type>uvm_phase</type>
          <name>phase</name>
        </input_arg>
      </body>
      <description>extern virtual function void connect_phase(uvm_phase phase);
    </description>
    </function>
    <function>
      <body>
        <name>assign_vi</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <parameter>
          <type>apci_pipe_intf</type>
          <name>pipe_ifs</name>
        </parameter>
        <input_arg>
          <type>int</type>
          <name>pipe_ifs_start</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>pipe_ifs_end</name>
        </input_arg>
      </body>
      <description>extern virtual function void assign_vi (
        int     port_id       ,
        virtual apci_pipe_intf pipe_ifs      ,
        int     pipe_ifs_start = 0,
        int     pipe_ifs_end   = -1);
    </description>
    </function>
    <function>
      <body>
        <name>configure</name>
        <input_arg>
          <type>apci_device_type</type>
          <name>dev_type</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>n_ports</name>
        </input_arg>
      </body>
      <description>extern virtual function void configure(
	apci_device_type dev_type, 
	int n_ports = -1);
    </description>
    </function>
    <function>
      <body>
        <name>set</name>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>value</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>sub_entry</name>
        </input_arg>
      </body>
      <description>extern virtual function void set(
	input string    entry,
	input bit       value = 0,
	input string    sub_entry = "");
    </description>
    </function>
    <function>
      <body>
        <name>get</name>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>sub_entry</name>
        </input_arg>
      </body>
      <description>extern virtual function bit       get(
	input string entry,
	input string sub_entry = "");
    </description>
    </function>
    <function>
      <body>
        <name>get_func_info</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
      </body>
      <description>extern virtual function apci_func_info get_func_info(apci_bdf_t bdf);
    </description>
    </function>
    <task>
      <body>
        <name>bus_enum</name>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
      </body>
      <description>extern virtual task bus_enum(output bit err);
    </description>
    </task>
    <task>
      <body>
        <name>bus_enum_revive</name>
        <input_arg>
          <type>int</type>
          <name>bdf</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
      </body>
      <description>extern virtual task bus_enum_revive(int bdf, output bit err);
    </description>
    </task>
    <function>
      <body>
        <name>get_mem_ranges</name>
        <ref_arg>
          <type>apci_bar_t</type>
          <name>ranges</name>
        </ref_arg>
        <input_arg>
          <type>bit</type>
          <name>expansion_rom</name>
        </input_arg>
      </body>
      <description>extern virtual function void get_mem_ranges(ref  apci_bar_t ranges      , input bit expansion_rom = 1);
    </description>
    </function>
    <function>
      <body>
        <name>get_host_mem_ranges</name>
        <ref_arg>
          <type>apci_addr_range_t</type>
          <name>ranges</name>
        </ref_arg>
      </body>
      <description>extern virtual function void get_host_mem_ranges(ref  apci_addr_range_t ranges      );
    </description>
    </function>
    <function>
      <body>
        <name>get_cxl_hdm_ranges</name>
        <ref_arg>
          <type>apci_addr_range_t</type>
          <name>ranges</name>
        </ref_arg>
      </body>
      <description>extern virtual function void get_cxl_hdm_ranges(ref  apci_addr_range_t ranges      );
    </description>
    </function>
    <function>
      <body>
        <name>get_mem_model</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>n_dwords</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>io_space</name>
        </input_arg>
      </body>
      <description>extern virtual function apci_mem_model get_mem_model(bit       addr, bit       n_dwords, bit io_space = 0);
    </description>
    </function>
    <function>
      <body>
        <name>set_mem_dwords</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
        <ref_arg>
          <type>bit</type>
          <name>va</name>
        </ref_arg>
        <input_arg>
          <type>string</type>
          <name>dbg</name>
        </input_arg>
        <input_arg>
          <type>avery_data_base</type>
          <name>writer</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>first_be</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>last_be</name>
        </input_arg>
      </body>
      <description>extern virtual function void set_mem_dwords(
	input bit             addr,
	ref   bit             va      ,
	input string          dbg = "",
	input avery_data_base writer = null,
	input bit              first_be = 'hf, 
	input bit              last_be  = 'hf
    );
    </description>
    </function>
    <function>
      <body>
        <name>get_mem_dwords</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>num_dw</name>
        </input_arg>
        <ref_arg>
          <type>bit</type>
          <name>va</name>
        </ref_arg>
      </body>
      <description>extern virtual function void get_mem_dwords(
	input bit             addr,
	input bit             num_dw,
	ref   bit             va      );
    </description>
    </function>
    <function>
      <body>
        <name>set_io_dwords</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
        <ref_arg>
          <type>bit</type>
          <name>va</name>
        </ref_arg>
        <input_arg>
          <type>string</type>
          <name>dbg</name>
        </input_arg>
        <input_arg>
          <type>avery_data_base</type>
          <name>writer</name>
        </input_arg>
      </body>
      <description>extern virtual function void set_io_dwords(
	input bit             addr,
	ref   bit             va      ,
	input string          dbg = "",
	input avery_data_base writer = null
    );
    </description>
    </function>
    <function>
      <body>
        <name>get_io_dwords</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>num_dw</name>
        </input_arg>
        <ref_arg>
          <type>bit</type>
          <name>va</name>
        </ref_arg>
      </body>
      <description>extern virtual function void get_io_dwords(
	input bit             addr,
	input bit             num_dw,
	ref   bit             va      );
    </description>
    </function>
    <function>
      <body>
        <name>port_get_cfg_space</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <ref_arg>
          <type>apci_cfg_space</type>
          <name>csps</name>
        </ref_arg>
      </body>
      <description>extern virtual function void port_get_cfg_space(
	input int            port_id = -1,
       	ref   apci_cfg_space csps      );
    </description>
    </function>
    <function>
      <body>
        <name>alloc_vf_if_needed</name>
      </body>
      <description>extern virtual function void alloc_vf_if_needed();
    </description>
    </function>
    <function>
      <body>
        <name>post_m2p_cmd</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>lane_no</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>address</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>msg_data</name>
        </input_arg>
      </body>
      <description>extern virtual function void post_m2p_cmd(
	input int       port_id,
	input int 	lane_no,
	input string 	entry,
	input bit       address,
	input bit        msg_data);
    </description>
    </function>
    <function>
      <body>
        <name>port_set</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
        <input_arg>
          <type>longint</type>
          <name>value</name>
        </input_arg>
        <input_arg>
          <type>longint</type>
          <name>aux_value</name>
        </input_arg>
      </body>
      <description>extern virtual function void port_set(
	input int       port_id,
	input string    entry,
	input longint   value     = -1,
	input longint   aux_value = -1);
    </description>
    </function>
    <function>
      <body>
        <name>port_set_lane</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>lane_no</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
        <input_arg>
          <type>longint</type>
          <name>value</name>
        </input_arg>
      </body>
      <description>extern virtual function void port_set_lane(
	input int       port_id,
	input int       lane_no,
	input string    entry,
	input longint   value = -1);
    </description>
    </function>
    <function>
      <body>
        <name>port_set_tracker</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>enable</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>file_name</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>file_handle</name>
        </input_arg>
      </body>
      <description>extern function void port_set_tracker(
	input int     port_id,
	input string  entry,  
	input bit     enable,
	input string  file_name = "",
	input int     file_handle = 0);
    </description>
    </function>
    <function>
      <body>
        <name>port_set_obj</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
        <input_arg>
          <type>avery_data_base</type>
          <name>obj</name>
        </input_arg>
      </body>
      <description>extern virtual function void port_set_obj(
	input int       port_id,
	input string    entry,
	input avery_data_base obj);
    </description>
    </function>
    <function>
      <body>
        <name>port_set_mm_handler</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>func_id</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>bar_id</name>
        </input_arg>
        <input_arg>
          <type>apci_mm_handler</type>
          <name>mmh</name>
        </input_arg>
      </body>
      <description>extern function void port_set_mm_handler(
	input int             port_id,
	input bit             func_id,
	input bit             bar_id,
	input apci_mm_handler mmh);
    </description>
    </function>
    <function>
      <body>
        <name>port_set_ifc</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>byte</type>
          <name>vc_id</name>
        </input_arg>
        <input_arg>
          <type>apci_fc_type</type>
          <name>fc_type</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>value</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>scale_factor</name>
        </input_arg>
      </body>
      <description>extern virtual function void port_set_ifc(
	input int          port_id,
	input byte         vc_id,
	input apci_fc_type fc_type,
	input int          value,
	input int          scale_factor = -1
    );
    </description>
    </function>
    <function>
      <body>
        <name>port_set_ufc</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>byte</type>
          <name>vc_id</name>
        </input_arg>
        <input_arg>
          <type>apci_fc_type</type>
          <name>fc_type</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>enable</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>threshold</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>interval_in_ns</name>
        </input_arg>
      </body>
      <description>extern virtual function void port_set_ufc(
	input int          port_id,
	input byte         vc_id,
	input apci_fc_type fc_type,
	input bit          enable,   
	input int          threshold,
	input int          interval_in_ns);
    </description>
    </function>
    <function>
      <body>
        <name>port_get_fc</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>byte</type>
          <name>vc_id</name>
        </input_arg>
        <output_arg>
          <type>apci_flow_crd_t</type>
          <name>init_crd_limit</name>
        </output_arg>
        <output_arg>
          <type>apci_flow_crd_t</type>
          <name>crd_limit</name>
        </output_arg>
        <output_arg>
          <type>apci_flow_crd_t</type>
          <name>crd_consumed</name>
        </output_arg>
        <output_arg>
          <type>apci_flow_crd_t</type>
          <name>init_crd_alloc</name>
        </output_arg>
        <output_arg>
          <type>apci_flow_crd_t</type>
          <name>crd_alloc</name>
        </output_arg>
        <output_arg>
          <type>apci_flow_crd_t</type>
          <name>crd_received</name>
        </output_arg>
      </body>
      <description>extern virtual function void port_get_fc(
	input int              port_id,
	input byte             vc_id,
	output apci_flow_crd_t init_crd_limit, 
	output apci_flow_crd_t crd_limit     , 
	output apci_flow_crd_t crd_consumed  , 
	output apci_flow_crd_t init_crd_alloc, 
	output apci_flow_crd_t crd_alloc     , 
	output apci_flow_crd_t crd_received
    );
    </description>
    </function>
    <function>
      <body>
        <name>port_get_fc_scale_factor</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>byte</type>
          <name>vc_id</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>local_scale_factor</name>
        </output_arg>
        <output_arg>
          <type>bit</type>
          <name>peer_scale_factor</name>
        </output_arg>
      </body>
      <description>extern virtual function void port_get_fc_scale_factor(
	input  int	port_id, 
	input  byte	vc_id,   
	output bit       local_scale_factor      , 
	output bit       peer_scale_factor      
    );
    </description>
    </function>
    <function>
      <body>
        <name>port_get</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
      </body>
      <description>extern virtual function bit       port_get(
	input int     port_id,
	input string  entry);
    </description>
    </function>
    <function>
      <body>
        <name>port_get_lane</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>lane_no</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
      </body>
      <description>extern virtual function bit       port_get_lane(
	input int     port_id,
	input int     lane_no,
	input string  entry);
    </description>
    </function>
    <function>
      <body>
        <name>port_get_func_adaptor</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>func_id</name>
        </input_arg>
      </body>
      <description>extern virtual function apci_func_adaptor port_get_func_adaptor(
	input int     port_id,
	input int     func_id
    );
    </description>
    </function>
    <function>
      <body>
        <name>port_get_al_tl_if</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
      </body>
      <description>extern virtual function apci_al_tl_if port_get_al_tl_if(
	input int     port_id
    );
    </description>
    </function>
    <function>
      <body>
        <name>port_get_dll_mac_if</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
      </body>
      <description>extern virtual function apci_dll_mac_if port_get_dll_mac_if(
        input int     port_id
    );
    </description>
    </function>
    <function>
      <body>
        <name>phy_set</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>lane_no</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
        <input_arg>
          <type>longint</type>
          <name>value</name>
        </input_arg>
      </body>
      <description>extern function void phy_set(
	input int	port_id,
	input int	lane_no,
	input string	entry,
	input longint	value = -1);
    </description>
    </function>
    <function>
      <body>
        <name>phy_release</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
      </body>
      <description>extern function void phy_release(
	input int       port_id,
	input string    entry);
    </description>
    </function>
    <function>
      <body>
        <name>phy_get</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>lane_no</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
      </body>
      <description>extern virtual function bit       phy_get(
	input int	port_id,
	input int	lane_no,
	input string	entry);
    </description>
    </function>
    <task>
      <body>
        <name>phy_wait_event</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>lane_no</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>timeout_msg</name>
        </input_arg>
      </body>
      <description>extern virtual task phy_wait_event(
        int    port_id    ,
	int    lane_no	  ,
        string entry      ,
        time   timer       = 0,
        string timeout_msg = "" );
    </description>
    </task>
    <task>
      <body>
        <name>collect_devices</name>
        <input_arg>
          <type>int</type>
          <name>num</name>
        </input_arg>
        <output_arg>
          <type>apci_device_mgr</type>
          <name>mgrs</name>
        </output_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>timeout_msg</name>
        </input_arg>
      </body>
      <description>extern virtual task collect_devices(
	input  int             num,
	output apci_device_mgr mgrs      ,
	input  time            timer = 0,
	input  string          timeout_msg = "");
    </description>
    </task>
    <function>
      <body>
        <name>collect_local_bdfs</name>
        <output_arg>
          <type>apci_bdf_t</type>
          <name>bdfs</name>
        </output_arg>
      </body>
      <description>extern virtual function void collect_local_bdfs(output apci_bdf_t  bdfs      );
    </description>
    </function>
    <function>
      <body>
        <name>post_transaction</name>
        <input_arg>
          <type>apci_transaction</type>
          <name>tr</name>
        </input_arg>
      </body>
      <description>extern virtual function void post_transaction( apci_transaction  tr);
    </description>
    </function>
    <function>
      <body>
        <name>post_tlp</name>
        <input_arg>
          <type>apci_tlp</type>
          <name>p</name>
        </input_arg>
      </body>
      <description>extern virtual function void post_tlp( apci_tlp  p );
    </description>
    </function>
    <function>
      <body>
        <name>inject_pkt</name>
        <input_arg>
          <type>string</type>
          <name>where</name>
        </input_arg>
        <input_arg>
          <type>apci_packet</type>
          <name>pkt</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_front</name>
        </input_arg>
      </body>
      <description>extern virtual function void inject_pkt(
	string      where,
	apci_packet pkt,
	bit         is_front = 1
    );
    </description>
    </function>
    <function>
      <body>
        <name>inject_flit</name>
        <input_arg>
          <type>string</type>
          <name>where</name>
        </input_arg>
        <input_arg>
          <type>apci_flit</type>
          <name>flit</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_front</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>bypass_callback</name>
        </input_arg>
      </body>
      <description>extern virtual function void inject_flit(
	string      where,
	apci_flit   flit,
	bit         is_front = 1,
        bit         bypass_callback = 0
    );
    </description>
    </function>
    <task>
      <body>
        <name>read_capability</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>apci_capability</type>
          <name>cap</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>dword_offset</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
        <input_arg>
          <type>int</type>
          <name>num_dwords</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>first_be</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>err_severity</name>
        </input_arg>
      </body>
      <description>extern virtual task read_capability(
	apci_bdf_t       bdf,
	apci_capability  cap,
	bit              dword_offset,
	output  bit      err,
	input   int      num_dwords= 1,
        input   time     timer = 0,
	input   bit       first_be = 4'hf,
	input   int      err_severity = 0);
    </description>
    </task>
    <task>
      <body>
        <name>write_capability</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>apci_capability</type>
          <name>cap</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>dword_offset</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
        <input_arg>
          <type>int</type>
          <name>num_dwords</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>first_be</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>err_severity</name>
        </input_arg>
      </body>
      <description>extern virtual task write_capability(
	apci_bdf_t      bdf,
	apci_capability cap,
	bit             dword_offset,
	output  bit     err,
	input   int     num_dwords= 1,
	input   time    timer = 0,
        input   bit       first_be = 4'hf,
	input   int     err_severity = 0
    );
    </description>
    </task>
    <task>
      <body>
        <name>wait_irq</name>
        <output_arg>
          <type>apci_irq_t</type>
          <name>irq</name>
        </output_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>timeout_msg</name>
        </input_arg>
      </body>
      <description>extern virtual task wait_irq(
        output apci_irq_t irq        ,
        input  time       timer       = 0,
        input  string     timeout_msg = "" );
    </description>
    </task>
    <task>
      <body>
        <name>wait_event</name>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>timeout_msg</name>
        </input_arg>
      </body>
      <description>extern virtual task wait_event(
	string entry,
	time   timer = 0,
	string timeout_msg = "");
    </description>
    </task>
    <task>
      <body>
        <name>port_wait_event</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>timeout_msg</name>
        </input_arg>
      </body>
      <description>extern virtual task port_wait_event(
        int    port_id    ,
        string entry      ,
        time   timer       = 0,
        string timeout_msg = "" );
    </description>
    </task>
    <task>
      <body>
        <name>port_wait_ltssm</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>apci_ltssm_state_e</type>
          <name>state</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>timeout_msg</name>
        </input_arg>
      </body>
      <description>extern virtual task port_wait_ltssm(
        int                port_id    ,
        apci_ltssm_state_e state      ,
        time               timer       = 0,
        string             timeout_msg = "");
    </description>
    </task>
    <task>
      <body>
        <name>wait_pkt_cb</name>
        <input_arg>
          <type>string</type>
          <name>where</name>
        </input_arg>
        <output_arg>
          <type>apci_packet</type>
          <name>pkt</name>
        </output_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>timeout_msg</name>
        </input_arg>
      </body>
      <description>extern virtual task wait_pkt_cb(
	input  string       where,
	output apci_packet  pkt,
	input time          timer = 0,
	input string        timeout_msg = "");
    </description>
    </task>
    <function>
      <body>
        <name>find_device_by_id</name>
        <input_arg>
          <type>int</type>
          <name>pci_id</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>fatal_if_not_found</name>
        </input_arg>
      </body>
      <description>extern virtual function apci_device_mgr find_device_by_id(
    input int  pci_id = -1,
    input bit fatal_if_not_found = 1);
    </description>
    </function>
    <task>
      <body>
        <name>do_cold_reset</name>
        <input_arg>
          <type>time</type>
          <name>hold_time_in_ns</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>early_notification</name>
        </input_arg>
      </body>
      <description>extern virtual task do_cold_reset(time  hold_time_in_ns = 0, bit early_notification = 0);
    </description>
    </task>
    <task>
      <body>
        <name>do_warm_reset</name>
        <input_arg>
          <type>time</type>
          <name>hold_time_in_ns</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>early_notification</name>
        </input_arg>
      </body>
      <description>extern virtual task do_warm_reset(time  hold_time_in_ns = 0, bit early_notification = 0);
    </description>
    </task>
    <function>
      <body>
        <name>do_scramble</name>
        <input_arg>
          <type>bit</type>
          <name>is_8b10b</name>
        </input_arg>
        <inout_arg>
          <type>bit</type>
          <name>data9</name>
        </inout_arg>
        <inout_arg>
          <type>bit</type>
          <name>lfsr</name>
        </inout_arg>
      </body>
      <description>extern virtual function void do_scramble(bit is_8b10b, inout bit       data9, inout bit       lfsr);
    </description>
    </function>
    <function>
      <body>
        <name>set_all_bfms</name>
        <input_arg>
          <type>apci_device</type>
          <name>all_bfms</name>
        </input_arg>
      </body>
      <description>extern virtual function void set_all_bfms(apci_device all_bfms      );
    </description>
    </function>
    <task>
      <body>
        <name>init_ptm_req</name>
        <input_arg>
          <type>int</type>
          <name>dialog_num</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>abort_timeout</name>
        </input_arg>
      </body>
      <description>extern virtual task init_ptm_req(int dialog_num = 2, int abort_timeout = 1e9);
    </description>
    </task>
    <task>
      <body>
        <name>msix_alloc_vectors</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <ref_arg>
          <type>avery_u16</type>
          <name>vectors</name>
        </ref_arg>
        <input_arg>
          <type>avery_u64</type>
          <name>msg_addr</name>
        </input_arg>
        <input_arg>
          <type>avery_u33</type>
          <name>msg_data</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
      </body>
      <description>extern virtual task msix_alloc_vectors(
	      apci_bdf_t  bdf,
	ref   avery_u16   vectors      ,
	input avery_u64   msg_addr = -1,
	input avery_u33   msg_data = -1,
	output bit        err);
    </description>
    </task>
    <task>
      <body>
        <name>msi_alloc_vectors</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>num_vec</name>
        </input_arg>
        <input_arg>
          <type>avery_u64</type>
          <name>msg_addr</name>
        </input_arg>
        <input_arg>
          <type>avery_u33</type>
          <name>msg_data</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
      </body>
      <description>extern virtual task msi_alloc_vectors(
	      apci_bdf_t  bdf,
	      int         num_vec  = 32,
	input avery_u64   msg_addr = -1,
	input avery_u33   msg_data = -1,
	output bit        err);
    </description>
    </task>
    <task>
      <body>
        <name>signal_interrupt</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>func_num</name>
        </input_arg>
        <input_arg>
          <type>apci_interrupt_e</type>
          <name>kind</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>vector</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
        <output_arg>
          <type>bit</type>
          <name>masked</name>
        </output_arg>
        <output_arg>
          <type>apci_interrupt_e</type>
          <name>kind_signaled</name>
        </output_arg>
        <input_arg>
          <type>bit</type>
          <name>wait_issued</name>
        </input_arg>
      </body>
      <description>extern virtual task signal_interrupt(
        input  int              port_id   ,
        input  int              func_num  ,
        input  apci_interrupt_e kind      ,
        input  int              vector    ,
        output bit              err       ,
        output bit              masked    ,
	output apci_interrupt_e kind_signaled,
	input  bit              wait_issued = 0);
    </description>
    </task>
    <task>
      <body>
        <name>ats_configure</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>stu</name>
        </input_arg>
        <output_arg>
          <type>apci_atc_mgr</type>
          <name>mgr</name>
        </output_arg>
      </body>
      <description>extern virtual task ats_configure(apci_bdf_t bdf, bit       stu, output apci_atc_mgr mgr);
    </description>
    </task>
    <function>
      <body>
        <name>ats_add_atpt_entry</name>
        <input_arg>
          <type>apci_atpt_entry_t</type>
          <name>entry</name>
        </input_arg>
      </body>
      <description>extern function void ats_add_atpt_entry(apci_atpt_entry_t entry);
    </description>
    </function>
    <function>
      <body>
        <name>ats_remove_atpt_entry</name>
        <input_arg>
          <type>bit</type>
          <name>untranslated_addr</name>
        </input_arg>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
      </body>
      <description>extern function void ats_remove_atpt_entry(bit       untranslated_addr, apci_bdf_t bdf = 0);
    </description>
    </function>
    <function>
      <body>
        <name>port_set_ide_key</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>stream_id</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>sub_stream</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_tx</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>key_set</name>
        </input_arg>
        <ref_arg>
          <type>apci_ide_key_iv_t</type>
          <name>key_iv</name>
        </ref_arg>
      </body>
      <description>extern function void port_set_ide_key(
	int			port_id,
	bit      		stream_id, 
	bit      		sub_stream, 
	bit			is_tx,
	int			key_set = -1, 
	ref apci_ide_key_iv_t   key_iv);
    </description>
    </function>
    <function>
      <body>
        <name>port_get_ide_key</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>stream_id</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>sub_stream</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_tx</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>index</name>
        </input_arg>
      </body>
      <description>extern function apci_ide_key_iv_t port_get_ide_key(
        int                 port_id,
        bit                  stream_id, 
        bit                  sub_stream, 
        bit                 is_tx,
        int                 index = -1); 
    </description>
    </function>
    <function>
      <body>
        <name>port_set_spdm_key</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>apci_ide_key_iv_t</type>
          <name>key_iv</name>
        </input_arg>
      </body>
      <description>extern function void port_set_spdm_key(int port_id, apci_ide_key_iv_t key_iv = 0);
    </description>
    </function>
    <task>
      <body>
        <name>init_ide</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>apci_func_info</type>
          <name>finf</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>id</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>key_set</name>
        </input_arg>
      </body>
      <description>extern task init_ide(                                                                                                                                         
        int             port_id, 
        apci_func_info  finf,
        bit              id,
	bit	        key_set = 0);
    </description>
    </task>
    <task>
      <body>
        <name>port_wait_ide_state</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>stream_id</name>
        </input_arg>
        <input_arg>
          <type>apci_idessm_state_e</type>
          <name>sm_state</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>timeout_msg</name>
        </input_arg>
      </body>
      <description>extern task port_wait_ide_state(int port_id, int stream_id, apci_idessm_state_e sm_state, time timer = 0, string timeout_msg = "");
    </description>
    </task>
    <function>
      <body>
        <name>set_mem_adaptor</name>
        <input_arg>
          <type>apci_mem_adaptor</type>
          <name>adaptor</name>
        </input_arg>
      </body>
      <description>extern virtual function void set_mem_adaptor(
        input apci_mem_adaptor adaptor);
    </description>
    </function>
    <task>
      <body>
        <name>init_ccix_esm</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>usp_bdf</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>rate0</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>rate1</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_long_reach</name>
        </input_arg>
        <output_arg>
          <type>apci_esm_err_type</type>
          <name>esm_err</name>
        </output_arg>
      </body>
      <description>extern virtual task init_ccix_esm(
               int               port_id       = 0,
               apci_bdf_t        usp_bdf      ,
               bit                rate0         = APCI_ESM_16G,
               bit                rate1         = APCI_ESM_25G,
               bit               is_long_reach = 0,
        output apci_esm_err_type esm_err       );
    </description>
    </task>
    <function>
      <body>
        <name>my_report</name>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>file</name>
        </input_arg>
      </body>
      <description>extern virtual function void my_report(string entry, int verbosity = 0, int file = 0);
    </description>
    </function>
    <function>
      <body>
        <name>append_callback</name>
        <input_arg>
          <type>apci_callbacks_base</type>
          <name>cb</name>
        </input_arg>
      </body>
      <description>extern virtual function void append_callback(apci_callbacks_base cb);
    </description>
    </function>
    <function>
      <body>
        <name>prepend_callback</name>
        <input_arg>
          <type>apci_callbacks_base</type>
          <name>cb</name>
        </input_arg>
      </body>
      <description>extern virtual function void prepend_callback(apci_callbacks_base cb);
    </description>
    </function>
    <function>
      <body>
        <name>unregister_callback</name>
        <input_arg>
          <type>apci_callbacks_base</type>
          <name>cb</name>
        </input_arg>
      </body>
      <description>extern virtual function void unregister_callback(apci_callbacks_base cb);
    </description>
    </function>
    <function>
      <body>
        <name>disable_lecroy_track_all</name>
      </body>
      <description>extern virtual function void disable_lecroy_track_all();                                                                                                                
    </description>
    </function>
    <function>
      <body>
        <name>disable_lecroy_track_tl</name>
      </body>
      <description>extern virtual function void disable_lecroy_track_tl();
    </description>
    </function>
    <function>
      <body>
        <name>disable_lecroy_track_link</name>
      </body>
      <description>extern virtual function void disable_lecroy_track_link();
    </description>
    </function>
    <function>
      <body>
        <name>enable_lecroy_track_all</name>
      </body>
      <description>extern virtual function void enable_lecroy_track_all();
    </description>
    </function>
    <function>
      <body>
        <name>enable_lecroy_track_tl</name>
      </body>
      <description>extern virtual function void enable_lecroy_track_tl();
    </description>
    </function>
    <function>
      <body>
        <name>enable_lecroy_track_link</name>
      </body>
      <description>extern virtual function void enable_lecroy_track_link();
    </description>
    </function>
    <function>
      <body>
        <name>cxl_port_set</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
        <input_arg>
          <type>longint</type>
          <name>value</name>
        </input_arg>
        <input_arg>
          <type>longint</type>
          <name>aux_value</name>
        </input_arg>
      </body>
      <description>extern virtual function void cxl_port_set(
	input int       port_id,
	input string    entry,
	input longint   value     = -1,
	input longint   aux_value = -1);
    </description>
    </function>
    <function>
      <body>
        <name>cxl_port_add_ide_key</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_tx</name>
        </input_arg>
        <ref_arg>
          <type>apci_ide_key_iv_t</type>
          <name>key_set</name>
        </ref_arg>
      </body>
      <description>extern function void cxl_port_add_ide_key(
	int			port_id,
	bit			is_tx,
	ref apci_ide_key_iv_t  key_set);
    </description>
    </function>
    <function>
      <body>
        <name>cxl_port_set_ifc</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>acxl_fc_type</type>
          <name>crd_type</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>value</name>
        </input_arg>
      </body>
      <description>extern virtual function void cxl_port_set_ifc(
	input int          port_id,
	input acxl_fc_type crd_type,
	input int          value);
    </description>
    </function>
    <function>
      <body>
        <name>cxl_port_set_ufc</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>acxl_fc_type</type>
          <name>crd_type</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>enable</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>threshold</name>
        </input_arg>
      </body>
      <description>extern virtual function void cxl_port_set_ufc(                                                                                                                  
        input int          port_id,            input acxl_fc_type crd_type,
        input bit          enable,
        input int          threshold);
    </description>
    </function>
    <function>
      <body>
        <name>cxl_port_get_fc</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <output_arg>
          <type>acxl_flow_crd_t</type>
          <name>avail_tx_crd</name>
        </output_arg>
        <output_arg>
          <type>acxl_flow_crd_t</type>
          <name>init_fc_alloc</name>
        </output_arg>
        <output_arg>
          <type>acxl_flow_crd_t</type>
          <name>returnable_crd</name>
        </output_arg>
      </body>
      <description>extern virtual function void cxl_port_get_fc(
        input  int             port_id       ,
        output acxl_flow_crd_t avail_tx_crd  ,
        output acxl_flow_crd_t init_fc_alloc ,
        output acxl_flow_crd_t returnable_crd);
    </description>
    </function>
    <function>
      <body>
        <name>inject_cxl_msg</name>
        <input_arg>
          <type>string</type>
          <name>where</name>
        </input_arg>
        <input_arg>
          <type>acxl_msg</type>
          <name>msg</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_front</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>bypass_callback</name>
        </input_arg>
      </body>
      <description>extern virtual function void inject_cxl_msg(
	string      where,
	acxl_msg    msg,
	bit         is_front = 1,
	bit         bypass_callback = 0
    );
    </description>
    </function>
    <function>
      <body>
        <name>inject_cxl_flit</name>
        <input_arg>
          <type>string</type>
          <name>where</name>
        </input_arg>
        <input_arg>
          <type>acxl_flit</type>
          <name>flit</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_front</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>bypass_callback</name>
        </input_arg>
      </body>
      <description>extern virtual function void inject_cxl_flit(
	string      where,
	acxl_flit   flit,
	bit         is_front = 1,
	bit         bypass_callback = 0
    );
    </description>
    </function>
    <function>
      <body>
        <name>inject_cxl_intern_err</name>
        <input_arg>
          <type>acxl_ras_err_type_e</type>
          <name>err_type</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>extern virtual function void inject_cxl_intern_err(
	acxl_ras_err_type_e  err_type,
	bit              addr
    );
    </description>
    </function>
    <task>
      <body>
        <name>port_wait_cxl_event</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>timeout_msg</name>
        </input_arg>
      </body>
      <description>extern virtual task port_wait_cxl_event(
        int    port_id    ,
        string entry      ,
        time   timer       = 0,
        string timeout_msg = "" );
    </description>
    </task>
    <function>
      <body>
        <name>cxl_get_cacheline</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>extern virtual function acxl_cacheline cxl_get_cacheline(bit       addr);
    </description>
    </function>
    <function>
      <body>
        <name>cxl_get_cache</name>
      </body>
      <description>extern virtual function acxl_cache cxl_get_cache();
    </description>
    </function>
    <task>
      <body>
        <name>wait_cxl_msg_cb</name>
        <input_arg>
          <type>string</type>
          <name>where</name>
        </input_arg>
        <output_arg>
          <type>acxl_msg</type>
          <name>msg</name>
        </output_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>timeout_msg</name>
        </input_arg>
      </body>
      <description>extern task wait_cxl_msg_cb(
	input  string       where,
	output acxl_msg     msg,
	input time          timer = 0,
	input string        timeout_msg = "");
    </description>
    </task>
    <function>
      <body>
        <name>cxl_bkdoor_add_hdm</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>apci_addr_range_t</type>
          <name>ranges</name>
        </input_arg>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_type3</name>
        </input_arg>
      </body>
      <description>extern virtual function void cxl_bkdoor_add_hdm(
        input int               port_id = 0,
        input apci_addr_range_t ranges      ,
        input apci_bdf_t        bdf = 0,
        input bit               is_type3 = 0);
    </description>
    </function>
    <function>
      <body>
        <name>cxl_bkdoor_set_bias</name>
        <input_arg>
          <type>int</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>hdm_addr</name>
        </input_arg>
        <input_arg>
          <type>acxl_meta0_value_e</type>
          <name>bias_state</name>
        </input_arg>
      </body>
      <description>extern virtual function void cxl_bkdoor_set_bias(
        input int                bdf       ,
        input bit                hdm_addr  ,
        input acxl_meta0_value_e bias_state);
    </description>
    </function>
    <task>
      <body>
        <name>port_wait_vlsm</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>vlsm_instance</name>
        </input_arg>
        <input_arg>
          <type>acxl_vlsm_state_e</type>
          <name>state</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>timeout_msg</name>
        </input_arg>
      </body>
      <description>extern task port_wait_vlsm(
        int                port_id    ,
	int                vlsm_instance,
        acxl_vlsm_state_e  state      ,
        time               timer       = 0,
        string             timeout_msg = "");
    </description>
    </task>
    <task>
      <body>
        <name>port_wait_lrsm</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>acxl_lrsm_e</type>
          <name>state</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>timeout_msg</name>
        </input_arg>
      </body>
      <description>extern task port_wait_lrsm(
        int                port_id    ,
        acxl_lrsm_e        state      ,
        time               timer       = 0,
        string             timeout_msg = "");
    </description>
    </task>
    <function>
      <body>
        <name>post_cxl_tr</name>
        <input_arg>
          <type>apci_transaction</type>
          <name>tr</name>
        </input_arg>
      </body>
      <description>extern virtual function void post_cxl_tr( apci_transaction  tr);
    </description>
    </function>
    <function>
      <body>
        <name>post_cxl_line_tr</name>
        <input_arg>
          <type>acxl_line_tr</type>
          <name>tr</name>
        </input_arg>
      </body>
      <description>extern virtual function void post_cxl_line_tr(acxl_line_tr tr);
    </description>
    </function>
    <function>
      <body>
        <name>post_cxl_pm_msg</name>
        <input_arg>
          <type>acxl_pm_msg</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>extern virtual function void post_cxl_pm_msg(acxl_pm_msg  msg);
    </description>
    </function>
    <task>
      <body>
        <name>configure_doe</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>finf</name>
        </input_arg>
        <output_arg>
          <type>apci_cap_doe</type>
          <name>doe_array</name>
        </output_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
        <input_arg>
          <type>bit</type>
          <name>enable_interrupt</name>
        </input_arg>
      </body>
      <description>extern task configure_doe(apci_func_info finf, output apci_cap_doe doe_array      , output bit err, input bit enable_interrupt=0);
    </description>
    </task>
  </class>
  <class>
    <name>apci_cap_cxl_ext_security</name>
    <description>class apci_cap_cxl_ext_security</description>
    <member>
      <name>log</name>
      <type>apci_log</type>
    </member>
    <member>
      <name>num_vectors</name>
      <type>int</type>
    </member>
    <member>
      <name>trust_lv_cache_dev_rp</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>rsvd0</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>port_id_rp</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>rsvd1</name>
      <type>avery_reg_field</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_cxl_ext_security", apci_log log = null);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();  
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>reset_cap</name>
        <input_arg>
          <type>apci_rst_e</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    virtual function void reset_cap(apci_rst_e kind);                                                                                                                    
    </description>
    </function>
  </class>
  <class>
    <name>avery_ring</name>
    <description>class avery_ring</description>
    <member>
      <name>id</name>
      <type>int</type>
    </member>
    <member>
      <name>base</name>
      <type>bit</type>
    </member>
    <member>
      <name>qsize</name>
      <type>int</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>int</type>
          <name>id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>qsize</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>entry_size</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>base</name>
        </input_arg>
      </body>
      <description>    extern function new(int id, int qsize, int entry_size, bit       base = 0);
    </description>
    </function>
    <function>
      <body>
        <name>peek</name>
      </body>
      <description>    extern virtual function T peek();
    </description>
    </function>
    <function>
      <body>
        <name>push</name>
        <input_arg>
          <type>T</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    extern virtual function void push (T v);
    </description>
    </function>
    <function>
      <body>
        <name>size</name>
      </body>
      <description>    extern virtual function int size();
    </description>
    </function>
    <function>
      <body>
        <name>num_entries</name>
      </body>
      <description>    extern virtual function int num_entries();
    </description>
    </function>
    <function>
      <body>
        <name>num_unused_entries</name>
      </body>
      <description>    extern virtual function int num_unused_entries();
    </description>
    </function>
    <function>
      <body>
        <name>delete</name>
        <input_arg>
          <type>int</type>
          <name>i</name>
        </input_arg>
      </body>
      <description>    extern virtual function void delete(int i);
    </description>
    </function>
    <function>
      <body>
        <name>delete_all</name>
      </body>
      <description>    extern virtual function void delete_all();
    </description>
    </function>
    <function>
      <body>
        <name>is_full</name>
      </body>
      <description>    extern virtual function bit is_full();
    </description>
    </function>
    <function>
      <body>
        <name>is_empty</name>
      </body>
      <description>    extern virtual function bit is_empty();
    </description>
    </function>
    <function>
      <body>
        <name>is_wrap</name>
        <input_arg>
          <type>int</type>
          <name>total</name>
        </input_arg>
        <output_arg>
          <type>int</type>
          <name>num_wrapped</name>
        </output_arg>
      </body>
      <description>    extern virtual function bit is_wrap(input int total, output int num_wrapped);
    </description>
    </function>
    <function>
      <body>
        <name>get_qsize</name>
      </body>
      <description>    extern virtual function int get_qsize();
    </description>
    </function>
    <function>
      <body>
        <name>get_entry_size</name>
      </body>
      <description>    extern virtual function int get_entry_size();
    </description>
    </function>
    <function>
      <body>
        <name>get_entry_size_dw</name>
      </body>
      <description>    extern virtual function int get_entry_size_dw();
    </description>
    </function>
    <function>
      <body>
        <name>get_tail</name>
      </body>
      <description>    extern virtual function bit       get_tail();
    </description>
    </function>
    <function>
      <body>
        <name>get_pi</name>
      </body>
      <description>    extern virtual function bit       get_pi();
    </description>
    </function>
    <function>
      <body>
        <name>get_head</name>
      </body>
      <description>    extern virtual function bit       get_head();
    </description>
    </function>
    <function>
      <body>
        <name>get_ci</name>
      </body>
      <description>    extern virtual function bit       get_ci();
    </description>
    </function>
    <function>
      <body>
        <name>get_tail_addr</name>
      </body>
      <description>    extern virtual function bit       get_tail_addr();
    </description>
    </function>
    <function>
      <body>
        <name>get_pi_addr</name>
      </body>
      <description>    extern virtual function bit       get_pi_addr();
    </description>
    </function>
    <function>
      <body>
        <name>get_head_addr</name>
      </body>
      <description>    extern virtual function bit       get_head_addr();
    </description>
    </function>
    <function>
      <body>
        <name>get_ci_addr</name>
      </body>
      <description>    extern virtual function bit       get_ci_addr();
    </description>
    </function>
    <function>
      <body>
        <name>get_base_addr</name>
      </body>
      <description>    extern virtual function bit       get_base_addr();
    </description>
    </function>
    <task>
      <body>
        <name>wait_free_space</name>
        <input_arg>
          <type>int</type>
          <name>num_free_entries</name>
        </input_arg>
      </body>
      <description>    extern virtual task wait_free_space(int num_free_entries = 1);
    </description>
    </task>
    <task>
      <body>
        <name>wait_size</name>
        <input_arg>
          <type>int</type>
          <name>num_entries</name>
        </input_arg>
      </body>
      <description>    extern virtual task wait_size(int num_entries = 0);
    </description>
    </task>
    <function>
      <body>
        <name>head_diff</name>
        <input_arg>
          <type>int</type>
          <name>new_head</name>
        </input_arg>
      </body>
      <description>    extern virtual function int head_diff(int new_head);
    </description>
    </function>
    <function>
      <body>
        <name>tail_diff</name>
        <input_arg>
          <type>int</type>
          <name>new_tail</name>
        </input_arg>
      </body>
      <description>    extern virtual function int tail_diff(int new_tail);
    </description>
    </function>
    <function>
      <body>
        <name>pointer_diff</name>
      </body>
      <description>    extern virtual function int pointer_diff();
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern virtual function string sprint(int verbosity = 0, string prefix="");
    </description>
    </function>
    <function>
      <body>
        <name>pop</name>
      </body>
      <description>    function T pop();
    </description>
    </function>
  </class>
  <class>
    <name>apci_lpif_bridge</name>
    <description>class apci_lpif_bridge</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>extern function new(string name);
    </description>
    </function>
    <function>
      <body>
        <name>connect</name>
        <parameter>
          <type>apci_lpif</type>
          <name>a_lpifs</name>
        </parameter>
        <parameter>
          <type>apci_lpif</type>
          <name>b_lpifs</name>
        </parameter>
        <input_arg>
          <type>bit</type>
          <name>is_cm</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>lpif_index</name>
        </input_arg>
      </body>
      <description>extern function void connect(virtual apci_lpif a_lpifs      , virtual apci_lpif b_lpifs      , input bit is_cm = 0, input int port_id = 0, input int lpif_index);
    </description>
    </function>
    <function>
      <body>
        <name>set</name>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>value</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>sub_entry</name>
        </input_arg>
      </body>
      <description>extern virtual function void set(
	input string    entry,
	input bit       value = 0,
	input string    sub_entry = "");
    </description>
    </function>
    <task>
      <body>
        <name>wait_event</name>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>timeout_msg</name>
        </input_arg>
      </body>
      <description>extern virtual task wait_event(
	string entry,
	time   timer = 0,
	string timeout_msg = "");
    </description>
    </task>
  </class>
  <class>
    <name>acxl_seq_cacheline_to_I</name>
    <description>class acxl_seq_cacheline_to_I</description>
    <member>
      <name>cline_addr</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_testcase_base</type>
          <name>testcase</name>
        </input_arg>
      </body>
      <description>    function new(apci_device bfm,  apci_testcase_base testcase = null);
    </description>
    </function>
    <task>
      <body>
        <name>run</name>
      </body>
      <description>    virtual task run();
    </description>
    </task>
  </class>
  <class>
    <name>acxl_cmd_transfer_fw</name>
    <description>class acxl_cmd_transfer_fw</description>
    <struct>
      <name>in</name>
      <arv>
        <name>rsvd8</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>offset</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rsvd2</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>slot</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>action</name>
        <type>bit</type>
      </arv>
    </struct>
    <member>
      <name>in_data</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_transfer_fw); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_mmio_reg</name>
    <description>class apci_mmio_reg</description>
    <member>
      <name>port_id</name>
      <type>bit</type>
    </member>
    <member>
      <name>func_num</name>
      <type>bit</type>
    </member>
    <member>
      <name>cxl_cm_reg</name>
      <type>apci_cap_cxl_cm_reg</type>
    </member>
    <member>
      <name>cxl_ras</name>
      <type>apci_cap_cxl_ras</type>
    </member>
    <member>
      <name>cxl_security</name>
      <type>apci_cap_cxl_security</type>
    </member>
    <member>
      <name>cxl_link</name>
      <type>apci_cap_cxl_link</type>
    </member>
    <member>
      <name>cxl_hdm_decoder</name>
      <type>apci_cap_cxl_hdm_decoder</type>
    </member>
    <member>
      <name>cxl_ext_security</name>
      <type>apci_cap_cxl_ext_security</type>
    </member>
    <member>
      <name>cxl_ide</name>
      <type>apci_cap_cxl_ide</type>
    </member>
    <member>
      <name>cxl_snoop_filter</name>
      <type>apci_cap_cxl_snoop_filter</type>
    </member>
    <member>
      <name>cxl_arb_mux</name>
      <type>apci_cap_cxl_arb_mux</type>
    </member>
    <member>
      <name>cxl_dev_reg_if</name>
      <type>apci_cap_cxl_dev_reg_if</type>
    </member>
    <member>
      <name>cxl_dev_status</name>
      <type>apci_cap_cxl_dev_status</type>
    </member>
    <member>
      <name>cxl_pri_mailbox</name>
      <type>apci_cap_cxl_pri_mailbox</type>
    </member>
    <member>
      <name>cxl_sec_mailbox</name>
      <type>apci_cap_cxl_sec_mailbox</type>
    </member>
    <member>
      <name>cxl_mem_dev</name>
      <type>apci_cap_cxl_mem_dev</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>func_num</name>
        </input_arg>
      </body>
      <description>    extern function new(string name, apci_log log, bit       port_id, bit       func_num);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern virtual function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <function>
      <body>
        <name>delete_optional_capabilities</name>
      </body>
      <description>    virtual function void delete_optional_capabilities();
    </description>
    </function>
  </class>
  <class>
    <name>acxl_seq_base</name>
    <description>class acxl_seq_base</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_device</type>
          <name>rc_app_bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_device</type>
          <name>target</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>scope</name>
        </input_arg>
      </body>
      <description>    function new (apci_device bfm	    = null, 
		  apci_device rc_app_bfm    = null, 
		  apci_device target	    = null, 
		  string scope = "");
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_hierarchy_id</name>
    <description>class apci_cap_hierarchy_id</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();   
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_hierarchy_id",
                  apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>acxl_device_cmd</name>
    <description>class acxl_device_cmd</description>
    <member>
      <name>opcode</name>
      <type>bit</type>
    </member>
    <member>
      <name>payload</name>
      <type>bit</type>
    </member>
    <member>
      <name>secondary_mailbox</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_response</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_background</name>
      <type>bit</type>
    </member>
    <member>
      <name>return_code</name>
      <type>bit</type>
    </member>
    <member>
      <name>vendor_spec_ext_status</name>
      <type>bit</type>
    </member>
    <struct>
      <name>user_ctrl</name>
      <arv>
        <name>is_drop</name>
        <type>bit</type>
      </arv>
    </struct>
    <member>
      <name>is_done</name>
      <type>bit</type>
    </member>
    <member>
      <name>rsp</name>
      <type>acxl_device_cmd</type>
    </member>
    <member>
      <name>req</name>
      <type>acxl_device_cmd</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>acxl_device_cmd_e</type>
          <name>opcode</name>
        </input_arg>
      </body>
      <description>    extern function new (string name="", acxl_device_cmd_e opcode = ACXL_DC_get_log);
    </description>
    </function>
    <function>
      <body>
        <name>copy</name>
        <input_arg>
          <type>acxl_device_cmd</type>
          <name>to</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>level</name>
        </input_arg>
      </body>
      <description>    extern function acxl_device_cmd copy  (acxl_device_cmd to = null, int level = -1);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern virtual function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <function>
      <body>
        <name>compare</name>
        <input_arg>
          <type>acxl_device_cmd</type>
          <name>to</name>
        </input_arg>
        <ref_arg>
          <type>string</type>
          <name>diff</name>
        </ref_arg>
      </body>
      <description>    extern virtual function bit compare(acxl_device_cmd to, ref string diff);
    </description>
    </function>
    <task>
      <body>
        <name>wait_done</name>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    extern virtual task wait_done(time timer = 0, string msg = "");
    </description>
    </task>
  </class>
  <class>
    <name>apci_seq_base</name>
    <description>class apci_seq_base</description>
    <task>
      <body>
        <name>run</name>
      </body>
      <description>    virtual task run();
    </description>
    </task>
  </class>
  <class>
    <name>acxl_cmd_security_send</name>
    <description>class acxl_cmd_security_send</description>
    <struct>
      <name>in</name>
      <arv>
        <name>rsvd3</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>sp_specific</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>security_protocol</name>
        <type>bit</type>
      </arv>
    </struct>
    <member>
      <name>in_data</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_security_send); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_ltr</name>
    <description>class apci_cap_ltr</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_ltr",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_sanitize</name>
    <description>class acxl_cmd_sanitize</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_sanitize); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_os</name>
    <description>class apci_os</description>
    <function>
      <body>
        <name>new</name>
        <parameter>
          <type>apci_os_type</type>
          <name>kind</name>
        </parameter>
        <input_arg>
          <type>bit</type>
          <name>is_8b10b</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>link_speed</name>
        </input_arg>
      </body>
      <description>    extern function new (`avery_strname  apci_os_type kind = APCI_OS_unknown, bit is_8b10b = 1, int link_speed = 1);
    </description>
    </function>
    <function>
      <body>
        <name>copy</name>
        <input_arg>
          <type>apci_os</type>
          <name>to</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>level</name>
        </input_arg>
      </body>
      <description>    extern function apci_os copy(apci_os to = null, int level = -1);
    </description>
    </function>
    <function>
      <body>
        <name>is_ts</name>
      </body>
      <description>    function bit is_ts()            ; return kind inside {APCI_OS_ts1, APCI_OS_ts2}      ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_ts1</name>
      </body>
      <description>    function bit is_ts1()           ; return kind == APCI_OS_ts1                         ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_ts2</name>
      </body>
      <description>    function bit is_ts2()           ; return kind == APCI_OS_ts2                         ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_ts0</name>
      </body>
      <description>    function bit is_ts0()           ; return kind == APCI_OS_ts0                         ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_skp</name>
      </body>
      <description>    function bit is_skp()           ; return kind inside {APCI_OS_skp, APCI_OS_ctrl_skp} ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_ctrl_skp</name>
      </body>
      <description>    function bit is_ctrl_skp()      ; return kind == APCI_OS_ctrl_skp                    ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_ei</name>
      </body>
      <description>    function bit is_ei()            ; return kind == APCI_OS_ei                          ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_eie</name>
      </body>
      <description>    function bit is_eie()           ; return kind inside {APCI_OS_eie, APCI_OS_ccix_eie} ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_fts</name>
      </body>
      <description>    function bit is_fts()           ; return kind == APCI_OS_fts                         ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_compliance</name>
      </body>
      <description>    function bit is_compliance()    ; return kind == APCI_OS_compliance                  ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_mod_compliance</name>
      </body>
      <description>    function bit is_mod_compliance(); return kind == APCI_OS_mod_compliance              ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_lidl</name>
      </body>
      <description>    function bit is_lidl()          ; return kind == APCI_OS_lidl                        ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_sds</name>
      </body>
      <description>    function bit is_sds()           ; return kind == APCI_OS_sds                         ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_user</name>
      </body>
      <description>    function bit is_user()          ; return kind == APCI_OS_user                        ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>compare</name>
        <input_arg>
          <type>apci_os</type>
          <name>to</name>
        </input_arg>
        <output_arg>
          <type>string</type>
          <name>diff</name>
        </output_arg>
      </body>
      <description>    extern virtual function bit compare(apci_os to, output string diff);
    </description>
    </function>
    <function>
      <body>
        <name>get_length</name>
      </body>
      <description>    extern virtual function int get_length();
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern virtual function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <function>
      <body>
        <name>is_std_ts2</name>
      </body>
      <description>    extern virtual function bit is_std_ts2();
    </description>
    </function>
    <function>
      <body>
        <name>is_eq_ts2</name>
      </body>
      <description>    extern virtual function bit is_eq_ts2();
    </description>
    </function>
    <function>
      <body>
        <name>is_eq_ts2_8b10b</name>
      </body>
      <description>    extern virtual function bit is_eq_ts2_8b10b();
    </description>
    </function>
    <function>
      <body>
        <name>is_eq_ts2_128b</name>
      </body>
      <description>    extern virtual function bit is_eq_ts2_128b();
    </description>
    </function>
    <function>
      <body>
        <name>is_eq_ts1</name>
      </body>
      <description>    extern virtual function bit is_eq_ts1();
    </description>
    </function>
    <function>
      <body>
        <name>is_mod_ts</name>
      </body>
      <description>    extern virtual function bit is_mod_ts();
    </description>
    </function>
    <function>
      <body>
        <name>is_mod_ts1</name>
      </body>
      <description>    extern virtual function bit is_mod_ts1();
    </description>
    </function>
    <function>
      <body>
        <name>is_mod_ts2</name>
      </body>
      <description>    extern virtual function bit is_mod_ts2();
    </description>
    </function>
    <function>
      <body>
        <name>is_compliance_step1_128b</name>
      </body>
      <description>    extern virtual function bit is_compliance_step1_128b();
    </description>
    </function>
    <function>
      <body>
        <name>is_compliance_step2_128b</name>
      </body>
      <description>    extern virtual function bit is_compliance_step2_128b();
    </description>
    </function>
    <function>
      <body>
        <name>is_compliance_step3_128b</name>
      </body>
      <description>    extern virtual function bit is_compliance_step3_128b();
    </description>
    </function>
    <function>
      <body>
        <name>is_8b10b_mod_compliance_with_delay</name>
      </body>
      <description>    extern virtual function bit is_8b10b_mod_compliance_with_delay();
    </description>
    </function>
    <function>
      <body>
        <name>rehash_parity</name>
      </body>
      <description>    extern virtual function void rehash_parity();
    </description>
    </function>
    <function>
      <body>
        <name>rehash_margin</name>
      </body>
      <description>    extern virtual function void rehash_margin();
    </description>
    </function>
    <function>
      <body>
        <name>make_cp_8b10b</name>
        <input_arg>
          <type>bit</type>
          <name>with_delay</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>err_status</name>
        </input_arg>
      </body>
      <description>    extern virtual function void make_cp_8b10b(bit with_delay, bit       err_status);
    </description>
    </function>
    <function>
      <body>
        <name>make_cp_128b</name>
        <input_arg>
          <type>byte</type>
          <name>step</name>
        </input_arg>
        <input_arg>
          <type>byte</type>
          <name>lane_no</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>tx_preset</name>
        </input_arg>
      </body>
      <description>    extern virtual function void make_cp_128b(byte step, byte lane_no, bit       tx_preset); 
    </description>
    </function>
    <function>
      <body>
        <name>make_cp_1b1b</name>
        <input_arg>
          <type>byte</type>
          <name>step</name>
        </input_arg>
        <input_arg>
          <type>byte</type>
          <name>lane_no</name>
        </input_arg>
      </body>
      <description>    extern virtual function void make_cp_1b1b(byte step, byte lane_no);
    </description>
    </function>
    <function>
      <body>
        <name>rehash_gen6_ts</name>
      </body>
      <description>    extern virtual function void rehash_gen6_ts();
    </description>
    </function>
    <function>
      <body>
        <name>mod_ec</name>
        <input_arg>
          <type>bit</type>
          <name>ec</name>
        </input_arg>
      </body>
      <description>    extern virtual function void mod_ec(bit       ec);
    </description>
    </function>
    <function>
      <body>
        <name>get_ec</name>
      </body>
      <description>    extern virtual function bit       get_ec();
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_dvsec_ccix_prot</name>
    <description>class apci_cap_dvsec_ccix_prot</description>
    <member>
      <name>ccix_guid_dw0</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>ccix_guid_dw1</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>ccix_guid_dw2</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>ccix_guid_dw3</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>ccix_override_ver</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>rsvd4</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>ccid_override_value</name>
      <type>avery_reg_field</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_dvsec_ccix_prot",
        apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_flit_log</name>
    <description>class apci_cap_flit_log</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_flit_log",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_cxl_hdm_decoder</name>
    <description>class apci_cap_cxl_hdm_decoder</description>
    <member>
      <name>num_vectors</name>
      <type>int</type>
    </member>
    <member>
      <name>rsvd2</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>mem_base_low</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>mem_base_high</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>rsvd3</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>mem_size_low</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>mem_size_high</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>interleave_granularity</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>interleave_ways</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>lock_on_commit</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>commit</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>committed</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>err_not_committed</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>target_device_type</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>rsvd4</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>target_port_id_interleave_way0</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>target_port_id_interleave_way1</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>target_port_id_interleave_way2</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>target_port_id_interleave_way3</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>rsvd5</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>dpa_skip_low</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>target_port_id_interleave_way4</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>target_port_id_interleave_way5</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>target_port_id_interleave_way6</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>target_port_id_interleave_way7</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>dpa_skip_high</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>tgt_pid</name>
      <type>avery_reg_field</type>
    </member>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();  
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_cxl_hdm_decoder", apci_log log = null, apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>get_interleave_granularity</name>
        <input_arg>
          <type>int</type>
          <name>decoder_id</name>
        </input_arg>
      </body>
      <description>    virtual function int get_interleave_granularity(int decoder_id);
    </description>
    </function>
    <function>
      <body>
        <name>get_interleave_ways</name>
        <input_arg>
          <type>int</type>
          <name>decoder_id</name>
        </input_arg>
      </body>
      <description>    virtual function avery_u16 get_interleave_ways(int decoder_id);
    </description>
    </function>
    <function>
      <body>
        <name>get_il_mask</name>
        <input_arg>
          <type>int</type>
          <name>decoder_id</name>
        </input_arg>
      </body>
      <description>    virtual function bit       get_il_mask(int decoder_id);
    </description>
    </function>
    <function>
      <body>
        <name>get_tgt_pid</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>decoder_id</name>
        </input_arg>
      </body>
      <description>    virtual function int get_tgt_pid(bit       addr, int decoder_id);
    </description>
    </function>
    <function>
      <body>
        <name>sprint_decoded_ranges</name>
      </body>
      <description>    virtual function string sprint_decoded_ranges();
    </description>
    </function>
    <function>
      <body>
        <name>get_decoder_cnt</name>
      </body>
      <description>    virtual function int get_decoder_cnt();
    </description>
    </function>
    <function>
      <body>
        <name>reset_cap</name>
        <input_arg>
          <type>apci_rst_e</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    virtual function void reset_cap(apci_rst_e kind);                                                                                                                    
    </description>
    </function>
    <function>
      <body>
        <name>get_decoder_hpa_mem_base</name>
        <input_arg>
          <type>int</type>
          <name>decoder</name>
        </input_arg>
      </body>
      <description>    virtual function bit       get_decoder_hpa_mem_base(int decoder);
    </description>
    </function>
    <function>
      <body>
        <name>get_decoder_hpa_mem_size</name>
        <input_arg>
          <type>int</type>
          <name>decoder</name>
        </input_arg>
      </body>
      <description>    virtual function bit       get_decoder_hpa_mem_size(int decoder);
    </description>
    </function>
    <function>
      <body>
        <name>get_decoder_dpa_skip</name>
        <input_arg>
          <type>int</type>
          <name>decoder</name>
        </input_arg>
      </body>
      <description>    virtual function bit       get_decoder_dpa_skip(int decoder);
    </description>
    </function>
    <function>
      <body>
        <name>get_decoder_dpa_size</name>
        <input_arg>
          <type>int</type>
          <name>decoder</name>
        </input_arg>
      </body>
      <description>    virtual function bit       get_decoder_dpa_size(int decoder);
    </description>
    </function>
    <function>
      <body>
        <name>get_decoder_dpa_base</name>
        <input_arg>
          <type>int</type>
          <name>decoder</name>
        </input_arg>
      </body>
      <description>    virtual function bit       get_decoder_dpa_base(int decoder); 
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_cxl_ide</name>
    <description>class apci_cap_cxl_ide</description>
    <member>
      <name>log</name>
      <type>apci_log</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_cxl_ide", apci_log log = null);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>reset_cap</name>
        <input_arg>
          <type>apci_rst_e</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    virtual function void reset_cap(apci_rst_e kind);                                                                                                                    
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_get_health_info</name>
    <description>class acxl_cmd_get_health_info</description>
    <struct>
      <name>out</name>
      <arv>
        <name>corrected_persistent_err_count</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>corrected_volatile_err_count</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>dirty_shutdown_count</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>device_temperature</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>life_used</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>additional_status</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>media_status</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>health_status</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_get_health_info); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_get_scan_media_results</name>
    <description>class acxl_cmd_get_scan_media_results</description>
    <struct>
      <name>out</name>
      <arv>
        <name>rsvd14</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>media_err_record_count</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rsvd11</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>scan_media_flags</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>restart_physical_addr_len</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>physical_addr</name>
        <type>bit</type>
      </arv>
    </struct>
    <member>
      <name>media_err_records</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_get_scan_media_results); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_cfg_space</name>
    <description>class apci_cfg_space</description>
    <member>
      <name>port_id</name>
      <type>bit</type>
    </member>
    <member>
      <name>func_num</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_vf</name>
      <type>bit</type>
    </member>
    <member>
      <name>null_cap</name>
      <type>apci_cap_null</type>
    </member>
    <member>
      <name>type0</name>
      <type>apci_cap_type0</type>
    </member>
    <member>
      <name>type1</name>
      <type>apci_cap_type1</type>
    </member>
    <member>
      <name>pcie</name>
      <type>apci_cap_pcie</type>
    </member>
    <member>
      <name>pm</name>
      <type>apci_cap_power_mgmt</type>
    </member>
    <member>
      <name>msi</name>
      <type>apci_cap_msi</type>
    </member>
    <member>
      <name>msix</name>
      <type>apci_cap_msix</type>
    </member>
    <member>
      <name>vital</name>
      <type>apci_cap_vital</type>
    </member>
    <member>
      <name>null_ext_cap</name>
      <type>apci_cap_null_ext</type>
    </member>
    <member>
      <name>device3</name>
      <type>apci_cap_device3</type>
    </member>
    <member>
      <name>aer</name>
      <type>apci_cap_aer</type>
    </member>
    <member>
      <name>vc</name>
      <type>apci_cap_vc</type>
    </member>
    <member>
      <name>mfvc</name>
      <type>apci_cap_mfvc</type>
    </member>
    <member>
      <name>vsec</name>
      <type>apci_cap_vsec</type>
    </member>
    <member>
      <name>device_serial</name>
      <type>apci_cap_device_serial</type>
    </member>
    <member>
      <name>rc_link_declaration</name>
      <type>apci_cap_rc_link_declaration</type>
    </member>
    <member>
      <name>rc_int_link_ctrl</name>
      <type>apci_cap_rc_int_link_ctrl</type>
    </member>
    <member>
      <name>power_budget</name>
      <type>apci_cap_power_budget</type>
    </member>
    <member>
      <name>acs</name>
      <type>apci_cap_acs</type>
    </member>
    <member>
      <name>rcrb</name>
      <type>apci_cap_rcrb</type>
    </member>
    <member>
      <name>mc</name>
      <type>apci_cap_mc</type>
    </member>
    <member>
      <name>rbar</name>
      <type>apci_cap_resizable_bar</type>
    </member>
    <member>
      <name>ari</name>
      <type>apci_cap_ari</type>
    </member>
    <member>
      <name>dpa</name>
      <type>apci_cap_dpa</type>
    </member>
    <member>
      <name>ltr</name>
      <type>apci_cap_ltr</type>
    </member>
    <member>
      <name>tph</name>
      <type>apci_cap_tph</type>
    </member>
    <member>
      <name>sec_pcie</name>
      <type>apci_cap_secondary_pcie</type>
    </member>
    <member>
      <name>ats</name>
      <type>apci_cap_ats</type>
    </member>
    <member>
      <name>pri</name>
      <type>apci_cap_pri</type>
    </member>
    <member>
      <name>sriov</name>
      <type>apci_cap_sriov</type>
    </member>
    <member>
      <name>mpcie</name>
      <type>apci_cap_mpcie</type>
    </member>
    <member>
      <name>l1_pm_substates</name>
      <type>apci_cap_l1_pm_sub</type>
    </member>
    <member>
      <name>dpc</name>
      <type>apci_cap_dpc</type>
    </member>
    <member>
      <name>pasid</name>
      <type>apci_cap_pasid</type>
    </member>
    <member>
      <name>lnr</name>
      <type>apci_cap_lnr</type>
    </member>
    <member>
      <name>hierarchy_id</name>
      <type>apci_cap_hierarchy_id</type>
    </member>
    <member>
      <name>ptm</name>
      <type>apci_cap_ptm</type>
    </member>
    <member>
      <name>frs_q</name>
      <type>apci_cap_frs_q</type>
    </member>
    <member>
      <name>dl_feature</name>
      <type>apci_cap_dl_feature</type>
    </member>
    <member>
      <name>pl_gen4</name>
      <type>apci_cap_pl_gen4</type>
    </member>
    <member>
      <name>pl_gen4_margin</name>
      <type>apci_cap_pl_gen4_margin</type>
    </member>
    <member>
      <name>pl_gen5</name>
      <type>apci_cap_pl_gen5</type>
    </member>
    <member>
      <name>pl_gen6</name>
      <type>apci_cap_pl_gen6</type>
    </member>
    <member>
      <name>shadow_func</name>
      <type>apci_cap_shadow_func</type>
    </member>
    <member>
      <name>alt_protocol</name>
      <type>apci_cap_alt_protocol</type>
    </member>
    <member>
      <name>dvsec_ccix_tp</name>
      <type>apci_cap_dvsec_ccix_tp</type>
    </member>
    <member>
      <name>dvsec_ccix_prot</name>
      <type>apci_cap_dvsec_ccix_prot</type>
    </member>
    <member>
      <name>dvsec_ccix_app</name>
      <type>apci_cap_dvsec_ccix_app</type>
    </member>
    <member>
      <name>base_dvsec</name>
      <type>apci_cap_dvsec</type>
    </member>
    <member>
      <name>rtr</name>
      <type>apci_cap_rtr</type>
    </member>
    <member>
      <name>sfi</name>
      <type>apci_cap_sfi</type>
    </member>
    <member>
      <name>native_pcie</name>
      <type>apci_cap_native_pcie</type>
    </member>
    <member>
      <name>vf_rbar</name>
      <type>apci_cap_vf_resizable_bar</type>
    </member>
    <member>
      <name>doe_array</name>
      <type>apci_cap_doe</type>
    </member>
    <member>
      <name>ide</name>
      <type>apci_cap_ide</type>
    </member>
    <member>
      <name>flit_log</name>
      <type>apci_cap_flit_log</type>
    </member>
    <member>
      <name>flit_perform_measure</name>
      <type>apci_cap_flit_performance_measure</type>
    </member>
    <member>
      <name>flit_err_inject</name>
      <type>apci_cap_flit_err_inject</type>
    </member>
    <member>
      <name>cxl_device</name>
      <type>apci_cap_dvsec_cxl_device</type>
    </member>
    <member>
      <name>cxl_port_ext</name>
      <type>apci_cap_dvsec_cxl_port_ext</type>
    </member>
    <member>
      <name>flexbus_port</name>
      <type>apci_cap_dvsec_flexbus_port</type>
    </member>
    <member>
      <name>cxl_reg_loc</name>
      <type>apci_cap_dvsec_cxl_reg_locator</type>
    </member>
    <member>
      <name>cxl_device_test</name>
      <type>apci_cap_dvsec_cxl_device_test</type>
    </member>
    <member>
      <name>noncxl_func_map</name>
      <type>apci_cap_dvsec_noncxl_func_map</type>
    </member>
    <member>
      <name>gpf_cxl_port</name>
      <type>apci_cap_dvsec_gpf_cxl_port</type>
    </member>
    <member>
      <name>gpf_cxl_device</name>
      <type>apci_cap_dvsec_gpf_cxl_device</type>
    </member>
    <member>
      <name>cxl_mld</name>
      <type>apci_cap_dvsec_cxl_mld</type>
    </member>
    <member>
      <name>onset</name>
      <type>apci_capability</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>func_num</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_vf</name>
        </input_arg>
      </body>
      <description>    extern function new(string name, apci_log log, bit       port_id, bit       func_num, bit is_vf);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern virtual function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <function>
      <body>
        <name>is_rciep</name>
      </body>
      <description>    extern virtual function bit is_rciep();
    </description>
    </function>
    <function>
      <body>
        <name>is_rcrb</name>
      </body>
      <description>    extern virtual function bit is_rcrb();
    </description>
    </function>
    <function>
      <body>
        <name>delete_optional_capabilities</name>
      </body>
      <description>    virtual function void delete_optional_capabilities();
    </description>
    </function>
  </class>
  <class>
    <name>apci_msix_pba</name>
    <description>class apci_msix_pba</description>
    <member>
      <name>log</name>
      <type>apci_log</type>
    </member>
    <member>
      <name>num_vectors</name>
      <type>int</type>
    </member>
    <member>
      <name>pending_bits</name>
      <type>avery_reg_field</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>num_vectors</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_msix_pba", int num_vectors, apci_log log = null);
    </description>
    </function>
    <function>
      <body>
        <name>fwrite_cb</name>
        <input_arg>
          <type>avery_reg_field</type>
          <name>f</name>
        </input_arg>
        <input_arg>
          <type>avery_reg_val_t</type>
          <name>old_v</name>
        </input_arg>
      </body>
      <description>    virtual function void fwrite_cb(avery_reg_field f, avery_reg_val_t old_v);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_get_poison_list</name>
    <description>class acxl_cmd_get_poison_list</description>
    <struct>
      <name>in</name>
      <arv>
        <name>get_poison_list_physical_addr_len</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>get_poison_list_physical_addr</name>
        <type>bit</type>
      </arv>
    </struct>
    <struct>
      <name>out</name>
      <arv>
        <name>rsvdC</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>media_err_record_count</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>overflow_timestamp</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rsvd1</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>poison_list_flags</name>
        <type>bit</type>
      </arv>
    </struct>
    <struct>
      <name>media_err_records</name>
      <arv>
        <name>rsvdC</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>media_err_len</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>media_err_addr</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_get_poison_list); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_cxl_pri_mailbox</name>
    <description>class apci_cap_cxl_pri_mailbox</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_cxl_pri_mailbox", apci_log log = null);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>get_avery_cap_id</name>
      </body>
      <description>    virtual function int get_avery_cap_id();
    </description>
    </function>
  </class>
  <class>
    <name>avery_rw_data32</name>
    <description>class avery_rw_data32</description>
    <member>
      <name>payload_dw</name>
      <type>reg</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>int</type>
          <name>isw</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>total2</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>start2</name>
        </input_arg>
      </body>
      <description>    extern function new (
        input int isw= -1, 
        input int total2= 1,
        input bit        start2 = 0);
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_ptm</name>
    <description>class apci_cap_ptm</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_ptm",
	apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_dvsec_ccix_app</name>
    <description>class apci_cap_dvsec_ccix_app</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_dvsec_ccix_app",
            apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
  </class>
  <class>
    <name>apci_margin_cmd</name>
    <description>class apci_margin_cmd</description>
    <member>
      <name>margin_type</name>
      <type>bit</type>
    </member>
    <member>
      <name>receiver_num</name>
      <type>bit</type>
    </member>
    <member>
      <name>margin_payload</name>
      <type>bit</type>
    </member>
    <member>
      <name>resp_payload</name>
      <type>bit</type>
    </member>
    <member>
      <name>{</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <parameter>
          <type>apci_margin_type</type>
          <name>kind</name>
        </parameter>
      </body>
      <description>    function new(`avery_strname  apci_margin_type kind = APCI_MARGIN_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>is_step_margin</name>
      </body>
      <description>    virtual function bit is_step_margin        (); return kind inside {APCI_MARGIN_step_margin_timing, APCI_MARGIN_step_margin_voltage}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_step_margin_timing</name>
      </body>
      <description>    virtual function bit is_step_margin_timing (); return kind == APCI_MARGIN_step_margin_timing ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_step_margin_voltage</name>
      </body>
      <description>    virtual function bit is_step_margin_voltage(); return kind == APCI_MARGIN_step_margin_voltage; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern virtual function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <function>
      <body>
        <name>is_broadcast</name>
      </body>
      <description>    virtual function is_broadcast();
    </description>
    </function>
    <function>
      <body>
        <name>is_report</name>
      </body>
      <description>    virtual function bit is_report();
    </description>
    </function>
    <function>
      <body>
        <name>encode</name>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    virtual function void encode(apci_log log);
    </description>
    </function>
    <function>
      <body>
        <name>decode</name>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    virtual function void decode(apci_log log);
    </description>
    </function>
  </class>
  <class>
    <name>apci_phy_datasheet</name>
    <description>class apci_phy_datasheet</description>
    <member>
      <name>N_FTS_with_common_clock</name>
      <type>bit</type>
    </member>
    <member>
      <name>N_FTS_without_common_clock</name>
      <type>bit</type>
    </member>
    <member>
      <name>l1_substate_management</name>
      <type>bit</type>
    </member>
    <member>
      <name>dynamic_preset_coef_update_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>figure_of_merit_range</name>
      <type>bit</type>
    </member>
    <member>
      <name>encode_decode_bypass_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>pclk_mode</name>
      <type>bit</type>
    </member>
    <member>
      <name>max_pcie_rate</name>
      <type>bit</type>
    </member>
    <member>
      <name>l1_pm_substate_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>margin_param</name>
      <type>apci_margin_param</type>
    </member>
    <function>
      <body>
        <name>new</name>
      </body>
      <description>    function new();
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern virtual function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_set_event_int_policy</name>
    <description>class acxl_cmd_set_event_int_policy</description>
    <struct>
      <name>fatal</name>
      <arv>
        <name>interrupt_msg_num</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rsvd0_2</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>interrupt_mode</name>
        <type>bit</type>
      </arv>
    </struct>
    <struct>
      <name>failure</name>
      <arv>
        <name>interrupt_msg_num</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rsvd0_2</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>interrupt_mode</name>
        <type>bit</type>
      </arv>
    </struct>
    <struct>
      <name>warn</name>
      <arv>
        <name>interrupt_msg_num</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rsvd0_2</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>interrupt_mode</name>
        <type>bit</type>
      </arv>
    </struct>
    <struct>
      <name>info</name>
      <arv>
        <name>interrupt_msg_num</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rsvd0_2</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>interrupt_mode</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_set_event_int_policy); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_vital</name>
    <description>class apci_cap_vital</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_vital",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_get_shutdown_state</name>
    <description>class acxl_cmd_get_shutdown_state</description>
    <struct>
      <name>out</name>
      <arv>
        <name>state</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_get_shutdown_state); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_doe_data</name>
    <description>class apci_doe_data</description>
    <member>
      <name>is_read</name>
      <type>bit</type>
    </member>
    <member>
      <name>raw_dwords</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>decode_header</name>
      </body>
      <description>    virtual function void decode_header();
    </description>
    </function>
    <function>
      <body>
        <name>pack</name>
      </body>
      <description>    virtual function void pack();
    </description>
    </function>
    <function>
      <body>
        <name>unpack</name>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
      </body>
      <description>    virtual function void unpack (apci_log log, output bit err);
    </description>
    </function>
    <function>
      <body>
        <name>get_expected_length</name>
      </body>
      <description>    extern virtual function int get_expected_length();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_read</name>
        </input_arg>
        <input_arg>
          <type>apci_doe_data_type</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    function new( string name = "", bit is_read = 0, apci_doe_data_type kind = APCI_DOE_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern virtual function string sprint (int verbosity = 0, string prefix="");
    </description>
    </function>
    <function>
      <body>
        <name>copy</name>
        <input_arg>
          <type>apci_doe_data</type>
          <name>to</name>
        </input_arg>
      </body>
      <description>    extern function      apci_doe_data copy(apci_doe_data to = null);
    </description>
    </function>
    <task>
      <body>
        <name>wait_done</name>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    extern task          wait_done(time timer = 0, string msg = "");
    </description>
    </task>
    <function>
      <body>
        <name>annotate</name>
        <input_arg>
          <type>string</type>
          <name>s</name>
        </input_arg>
      </body>
      <description>    extern virtual function void annotate(string s);
    </description>
    </function>
  </class>
  <class>
    <name>apci_doe_discovery_table</name>
    <description>class apci_doe_discovery_table</description>
    <member>
      <name>doe_table</name>
      <type>int</type>
    </member>
    <function>
      <body>
        <name>get_index_by_doe</name>
        <input_arg>
          <type>apci_doe_data_type</type>
          <name>doe</name>
        </input_arg>
      </body>
      <description>    function int get_index_by_doe(apci_doe_data_type doe);
    </description>
    </function>
    <function>
      <body>
        <name>get_doe_by_index</name>
        <input_arg>
          <type>int</type>
          <name>idx</name>
        </input_arg>
      </body>
      <description>    function apci_doe_data_type get_doe_by_index(int idx);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
      </body>
      <description>    function string sprint();
    </description>
    </function>
  </class>
  <class>
    <name>avery_qlayer_base</name>
    <description>class avery_qlayer_base</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>`avery_xvm_parent</name>
        </input_arg>
      </body>
      <description>    function new(string name, `avery_xvm_parent);
    </description>
    </function>
  </class>
  <class>
    <name>apci_rx_os_uvm_port</name>
    <description>class apci_rx_os_uvm_port</description>
    <member>
      <name>bfm</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>logic_lane_num</name>
      <type>int</type>
    </member>
    <member>
      <name>os</name>
      <type>apci_os</type>
    </member>
    <function>
      <body>
        <name>set</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>logic_lane_num</name>
        </input_arg>
        <input_arg>
          <type>apci_os</type>
          <name>os</name>
        </input_arg>
      </body>
      <description>    function void set( apci_device    bfm		,
		       int	      logic_lane_num    , 
		       apci_os        os		);
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_identify_mem_dev</name>
    <description>class acxl_cmd_identify_mem_dev</description>
    <struct>
      <name>out</name>
      <arv>
        <name>qos_telemetry_cap</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>poison_handling_cap</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>inject_poison_limit</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>poison_list_max_media_err</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>lsa_size</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>fatal_event_log_size</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>failure_event_log_size</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>warn_event_log_size</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>info_event_log_size</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>partition_alignment</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>persistent_only_capacity</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>volatile_only_capacity</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>total_capacity</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>fw_revision</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_identify_mem_dev); this.is_response = is_response; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>pack</name>
      </body>
      <description>    virtual function void pack();
    </description>
    </function>
    <function>
      <body>
        <name>unpack</name>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    virtual function bit unpack(apci_log log);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    virtual function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_dvsec_cxl_device_test</name>
    <description>class apci_cap_dvsec_cxl_device_test</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_dvsec_cxl_device_test",
		 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
  </class>
  <class>
    <name>apci_device_mgr</name>
    <description>class apci_device_mgr</description>
    <member>
      <name>finfs</name>
      <type>apci_func_info</type>
    </member>
    <function>
      <body>
        <name>`avery_new_named</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bus_num</name>
        </input_arg>
      </body>
      <description>    extern function `avery_new_named(apci_bdf_t bus_num = 0);
    </description>
    </function>
    <function>
      <body>
        <name>copy</name>
        <input_arg>
          <type>apci_device_mgr</type>
          <name>to</name>
        </input_arg>
      </body>
      <description>    extern function apci_device_mgr copy(apci_device_mgr to = null);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <task>
      <body>
        <name>wait_configured</name>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
      </body>
      <description>    extern virtual task wait_configured(time timer = 0);
    </description>
    </task>
    <function>
      <body>
        <name>is_ep</name>
      </body>
      <description>    function bit is_ep(); return dev_type inside {APCI_DEVICE_ep, APCI_DEVICE_legacy_ep, APCI_PORT_rc_ie}; endfunction 
    </description>
    </function>
    <function>
      <body>
        <name>is_rc</name>
      </body>
      <description>    function bit is_rc(); return dev_type == APCI_DEVICE_rc;                              endfunction 
    </description>
    </function>
    <function>
      <body>
        <name>is_sw</name>
      </body>
      <description>    function bit is_sw(); return dev_type == APCI_DEVICE_sw;                              endfunction 
    </description>
    </function>
    <function>
      <body>
        <name>is_rciep</name>
      </body>
      <description>    function bit is_rciep();
    </description>
    </function>
  </class>
  <class>
    <name>apci_doe_discovery</name>
    <description>class apci_doe_discovery</description>
    <member>
      <name>bytes</name>
      <type>bit</type>
    </member>
    <member>
      <name>dwords</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_read</name>
        </input_arg>
      </body>
      <description>    function new (string name="", bit is_read = 0);
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_power_mgmt</name>
    <description>class apci_cap_power_mgmt</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>post_randomize</name>
      </body>
      <description>    function void post_randomize();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_power_mgmt",
	         apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_pl_gen6</name>
    <description>class apci_cap_pl_gen6</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_pl_gen6",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
        <input_arg>
          <type>int</type>
          <name>max_link_width</name>
        </input_arg>
      </body>
      <description>    virtual function bit       get_cap_size(int max_link_width);
    </description>
    </function>
  </class>
  <class>
    <name>avery_pure_component</name>
    <description>class avery_pure_component</description>
    <member>
      <name>name</name>
      <type>string</type>
    </member>
    <member>
      <name>parent</name>
      <type>avery_pure_component</type>
    </member>
    <member>
      <name>avy_id</name>
      <type>int</type>
    </member>
    <member>
      <name>_flushed</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <parameter>
          <type>AVERY_UVM</type>
          <name>uvm_component</name>
        </parameter>
      </body>
      <description>    function new(
        string name,
    `ifdef AVERY_UVM
        uvm_component        parent = null
    `else
        avery_pure_component parent = null
    `endif
        );
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_dvsec</name>
    <description>class apci_cap_dvsec</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string         name  = "apci_cap_dvsec",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>reset_cap</name>
        <input_arg>
          <type>apci_rst_e</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    virtual function void reset_cap(apci_rst_e kind);                                                                                                                    
    </description>
    </function>
  </class>
  <class>
    <name>avery_param_log_base</name>
    <description>class avery_param_log_base</description>
    <member>
      <name>product_name</name>
      <type>string</type>
    </member>
    <member>
      <name>product_name_s</name>
      <type>string</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>`avery_xvm_parent</name>
        </input_arg>
      </body>
      <description>    function new(string name = "avery_param_log", `avery_xvm_parent);
    </description>
    </function>
    <function>
      <body>
        <name>merge_coverage</name>
        <input_arg>
          <type>avery_param_log_base</type>
          <name>log_base_a</name>
        </input_arg>
      </body>
      <description>    virtual function void merge_coverage (avery_param_log_base log_base_a); 
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_tph</name>
    <description>class apci_cap_tph</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>post_randomize</name>
      </body>
      <description>    function void post_randomize();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_tph",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>apci_rx_sym_uvm_port</name>
    <description>class apci_rx_sym_uvm_port</description>
    <member>
      <name>bfm</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>port_id</name>
      <type>int</type>
    </member>
    <member>
      <name>logic_lane_num</name>
      <type>int</type>
    </member>
    <member>
      <name>sym</name>
      <type>bit</type>
    </member>
    <member>
      <name>os_index</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>set</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>logic_lane_num</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>sym</name>
        </input_arg>
        <input_arg>
          <type>apci_os_type</type>
          <name>os_type</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>os_index</name>
        </input_arg>
      </body>
      <description>    function void set( apci_device  bfm		    , 
		       int	    port_id	    , 
		       int	    logic_lane_num  , 
		       bit      	    sym		    , 
		       apci_os_type os_type	    , 
		       bit      	    os_index	     );
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_set_partition_info</name>
    <description>class acxl_cmd_set_partition_info</description>
    <struct>
      <name>in</name>
      <arv>
        <name>flags</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>volatile_capacity</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_set_partition_info); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_sriov</name>
    <description>class apci_cap_sriov</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_sriov",
	         apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>collect_bar_ranges</name>
        <ref_arg>
          <type>apci_bar_t</type>
          <name>ranges</name>
        </ref_arg>
      </body>
      <description>    function void collect_bar_ranges(ref apci_bar_t ranges      );
    </description>
    </function>
    <function>
      <body>
        <name>append_all_ranges</name>
        <ref_arg>
          <type>apci_bar_t</type>
          <name>ranges</name>
        </ref_arg>
      </body>
      <description>    function void append_all_ranges(ref apci_bar_t ranges      );
    </description>
    </function>
    <function>
      <body>
        <name>get_largest_vf_allocated</name>
        <input_arg>
          <type>int</type>
          <name>pf_num</name>
        </input_arg>
      </body>
      <description>    function int get_largest_vf_allocated(int pf_num);
    </description>
    </function>
    <function>
      <body>
        <name>get_largest_vf_supported</name>
        <input_arg>
          <type>int</type>
          <name>pf_num</name>
        </input_arg>
      </body>
      <description>    function int get_largest_vf_supported(int pf_num);
    </description>
    </function>
    <function>
      <body>
        <name>get_bus_consumed_by_vf</name>
        <input_arg>
          <type>int</type>
          <name>pf_num</name>
        </input_arg>
      </body>
      <description>    function int get_bus_consumed_by_vf(int pf_num);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_secondary_pcie</name>
    <description>class apci_cap_secondary_pcie</description>
    <member>
      <name>pcie_cap</name>
      <type>apci_cap_pcie</type>
    </member>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>post_randomize</name>
      </body>
      <description>    function void post_randomize();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_secondary_pcie",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
        <input_arg>
          <type>int</type>
          <name>max_link_width</name>
        </input_arg>
      </body>
      <description>    virtual function bit       get_cap_size(int max_link_width);
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_msix</name>
    <description>class apci_cap_msix</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_msix",
	         apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>reset_cap</name>
        <input_arg>
          <type>apci_rst_e</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    virtual function void reset_cap(apci_rst_e kind);
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_cxl_mailbox_base</name>
    <description>class apci_cap_cxl_mailbox_base</description>
    <member>
      <name>payload</name>
      <type>avery_reg_field</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_cxl_mailbox_base", apci_log log = null);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();  
    </description>
    </function>
    <function>
      <body>
        <name>reset_cap</name>
        <input_arg>
          <type>apci_rst_e</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    virtual function void reset_cap(apci_rst_e kind);                                                                                                                    
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();                                                                                                                                
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_set_timestamp</name>
    <description>class acxl_cmd_set_timestamp</description>
    <struct>
      <name>in</name>
      <arv>
        <name>timestamp</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_set_timestamp); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_set_passphrase</name>
    <description>class acxl_cmd_set_passphrase</description>
    <struct>
      <name>in</name>
      <arv>
        <name>new_passphrase</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>cur_passphrase</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rsvd1</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>passphrase_type</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_set_passphrase); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_resizable_bar</name>
    <description>class apci_cap_resizable_bar</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_resizable_bar",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>acxl_seq_cacheline_to_UC</name>
    <description>class acxl_seq_cacheline_to_UC</description>
    <member>
      <name>cline_addr</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_testcase_base</type>
          <name>testcase</name>
        </input_arg>
      </body>
      <description>    function new(apci_device bfm,  apci_testcase_base testcase = null);
    </description>
    </function>
    <task>
      <body>
        <name>run</name>
      </body>
      <description>    virtual task run();
    </description>
    </task>
  </class>
  <class>
    <name>avery_seq_base</name>
    <description>class avery_seq_base</description>
    <task>
      <body>
        <name>run</name>
      </body>
      <description>    virtual task run();
    </description>
    </task>
  </class>
  <class>
    <name>apci_mmh_list</name>
    <description>class apci_mmh_list</description>
    <member>
      <name>log</name>
      <type>apci_log</type>
    </member>
    <member>
      <name>port_id</name>
      <type>bit</type>
    </member>
    <member>
      <name>func_id</name>
      <type>bit</type>
    </member>
    <member>
      <name>bar_id</name>
      <type>bit</type>
    </member>
    <member>
      <name>q</name>
      <type>apci_mm_handler</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>func_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>bar_id</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    function new(int port_id, int func_id, int bar_id, apci_log log);
    </description>
    </function>
    <function>
      <body>
        <name>delete</name>
        <input_arg>
          <type>apci_mm_handler</type>
          <name>h</name>
        </input_arg>
      </body>
      <description>    function void delete(apci_mm_handler h);
    </description>
    </function>
    <function>
      <body>
        <name>check_overlap</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    function void check_overlap(string msg = "");
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    virtual function string sprint(int verbosity = 0, string prefix="");
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_frs_q</name>
    <description>class apci_cap_frs_q</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);                                                                                                                 
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();  
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_frs_q",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>acxl_seq_cacheline_to_UD</name>
    <description>class acxl_seq_cacheline_to_UD</description>
    <member>
      <name>cline_addr</name>
      <type>bit</type>
    </member>
    <member>
      <name>modify_full_line</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_testcase_base</type>
          <name>testcase</name>
        </input_arg>
      </body>
      <description>    function new(apci_device bfm,  apci_testcase_base testcase = null);
    </description>
    </function>
    <task>
      <body>
        <name>run</name>
      </body>
      <description>    virtual task run();
    </description>
    </task>
  </class>
  <class>
    <name>apci_assertion_item</name>
    <description>class apci_assertion_item</description>
    <struct>
      <name>dut_type</name>
      <arv>
        <name>rc</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>ep</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>sw</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>up</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>dp</name>
        <type>bit</type>
      </arv>
    </struct>
    <member>
      <name>idname</name>
      <type>string</type>
    </member>
    <member>
      <name>description</name>
      <type>string</type>
    </member>
    <member>
      <name>no_checker</name>
      <type>bit</type>
    </member>
    <member>
      <name>cvg_cnt</name>
      <type>int</type>
    </member>
    <member>
      <name>fire_cnt</name>
      <type>int</type>
    </member>
    <member>
      <name>err_cnt</name>
      <type>int</type>
    </member>
    <member>
      <name>lock_</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>avery_severity</type>
          <name>severity</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>dut_type</name>
        </input_arg>
        <input_arg>
          <type>apci_chklist_id_e</type>
          <name>id</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>des</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>idname</name>
        </input_arg>
      </body>
      <description>    function new (
	    avery_severity      severity,
	    bit                 dut_type,   
	    apci_chklist_id_e  id = APCI_chklist_id_begin,
	    string             des = "",
	    string             idname = ""
	);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
      </body>
      <description>    function string sprint(int verbosity = 0);
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_set_lsa</name>
    <description>class acxl_cmd_set_lsa</description>
    <struct>
      <name>in</name>
      <arv>
        <name>rsvd4</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>offset</name>
        <type>bit</type>
      </arv>
    </struct>
    <member>
      <name>in_data</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_set_lsa); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_power_budget</name>
    <description>class apci_cap_power_budget</description>
    <member>
      <name>ext_pwr_bdg_sup</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_power_budget",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>acxl_seq_util</name>
    <description>class acxl_seq_util</description>
    <member>
      <name>ok</name>
      <type>bit</type>
    </member>
    <member>
      <name>dev_type</name>
      <type>int</type>
    </member>
    <member>
      <name>dut_dev_type</name>
      <type>int</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_device</type>
          <name>rc_app_bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_device</type>
          <name>target</name>
        </input_arg>
        <input_arg>
          <type>apci_testcase_base</type>
          <name>testcase</name>
        </input_arg>
      </body>
      <description>    function new(apci_device bfm, apci_device rc_app_bfm = null, apci_device target = null, apci_testcase_base testcase = null);
    </description>
    </function>
    <task>
      <body>
        <name>wait_hdm_ready</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>hdm_bdf</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>host_addr</name>
        </output_arg>
        <output_arg>
          <type>bit</type>
          <name>hdm_addr</name>
        </output_arg>
        <output_arg>
          <type>bit</type>
          <name>hdm_len</name>
        </output_arg>
      </body>
      <description>    virtual task wait_hdm_ready (
	    input  apci_bdf_t  hdm_bdf,
	    output bit         host_addr,
	    output bit         hdm_addr,
	    output bit         hdm_len);
    </description>
    </task>
    <task>
      <body>
        <name>write0</name>
        <input_arg>
          <type>bit</type>
          <name>cline_addr</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>ndw</name>
        </input_arg>
        <output_arg>
          <type>apci_transaction</type>
          <name>tr</name>
        </output_arg>
        <input_arg>
          <type>bit</type>
          <name>first_byte_en</name>
        </input_arg>
        <input_arg>
          <type>byte</type>
          <name>wr_alloc</name>
        </input_arg>
      </body>
      <description>    task write0(        bit              cline_addr,
                        int              ndw       ,
                 output apci_transaction tr        ,
                 input  bit               first_byte_en = 4'hf,
                 input  byte             wr_alloc   = -1 );
    </description>
    </task>
    <task>
      <body>
        <name>read0</name>
        <input_arg>
          <type>bit</type>
          <name>cline_addr</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>ndw</name>
        </input_arg>
        <input_arg>
          <type>apci_transaction</type>
          <name>tr_golden</name>
        </input_arg>
      </body>
      <description>    task read0 (bit       cline_addr, int ndw, apci_transaction tr_golden = null);
    </description>
    </task>
    <task>
      <body>
        <name>read_full_line</name>
        <input_arg>
          <type>bit</type>
          <name>cline_addr</name>
        </input_arg>
        <input_arg>
          <type>acxl_d2h_req_opcode_e</type>
          <name>code</name>
        </input_arg>
      </body>
      <description>    task automatic read_full_line(bit       cline_addr, acxl_d2h_req_opcode_e code); 
    </description>
    </task>
    <task>
      <body>
        <name>evict_all_cachelines</name>
      </body>
      <description>    task evict_all_cachelines();
    </description>
    </task>
    <task>
      <body>
        <name>cxl_io_traffic</name>
        <input_arg>
          <type>int</type>
          <name>user_len</name>
        </input_arg>
      </body>
      <description>    task cxl_io_traffic(input int user_len       = {});
    </description>
    </task>
    <task>
      <body>
        <name>wait_d2h_req_msg</name>
        <input_arg>
          <type>acxl_d2h_req_opcode_e</type>
          <name>kind</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <output_arg>
          <type>acxl_msg</type>
          <name>m</name>
        </output_arg>
        <input_arg>
          <type>string</type>
          <name>dbg</name>
        </input_arg>
      </body>
      <description>    virtual task wait_d2h_req_msg (acxl_d2h_req_opcode_e kind, time timer = 0, output acxl_msg m, input string dbg="");
    </description>
    </task>
    <task>
      <body>
        <name>wait_d2h_rsp_by_uqid</name>
        <input_arg>
          <type>int</type>
          <name>uqid</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <output_arg>
          <type>acxl_msg</type>
          <name>m</name>
        </output_arg>
        <input_arg>
          <type>string</type>
          <name>dbg</name>
        </input_arg>
      </body>
      <description>    virtual task wait_d2h_rsp_by_uqid(int uqid, time timer = 0, output acxl_msg m, input string dbg = "");
    </description>
    </task>
    <task>
      <body>
        <name>wait_d2h_rsp_msg</name>
        <input_arg>
          <type>string</type>
          <name>kind</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <output_arg>
          <type>acxl_msg</type>
          <name>m</name>
        </output_arg>
        <input_arg>
          <type>string</type>
          <name>dbg</name>
        </input_arg>
      </body>
      <description>    virtual task wait_d2h_rsp_msg (string kind = "any", time timer = 0, output acxl_msg m, input string dbg = "");
    </description>
    </task>
    <task>
      <body>
        <name>wait_s2m_msg</name>
        <input_arg>
          <type>string</type>
          <name>kind</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <output_arg>
          <type>acxl_msg</type>
          <name>m</name>
        </output_arg>
        <input_arg>
          <type>string</type>
          <name>dbg</name>
        </input_arg>
      </body>
      <description>    virtual task wait_s2m_msg (string kind = "any", time timer = 0, output acxl_msg m, input string dbg = "");
    </description>
    </task>
    <task>
      <body>
        <name>configure_link_for_IDE</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>link_bdf</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>disable_pcrc</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
      </body>
      <description>    virtual task configure_link_for_IDE (apci_func_info link_bdf, bit disable_pcrc, output bit err);
    </description>
    </task>
    <task>
      <body>
        <name>clear_RAS_err_masks</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>finf</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
      </body>
      <description>    task clear_RAS_err_masks(apci_func_info finf, output bit err);
    </description>
    </task>
    <task>
      <body>
        <name>do_cxl_reset</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>tgt_func</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>delay</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>na</name>
        </output_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
      </body>
      <description>    task do_cxl_reset(apci_func_info tgt_func, time delay = 10us, output bit na, output bit err);
    </description>
    </task>
  </class>
  <class>
    <name>acxl_callbacks</name>
    <description>class acxl_callbacks</description>
    <function>
      <body>
        <name>tx_create_cxl_msg</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>acxl_msg</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    virtual function void tx_create_cxl_msg(
	    input apci_device   bfm,
	    input acxl_msg      msg
	);
    </description>
    </function>
    <function>
      <body>
        <name>tx_cxl_msg_exit_tl</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>acxl_msg</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    virtual function void tx_cxl_msg_exit_tl(
	    input apci_device      bfm,
	    input acxl_msg         msg 
	);	return;
    </description>
    </function>
    <function>
      <body>
        <name>tx_flit_before_encrypt</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>acxl_flit</type>
          <name>flit</name>
        </input_arg>
      </body>
      <description>    virtual function void tx_flit_before_encrypt(
	    apci_device   bfm,
	    acxl_flit     flit 
	);
    </description>
    </function>
    <function>
      <body>
        <name>tx_ide_mac_epoch_created</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>acxl_flit</type>
          <name>last_flit</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>truncated</name>
        </input_arg>
      </body>
      <description>    virtual function void tx_ide_mac_epoch_created(
	    apci_device   bfm,
	    acxl_flit     last_flit,
	    bit           truncated
	);
    </description>
    </function>
    <function>
      <body>
        <name>tx_flit_exit_dll</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>acxl_flit</type>
          <name>flit</name>
        </input_arg>
      </body>
      <description>    virtual function void tx_flit_exit_dll(
	    apci_device   bfm,
	    acxl_flit     flit 
	);
    </description>
    </function>
    <function>
      <body>
        <name>tx_flit_exit_arbmux</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>acxl_flit</type>
          <name>flit</name>
        </input_arg>
      </body>
      <description>    virtual function void tx_flit_exit_arbmux(
	    apci_device   bfm,
	    acxl_flit     flit 
	);
    </description>
    </function>
    <function>
      <body>
        <name>tx_flit_exit_mac</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>acxl_flit</type>
          <name>flit</name>
        </input_arg>
      </body>
      <description>    virtual function void tx_flit_exit_mac(
	    apci_device   bfm,
	    acxl_flit     flit 
	);
    </description>
    </function>
    <function>
      <body>
        <name>rx_flit_enter_mac</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>acxl_flit</type>
          <name>flit</name>
        </input_arg>
      </body>
      <description>    virtual function void rx_flit_enter_mac(
	    apci_device  bfm,
	    acxl_flit    flit
	);
    </description>
    </function>
    <function>
      <body>
        <name>rx_flit_enter_arbmux</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>acxl_flit</type>
          <name>flit</name>
        </input_arg>
      </body>
      <description>    virtual function void rx_flit_enter_arbmux(
	    apci_device  bfm,
	    acxl_flit    flit
	);
    </description>
    </function>
    <function>
      <body>
        <name>rx_flit_enter_dll</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>acxl_flit</type>
          <name>flit</name>
        </input_arg>
      </body>
      <description>    virtual function void rx_flit_enter_dll(
	    apci_device  bfm,
	    acxl_flit    flit
	);
    </description>
    </function>
    <function>
      <body>
        <name>rx_flit_after_decrypt</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>acxl_flit</type>
          <name>flit</name>
        </input_arg>
      </body>
      <description>    virtual function void rx_flit_after_decrypt(
	    apci_device  bfm,
	    acxl_flit    flit
	);
    </description>
    </function>
    <function>
      <body>
        <name>rx_cxl_msg_enter_tl</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>acxl_msg</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    virtual function void rx_cxl_msg_enter_tl(
	    input apci_device      bfm,
	    input acxl_msg         msg 
	);
    </description>
    </function>
    <function>
      <body>
        <name>read_mem_line_cb</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
        <ref_arg>
          <type>bit</type>
          <name>bytes</name>
        </ref_arg>
        <input_arg>
          <type>avery_data_base</type>
          <name>src</name>
        </input_arg>
      </body>
      <description>    virtual function void read_mem_line_cb(
	    input bit               addr        ,
	    ref   bit               bytes           ,
	    input avery_data_base   src = null
	);	
    </description>
    </function>
    <function>
      <body>
        <name>write_mem_line_cb</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>byte_enable</name>
        </input_arg>
        <ref_arg>
          <type>bit</type>
          <name>bytes</name>
        </ref_arg>
        <input_arg>
          <type>avery_data_base</type>
          <name>src</name>
        </input_arg>
      </body>
      <description>    virtual function void write_mem_line_cb(
            input bit               addr        ,
            input bit               byte_enable ,
	    ref   bit               bytes           ,
	    input avery_data_base   src = null       
	);	
    </description>
    </function>
  </class>
  <class>
    <name>apci_testcase_container</name>
    <description>class apci_testcase_container</description>
    <member>
      <name>q</name>
      <type>apci_testcase_base</type>
    </member>
  </class>
  <class>
    <name>apci_cap_device_serial</name>
    <description>class apci_cap_device_serial</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_device_serial",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>apci_tlp</name>
    <description>class apci_tlp</description>
    <member>
      <name>payload</name>
      <type>bit</type>
    </member>
    <member>
      <name>ecrc</name>
      <type>bit</type>
    </member>
    <member>
      <name>multi_proto</name>
      <type>bit</type>
    </member>
    <member>
      <name>seq_num</name>
      <type>bit</type>
    </member>
    <member>
      <name>lcrc</name>
      <type>bit</type>
    </member>
    <member>
      <name>ide_mac</name>
      <type>bit</type>
    </member>
    <member>
      <name>decrypted_payload</name>
      <type>bit</type>
    </member>
    <member>
      <name>encrypted_payload</name>
      <type>bit</type>
    </member>
    <member>
      <name>pcrc</name>
      <type>bit</type>
    </member>
    <member>
      <name>original_pcrc</name>
      <type>bit</type>
    </member>
    <member>
      <name>rx_nullified</name>
      <type>bit</type>
    </member>
    <member>
      <name>rx_cpls</name>
      <type>apci_tlp</type>
    </member>
    <member>
      <name>req</name>
      <type>apci_tlp</type>
    </member>
    <member>
      <name>byte_cnt_done</name>
      <type>int</type>
    </member>
    <struct>
      <name>is_ccix</name>
      <arv>
        <name>compliant</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>optimized</name>
        <type>bit</type>
      </arv>
    </struct>
    <member>
      <name>rand_max_len</name>
      <type>bit</type>
    </member>
    <member>
      <name>rand_ph</name>
      <type>bit</type>
    </member>
    <member>
      <name>rand_at</name>
      <type>bit</type>
    </member>
    <member>
      <name>rand_attr</name>
      <type>bit</type>
    </member>
    <member>
      <name>cpl_status</name>
      <type>bit</type>
    </member>
    <member>
      <name>_is_mem</name>
      <type>bit</type>
    </member>
    <member>
      <name>_is_io</name>
      <type>bit</type>
    </member>
    <member>
      <name>_is_cfg</name>
      <type>bit</type>
    </member>
    <member>
      <name>_is_msg</name>
      <type>bit</type>
    </member>
    <member>
      <name>_is_cpl</name>
      <type>bit</type>
    </member>
    <member>
      <name>_is_mem64</name>
      <type>bit</type>
    </member>
    <member>
      <name>_is_mem32</name>
      <type>bit</type>
    </member>
    <member>
      <name>_is_atomic</name>
      <type>bit</type>
    </member>
    <member>
      <name>_req_len_aux</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <parameter>
          <type>apci_tlp_type</type>
          <name>kind</name>
        </parameter>
      </body>
      <description>    extern function new(`avery_strname  apci_tlp_type kind = APCI_TLP_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>pre_randomize</name>
      </body>
      <description>    function void pre_randomize(); endfunction
    </description>
    </function>
    <function>
      <body>
        <name>copy</name>
        <input_arg>
          <type>apci_tlp</type>
          <name>to</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>level</name>
        </input_arg>
      </body>
      <description>    extern function apci_tlp copy  (apci_tlp to = null, int level = -1);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern function string   sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <function>
      <body>
        <name>compare</name>
        <input_arg>
          <type>apci_tlp</type>
          <name>to</name>
        </input_arg>
        <ref_arg>
          <type>string</type>
          <name>diff</name>
        </ref_arg>
      </body>
      <description>    extern function bit compare(apci_tlp to, ref string diff);
    </description>
    </function>
    <function>
      <body>
        <name>decode_kind</name>
      </body>
      <description>    extern virtual function void decode_kind();
    </description>
    </function>
    <function>
      <body>
        <name>rehash_ecrc</name>
      </body>
      <description>    extern virtual function void rehash_ecrc();
    </description>
    </function>
    <function>
      <body>
        <name>cpl_is_last_split</name>
      </body>
      <description>    extern virtual function bit cpl_is_last_split();
    </description>
    </function>
    <function>
      <body>
        <name>ide_encrypt</name>
        <input_arg>
          <type>bit</type>
          <name>is_link_stream</name>
        </input_arg>
        <ref_arg>
          <type>avery_aesgcm</type>
          <name>aesgcm</name>
        </ref_arg>
      </body>
      <description>    extern function void ide_encrypt(bit is_link_stream, ref avery_aesgcm aesgcm);
    </description>
    </function>
    <function>
      <body>
        <name>ide_decrypt</name>
        <input_arg>
          <type>bit</type>
          <name>is_link_stream</name>
        </input_arg>
        <ref_arg>
          <type>avery_aesgcm</type>
          <name>aesgcm</name>
        </ref_arg>
      </body>
      <description>    extern function int ide_decrypt(bit is_link_stream, ref avery_aesgcm aesgcm);
    </description>
    </function>
    <function>
      <body>
        <name>rehash_ide_pcrc</name>
      </body>
      <description>    extern function avery_u32 rehash_ide_pcrc();
    </description>
    </function>
    <function>
      <body>
        <name>is_4header</name>
      </body>
      <description>    function bit is_4header();   return (u.com.fmt       &amp;&amp; kind != APCI_TLP_vendor_p &amp;&amp; is_ccix.optimized == 0); endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_mem</name>
      </body>
      <description>    function bit is_mem();       return kind inside {APCI_TLP_mrd, APCI_TLP_mrdlk, APCI_TLP_mwr,
    </description>
    </function>
    <function>
      <body>
        <name>is_pure_mem</name>
      </body>
      <description>    function bit is_pure_mem();  return kind inside {APCI_TLP_mrd, APCI_TLP_mrdlk, APCI_TLP_mwr, APCI_TLP_dmwr}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_io</name>
      </body>
      <description>    function bit is_io();        return kind inside {APCI_TLP_iord, APCI_TLP_iowr};  endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_cfg</name>
      </body>
      <description>    function bit is_cfg();       return kind inside {APCI_TLP_cfgrd, APCI_TLP_cfgwr, APCI_TLP_cfgrd0, APCI_TLP_cfgwr0, APCI_TLP_cfgrd1, APCI_TLP_cfgwr1}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_msg</name>
      </body>
      <description>    function bit is_msg();       return kind inside {APCI_TLP_msg, APCI_TLP_msgd}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_cpl</name>
      </body>
      <description>    function bit is_cpl();       return kind inside {APCI_TLP_cpl, APCI_TLP_cpld, APCI_TLP_cpllk, APCI_TLP_cpldlk}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_type1_cfg</name>
      </body>
      <description>    function bit is_type1_cfg(); return kind inside {APCI_TLP_cfgrd1, APCI_TLP_cfgwr1}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_cpl_nd</name>
      </body>
      <description>    function bit is_cpl_nd();    return kind inside {APCI_TLP_cpl,  APCI_TLP_cpllk}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_cpld</name>
      </body>
      <description>    function bit is_cpld();      return kind inside {APCI_TLP_cpld, APCI_TLP_cpldlk}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_mem_rd</name>
      </body>
      <description>    function bit is_mem_rd();    return kind inside {APCI_TLP_mrd,  APCI_TLP_mrdlk}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_mem_wr</name>
      </body>
      <description>    function bit is_mem_wr();    return kind inside {APCI_TLP_mwr, APCI_TLP_dmwr}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_deferred_mem_wr</name>
      </body>
      <description>    function bit is_deferred_mem_wr();    return kind == APCI_TLP_dmwr; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_io_rd</name>
      </body>
      <description>    function bit is_io_rd();     return kind inside {APCI_TLP_iord}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_atomic</name>
      </body>
      <description>    function bit is_atomic();    return kind inside {APCI_TLP_fetchadd, APCI_TLP_swap, APCI_TLP_cas}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_posted</name>
      </body>
      <description>    function bit is_posted();    return(kind inside {APCI_TLP_mwr, APCI_TLP_vendor_p}) || is_msg() || is_ccix; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_non_posted</name>
      </body>
      <description>    function bit is_non_posted();return !is_posted &amp;&amp; !is_cpl(); endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_request</name>
      </body>
      <description>    function bit is_request();   return !is_cpl(); endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_np_read</name>
      </body>
      <description>    function bit is_np_read();   return kind inside {APCI_TLP_mrd,  APCI_TLP_mrdlk,
    </description>
    </function>
    <function>
      <body>
        <name>is_np_write</name>
      </body>
      <description>    function bit is_np_write();  return kind inside {APCI_TLP_iowr, APCI_TLP_cfgwr0, APCI_TLP_cfgwr1 , APCI_TLP_tcfgwr,
    </description>
    </function>
    <function>
      <body>
        <name>is_relaxed_order</name>
      </body>
      <description>    function bit is_relaxed_order(); return u.com.attr      ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_id_based_order</name>
      </body>
      <description>    function bit is_id_based_order();return u.com.attr2; endfunction       </description>
    </function>
    <function>
      <body>
        <name>is_ats_request</name>
      </body>
      <description>    function bit is_ats_request(); return kind == APCI_TLP_mrd &amp;&amp; get_at() == 1; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_ats_invalidate</name>
      </body>
      <description>    function bit is_ats_invalidate(); return kind == APCI_TLP_msgd &amp;&amp; get_msg_code() == APCI_MSG_ats_invalidate; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_ats_invalidate_cpl</name>
      </body>
      <description>    function bit is_ats_invalidate_cpl(); return kind == APCI_TLP_msg &amp;&amp; get_msg_code() == APCI_MSG_ats_invalidate_cpl; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_ats_page_req</name>
      </body>
      <description>    function bit is_ats_page_req(); return kind == APCI_TLP_msg &amp;&amp; get_msg_code() == APCI_MSG_ats_page_request; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_ats_prg_response</name>
      </body>
      <description>    function bit is_ats_prg_response(); return kind == APCI_TLP_msg &amp;&amp; get_msg_code() == APCI_MSG_ats_prg_response; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_set_slot_power_limit</name>
      </body>
      <description>    function bit is_set_slot_power_limit(); return kind == APCI_TLP_msgd &amp;&amp; get_msg_code() == APCI_MSG_set_slot_power_limit; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_poisoned</name>
      </body>
      <description>    function bit is_poisoned(); return u.com.ep; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_vendor_p</name>
      </body>
      <description>    function bit is_vendor_p(); return kind == APCI_TLP_vendor_p; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_zero_length_write</name>
      </body>
      <description>    function bit is_zero_length_write(); return this.get_first_be == 0 &amp;&amp; this.get_last_be == 0 &amp;&amp; this.get_length_dw == 1; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_ptm_msg</name>
      </body>
      <description>    function bit is_ptm_msg(); return is_msg() &amp;&amp; get_msg_code() inside {APCI_MSG_ptm_req, APCI_MSG_ptm_resp}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_ide_sync_msg</name>
      </body>
      <description>    function bit is_ide_sync_msg(); return is_msg() &amp;&amp; get_msg_code() == APCI_MSG_ide_sync; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>has_ecrc</name>
      </body>
      <description>    function bit has_ecrc();     return (u.com.td || (is_flit_mode &amp;&amp; u.fm_com.ts == 3'b001)); endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_mem</name>
      </body>
      <description>    function bit is_mem64;    return is_mem() &amp;&amp; u.com.fmt      ;  endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_mem</name>
      </body>
      <description>    function bit is_mem32;    return is_mem() &amp;&amp; !u.com.fmt      ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>has_data</name>
      </body>
      <description>    function bit has_data();  return is_write(); endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_write</name>
      </body>
      <description>    extern function bit is_write();  
    </description>
    </function>
    <function>
      <body>
        <name>is_cross4k</name>
      </body>
      <description>    function bit is_cross4k();
    </description>
    </function>
    <function>
      <body>
        <name>this.get_cpl_status</name>
      </body>
      <description>    function bit cpl_is_ok; return this.get_cpl_status() == 0; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>get_steering_tag</name>
      </body>
      <description>    function bit       get_steering_tag(); 
    </description>
    </function>
    <function>
      <body>
        <name>set_steering_tag</name>
        <input_arg>
          <type>bit</type>
          <name>steering_tag</name>
        </input_arg>
      </body>
      <description>    function void set_steering_tag(bit       steering_tag);
    </description>
    </function>
    <function>
      <body>
        <name>be_is_steering_tag</name>
      </body>
      <description>    function bit be_is_steering_tag();
    </description>
    </function>
    <function>
      <body>
        <name>get_tag</name>
      </body>
      <description>    function bit       get_tag();
    </description>
    </function>
    <function>
      <body>
        <name>set_tag</name>
        <input_arg>
          <type>bit</type>
          <name>tag</name>
        </input_arg>
      </body>
      <description>    function void set_tag(bit       tag);
    </description>
    </function>
    <function>
      <body>
        <name>get_first_be</name>
      </body>
      <description>    function bit       get_first_be();
    </description>
    </function>
    <function>
      <body>
        <name>set_first_be</name>
        <input_arg>
          <type>bit</type>
          <name>fbe</name>
        </input_arg>
      </body>
      <description>    function void set_first_be(bit       fbe);
    </description>
    </function>
    <function>
      <body>
        <name>get_last_be</name>
      </body>
      <description>    function bit       get_last_be();
    </description>
    </function>
    <function>
      <body>
        <name>set_last_be</name>
        <input_arg>
          <type>bit</type>
          <name>lbe</name>
        </input_arg>
      </body>
      <description>    function void set_last_be(bit       lbe);
    </description>
    </function>
    <function>
      <body>
        <name>get_rid</name>
      </body>
      <description>    function bit       get_rid();
    </description>
    </function>
    <function>
      <body>
        <name>get_tid</name>
        <input_arg>
          <type>bit</type>
          <name>is_10bit_tag</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_14bit_tag</name>
        </input_arg>
      </body>
      <description>    function bit       get_tid(bit is_10bit_tag = 1, bit is_14bit_tag = 0);
    </description>
    </function>
    <function>
      <body>
        <name>set_tid</name>
        <input_arg>
          <type>bit</type>
          <name>tid</name>
        </input_arg>
      </body>
      <description>    function void set_tid(bit       tid);
    </description>
    </function>
    <function>
      <body>
        <name>get_length_dw</name>
      </body>
      <description>    function avery_u32 get_length_dw();
    </description>
    </function>
    <function>
      <body>
        <name>rehash_frame_crc_parity</name>
      </body>
      <description>    extern virtual function void rehash_frame_crc_parity();
    </description>
    </function>
    <function>
      <body>
        <name>get_replay_cnt</name>
      </body>
      <description>    extern virtual function int get_replay_cnt();
    </description>
    </function>
    <function>
      <body>
        <name>enable_ecrc_gen</name>
        <input_arg>
          <type>bit</type>
          <name>en_ecrc</name>
        </input_arg>
      </body>
      <description>    extern virtual function void enable_ecrc_gen(bit en_ecrc);
    </description>
    </function>
    <function>
      <body>
        <name>set_byte_cnt</name>
        <input_arg>
          <type>bit</type>
          <name>byte_cnt</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_byte_cnt(bit       byte_cnt);
    </description>
    </function>
    <function>
      <body>
        <name>get_byte_cnt</name>
      </body>
      <description>    extern virtual function bit       get_byte_cnt(); 
    </description>
    </function>
    <function>
      <body>
        <name>set_low_addr</name>
        <input_arg>
          <type>bit</type>
          <name>low_addr</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_low_addr(bit       low_addr);
    </description>
    </function>
    <function>
      <body>
        <name>get_low_addr</name>
      </body>
      <description>    extern virtual function bit       get_low_addr();
    </description>
    </function>
    <function>
      <body>
        <name>set_cpl_status</name>
        <input_arg>
          <type>bit</type>
          <name>cpl_status</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_cpl_status(bit       cpl_status);
    </description>
    </function>
    <function>
      <body>
        <name>get_cpl_status</name>
      </body>
      <description>    extern virtual function bit       get_cpl_status();
    </description>
    </function>
    <function>
      <body>
        <name>set_attr</name>
        <input_arg>
          <type>bit</type>
          <name>attr</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_attr(bit       attr);
    </description>
    </function>
    <function>
      <body>
        <name>get_attr</name>
      </body>
      <description>    extern virtual function bit       get_attr();
    </description>
    </function>
    <function>
      <body>
        <name>set_msg_code</name>
        <input_arg>
          <type>bit</type>
          <name>msg_code</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_msg_code(bit       msg_code);
    </description>
    </function>
    <function>
      <body>
        <name>get_msg_code</name>
      </body>
      <description>    extern virtual function bit       get_msg_code();
    </description>
    </function>
    <function>
      <body>
        <name>set_tc</name>
        <input_arg>
          <type>bit</type>
          <name>tc</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_tc(bit       tc);  
    </description>
    </function>
    <function>
      <body>
        <name>get_tc</name>
      </body>
      <description>    extern virtual function bit       get_tc();
    </description>
    </function>
    <function>
      <body>
        <name>set_ph</name>
        <input_arg>
          <type>bit</type>
          <name>ph</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_ph(bit       ph);
    </description>
    </function>
    <function>
      <body>
        <name>get_ph</name>
      </body>
      <description>    extern virtual function bit       get_ph(); 
    </description>
    </function>
    <function>
      <body>
        <name>set_at</name>
        <input_arg>
          <type>bit</type>
          <name>at</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_at(bit       at);
    </description>
    </function>
    <function>
      <body>
        <name>get_at</name>
      </body>
      <description>    extern virtual function bit       get_at();
    </description>
    </function>
    <function>
      <body>
        <name>set_cpl_id</name>
        <input_arg>
          <type>bit</type>
          <name>cpl_id</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_cpl_id(bit       cpl_id);
    </description>
    </function>
    <function>
      <body>
        <name>get_cpl_id</name>
      </body>
      <description>    extern virtual function bit       get_cpl_id();
    </description>
    </function>
    <function>
      <body>
        <name>set_req_id</name>
        <input_arg>
          <type>bit</type>
          <name>req_id</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_req_id(bit       req_id);
    </description>
    </function>
    <function>
      <body>
        <name>get_req_id</name>
      </body>
      <description>    extern virtual function bit       get_req_id();
    </description>
    </function>
    <function>
      <body>
        <name>post_randomize</name>
      </body>
      <description>    function void post_randomize();
    </description>
    </function>
    <function>
      <body>
        <name>is_ide_tlp</name>
      </body>
      <description>    function bit is_ide_tlp();
    </description>
    </function>
    <function>
      <body>
        <name>get_ide_prefix</name>
      </body>
      <description>    function apci_tlp_prefix_u get_ide_prefix();
    </description>
    </function>
    <function>
      <body>
        <name>set_ide_pr_sent_count</name>
        <input_arg>
          <type>bit</type>
          <name>pr_sent_cnt</name>
        </input_arg>
      </body>
      <description>    function void set_ide_pr_sent_count(bit       pr_sent_cnt);
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_flit_performance_measure</name>
    <description>class apci_cap_flit_performance_measure</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_flit_performance_measure",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_dvsec_cxl_mld</name>
    <description>class apci_cap_dvsec_cxl_mld</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_dvsec_cxl_mld",
		 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_fpb</name>
    <description>class apci_cap_fpb</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_fpb",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_get_security_state</name>
    <description>class acxl_cmd_get_security_state</description>
    <struct>
      <name>out</name>
      <arv>
        <name>security_state</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_get_security_state); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_cxl_dev_status</name>
    <description>class apci_cap_cxl_dev_status</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_cxl_dev_status", apci_log log = null);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>get_avery_cap_id</name>
      </body>
      <description>    virtual function int get_avery_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>reset_cap</name>
        <input_arg>
          <type>apci_rst_e</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    virtual function void reset_cap(apci_rst_e kind);                                                                                                                    
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_device3</name>
    <description>class apci_cap_device3</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_device3",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_get_scan_media_cap</name>
    <description>class acxl_cmd_get_scan_media_cap</description>
    <struct>
      <name>in</name>
      <arv>
        <name>physical_addr_len</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>physical_addr</name>
        <type>bit</type>
      </arv>
    </struct>
    <struct>
      <name>out</name>
      <arv>
        <name>estimated_scan_media_time</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_get_scan_media_cap); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_callbacks_base</name>
    <description>class apci_callbacks_base</description>
    <member>
      <name>port_id</name>
      <type>int</type>
    </member>
  </class>
  <class>
    <name>apci_cap_cxl_snoop_filter</name>
    <description>class apci_cap_cxl_snoop_filter</description>
    <member>
      <name>log</name>
      <type>apci_log</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_cxl_snoop_filter", apci_log log = null);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>reset_cap</name>
        <input_arg>
          <type>apci_rst_e</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    virtual function void reset_cap(apci_rst_e kind);                                                                                                                    
    </description>
    </function>
  </class>
  <class>
    <name>acxl_doe_compliance</name>
    <description>class acxl_doe_compliance</description>
    <member>
      <name>bytes</name>
      <type>bit</type>
    </member>
    <member>
      <name>dwords</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_read</name>
        </input_arg>
        <input_arg>
          <type>acxl_doe_compliance_e</type>
          <name>sub_kind</name>
        </input_arg>
      </body>
      <description>    function new (string name="", bit is_read = 0, acxl_doe_compliance_e sub_kind = ACXL_DOE_compliance_unknown);
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_passphrase_secure_erase</name>
    <description>class acxl_cmd_passphrase_secure_erase</description>
    <struct>
      <name>in</name>
      <arv>
        <name>cur_passphrase</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rsvd1</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>passphrase_type</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_passphrase_secure_erase); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_vf_resizable_bar</name>
    <description>class apci_cap_vf_resizable_bar</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_resizable_bar",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>apci_capability</name>
    <description>class apci_capability</description>
    <member>
      <name>ext_space</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_mmio</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_vf</name>
      <type>bit</type>
    </member>
    <member>
      <name>func_no</name>
      <type>int</type>
    </member>
    <member>
      <name>speed_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>cfg_info</name>
      <type>apci_cfg_info</type>
    </member>
    <member>
      <name>is_any_ep</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_dn_port</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_up_port</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_sw_port</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_br</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_capability");
    </description>
    </function>
    <function>
      <body>
        <name>write</name>
        <input_arg>
          <type>int</type>
          <name>reg_no</name>
        </input_arg>
        <input_arg>
          <type>avery_u32</type>
          <name>v</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>byte_enable</name>
        </input_arg>
      </body>
      <description>    extern virtual function void write(int reg_no, avery_u32 v, bit       byte_enable);
    </description>
    </function>
    <function>
      <body>
        <name>read</name>
        <input_arg>
          <type>int</type>
          <name>reg_no</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>byte_enable</name>
        </input_arg>
      </body>
      <description>    extern virtual function avery_u32 read (int reg_no, bit       byte_enable);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern virtual function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <function>
      <body>
        <name>configure</name>
        <input_arg>
          <type>bit</type>
          <name>is_vf</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>func_no</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>speed_sup</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>n_dwords</name>
        </input_arg>
        <input_arg>
          <type>apci_cfg_info</type>
          <name>cfg_info</name>
        </input_arg>
      </body>
      <description>    function void configure( bit            is_vf       =  0,
			     int            func_no     = -1,
                             apci_port_type ptype       = APCI_PORT_unknown,
                             bit             speed_sup   = -1,
                             int            n_dwords    =  0,
			     apci_cfg_info  cfg_info    =  null
			 );
    </description>
    </function>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>bit</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(bit       v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
  </class>
  <class>
    <name>apci_seq_common</name>
    <description>class apci_seq_common</description>
    <member>
      <name>rc</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>bfm</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>target</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>log</name>
      <type>apci_log</type>
    </member>
    <member>
      <name>ok</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_background</name>
      <type>bit</type>
    </member>
    <member>
      <name>force_foreground</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_done</name>
      <type>bit</type>
    </member>
    <member>
      <name>s</name>
      <type>string</type>
    </member>
    <member>
      <name>scope</name>
      <type>string</type>
    </member>
    <member>
      <name>seq_failed</name>
      <type>bit</type>
    </member>
    <member>
      <name>seq_id</name>
      <type>int</type>
    </member>
    <member>
      <name>_info_history</name>
      <type>string</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_device</type>
          <name>rc_app_bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_device</type>
          <name>target</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>scope</name>
        </input_arg>
      </body>
      <description>    function new (apci_device bfm	    = null, 
		  apci_device rc_app_bfm    = null, 
		  apci_device target	    = null, 
		  string scope = "");
    </description>
    </function>
    <function>
      <body>
        <name>copy</name>
        <input_arg>
          <type>apci_seq_common</type>
          <name>to</name>
        </input_arg>
      </body>
      <description>    function apci_seq_common copy (apci_seq_common to = null);
    </description>
    </function>
    <task>
      <body>
        <name>run</name>
      </body>
      <description>    virtual task run();
    </description>
    </task>
    <task>
      <body>
        <name>before_run</name>
      </body>
      <description>    virtual task before_run();
    </description>
    </task>
    <task>
      <body>
        <name>run_body</name>
      </body>
      <description>    virtual task run_body();
    </description>
    </task>
    <function>
      <body>
        <name>end_messages</name>
        <output_arg>
          <type>string</type>
          <name>s</name>
        </output_arg>
      </body>
      <description>    virtual function void end_messages(output string s);
    </description>
    </function>
    <task>
      <body>
        <name>after_run</name>
      </body>
      <description>    virtual task after_run();
    </description>
    </task>
    <function>
      <body>
        <name>seq_info</name>
        <input_arg>
          <type>string</type>
          <name>s</name>
        </input_arg>
      </body>
      <description>    function void seq_info(string s);
    </description>
    </function>
    <function>
      <body>
        <name>seq_error</name>
        <input_arg>
          <type>string</type>
          <name>s</name>
        </input_arg>
      </body>
      <description>    function void seq_error(string s);
    </description>
    </function>
    <function>
      <body>
        <name>seq_debug</name>
        <input_arg>
          <type>string</type>
          <name>s</name>
        </input_arg>
      </body>
      <description>    function void seq_debug(string s);
    </description>
    </function>
    <function>
      <body>
        <name>seq_warn</name>
        <input_arg>
          <type>string</type>
          <name>s</name>
        </input_arg>
      </body>
      <description>    function void seq_warn(string s);
    </description>
    </function>
    <function>
      <body>
        <name>seq_usage</name>
        <input_arg>
          <type>string</type>
          <name>s</name>
        </input_arg>
      </body>
      <description>    function void seq_usage(string s);
    </description>
    </function>
    <function>
      <body>
        <name>seq_print_history</name>
      </body>
      <description>    function void seq_print_history();
    </description>
    </function>
  </class>
  <class>
    <name>apci_log</name>
    <description>class apci_log</description>
    <member>
      <name>enable_cfg_tracker</name>
      <type>bit</type>
    </member>
    <member>
      <name>enable_trans_tracker</name>
      <type>bit</type>
    </member>
    <member>
      <name>enable_tl_tracker</name>
      <type>bit</type>
    </member>
    <member>
      <name>enable_dll_tracker</name>
      <type>bit</type>
    </member>
    <member>
      <name>enable_phy_tracker</name>
      <type>bit</type>
    </member>
    <member>
      <name>enable_phy_tracker_column</name>
      <type>bit</type>
    </member>
    <member>
      <name>cfg_tracker_file</name>
      <type>int</type>
    </member>
    <member>
      <name>trans_tracker_file</name>
      <type>int</type>
    </member>
    <member>
      <name>tl_tracker_file</name>
      <type>int</type>
    </member>
    <member>
      <name>dll_tracker_file</name>
      <type>int</type>
    </member>
    <member>
      <name>phy_tracker_file</name>
      <type>int</type>
    </member>
    <member>
      <name>cvg_report_file</name>
      <type>int</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>`avery_xvm_parent</name>
        </input_arg>
      </body>
      <description>    extern function new( string name, `avery_xvm_parent);
    </description>
    </function>
    <function>
      <body>
        <name>append_callback</name>
        <input_arg>
          <type>apci_log_callbacks</type>
          <name>cb</name>
        </input_arg>
        <input_arg>
          <type>input</type>
          <name>is_global</name>
        </input_arg>
      </body>
      <description>    extern virtual function void append_callback(apci_log_callbacks cb, input is_global = 0);
    </description>
    </function>
    <function>
      <body>
        <name>prepend_callback</name>
        <input_arg>
          <type>apci_log_callbacks</type>
          <name>cb</name>
        </input_arg>
        <input_arg>
          <type>input</type>
          <name>is_global</name>
        </input_arg>
      </body>
      <description>    extern virtual function void prepend_callback(apci_log_callbacks cb, input is_global = 0);
    </description>
    </function>
    <function>
      <body>
        <name>unregister_callback</name>
        <input_arg>
          <type>apci_log_callbacks</type>
          <name>cb</name>
        </input_arg>
        <input_arg>
          <type>input</type>
          <name>is_global</name>
        </input_arg>
      </body>
      <description>    extern virtual function void unregister_callback(apci_log_callbacks cb, input is_global = 0);
    </description>
    </function>
    <function>
      <body>
        <name>track_lecroy</name>
        <input_arg>
          <type>string</type>
          <name>s</name>
        </input_arg>
      </body>
      <description>    extern virtual function void track_lecroy(string s);
    </description>
    </function>
    <function>
      <body>
        <name>track_lecroy_comment</name>
        <input_arg>
          <type>string</type>
          <name>s</name>
        </input_arg>
      </body>
      <description>    extern virtual function void track_lecroy_comment(string s);
    </description>
    </function>
    <function>
      <body>
        <name>track_lecroy_speed_change</name>
        <input_arg>
          <type>int</type>
          <name>tgt_speed</name>
        </input_arg>
      </body>
      <description>    extern virtual function void track_lecroy_speed_change(int tgt_speed);
    </description>
    </function>
    <function>
      <body>
        <name>track_lecroy_packet</name>
        <input_arg>
          <type>apci_packet</type>
          <name>pkt</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_bus_enum_active</name>
        </input_arg>
      </body>
      <description>    extern virtual function void track_lecroy_packet(apci_packet pkt, bit is_bus_enum_active = 0);
    </description>
    </function>
    <function>
      <body>
        <name>track_lecroy_wait_np_done</name>
        <input_arg>
          <type>apci_tlp</type>
          <name>cpl</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_bus_enum_active</name>
        </input_arg>
      </body>
      <description>    extern virtual function void track_lecroy_wait_np_done(apci_tlp cpl, bit is_bus_enum_active = 0);
    </description>
    </function>
    <function>
      <body>
        <name>track_lecroy_wait_to_sent_cpl</name>
        <input_arg>
          <type>apci_tlp</type>
          <name>req</name>
        </input_arg>
        <input_arg>
          <type>apci_tlp</type>
          <name>cpl</name>
        </input_arg>
      </body>
      <description>    extern virtual function void track_lecroy_wait_to_sent_cpl(apci_tlp req, apci_tlp cpl);
    </description>
    </function>
    <function>
      <body>
        <name>dump_lecroy_read_data</name>
      </body>
      <description>    extern virtual function void dump_lecroy_read_data();
    </description>
    </function>
    <function>
      <body>
        <name>track_lecroy_ltssm</name>
        <input_arg>
          <type>apci_ltssm_state_e</type>
          <name>ltssm</name>
        </input_arg>
      </body>
      <description>    extern virtual function void track_lecroy_ltssm(apci_ltssm_state_e ltssm);
    </description>
    </function>
    <function>
      <body>
        <name>track_lecroy_config_all</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
      </body>
      <description>    extern virtual function void track_lecroy_config_all(apci_device bfm);
    </description>
    </function>
    <function>
      <body>
        <name>track_lecroy_bus_enum</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
      </body>
      <description>    extern virtual function void track_lecroy_bus_enum(apci_device bfm); 
    </description>
    </function>
    <function>
      <body>
        <name>save_lecroy_data</name>
        <input_arg>
          <type>apci_tlp</type>
          <name>rx_cpls</name>
        </input_arg>
      </body>
      <description>    extern virtual function void save_lecroy_data(apci_tlp rx_cpls      );
    </description>
    </function>
    <function>
      <body>
        <name>update_lecroy_addr</name>
        <input_arg>
          <type>avery_u64</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    extern virtual function void update_lecroy_addr(avery_u64 addr);
    </description>
    </function>
    <function>
      <body>
        <name>set_lecroy_track_file_name</name>
        <input_arg>
          <type>string</type>
          <name>file_name</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_lecroy_track_file_name(string file_name); 
    </description>
    </function>
    <function>
      <body>
        <name>track_cfg</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    extern virtual function void track_cfg(string msg);
    </description>
    </function>
    <function>
      <body>
        <name>track_al</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>linebrk_before</name>
        </input_arg>
      </body>
      <description>    extern virtual function void track_al (string msg, bit linebrk_before=0);
    </description>
    </function>
    <function>
      <body>
        <name>track_tl</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>linebrk_before</name>
        </input_arg>
      </body>
      <description>    extern virtual function void track_tl (string msg, bit linebrk_before=0);
    </description>
    </function>
    <function>
      <body>
        <name>track_dll</name>
        <input_arg>
          <type>byte</type>
          <name>col</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>linebrk_after</name>
        </input_arg>
      </body>
      <description>    extern virtual function void track_dll(byte col, string msg, bit linebrk_after=1);
    </description>
    </function>
    <function>
      <body>
        <name>track_phy</name>
        <input_arg>
          <type>byte</type>
          <name>col</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>linebrk_after</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>mytime</name>
        </input_arg>
      </body>
      <description>    extern virtual function void track_phy(byte col, string msg, bit linebrk_after=1, time mytime=0);
    </description>
    </function>
    <function>
      <body>
        <name>track_phy2</name>
        <input_arg>
          <type>byte</type>
          <name>col</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_tx</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>linebrk_after</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>mytime</name>
        </input_arg>
      </body>
      <description>    extern virtual function void track_phy2(byte col, bit is_tx, string msg, bit linebrk_after=1, time mytime=0);
    </description>
    </function>
    <function>
      <body>
        <name>track_tl2</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_tx</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>print_dir</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>linebrk_before</name>
        </input_arg>
      </body>
      <description>    extern virtual function void track_tl2 (string msg, bit is_tx, bit print_dir=1, bit linebrk_before=0);
    </description>
    </function>
    <function>
      <body>
        <name>track_trans2</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_tx</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>print_dir</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>linebrk_before</name>
        </input_arg>
      </body>
      <description>    extern virtual function void track_trans2 (string msg, bit is_tx, bit print_dir=1, bit linebrk_before=0);
    </description>
    </function>
    <function>
      <body>
        <name>set_global_severity</name>
        <input_arg>
          <type>string</type>
          <name>idname</name>
        </input_arg>
        <input_arg>
          <type>avery_severity</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_global_severity(string idname, avery_severity v);
    </description>
    </function>
    <function>
      <body>
        <name>set_severity</name>
        <input_arg>
          <type>string</type>
          <name>idname</name>
        </input_arg>
        <input_arg>
          <type>avery_severity</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_severity       (string idname, avery_severity v);
    </description>
    </function>
    <function>
      <body>
        <name>set_severity_by_id</name>
        <input_arg>
          <type>apci_chklist_id_e</type>
          <name>id</name>
        </input_arg>
        <input_arg>
          <type>avery_severity</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_severity_by_id (apci_chklist_id_e id, avery_severity v);
    </description>
    </function>
    <function>
      <body>
        <name>lock_severity_by_id</name>
        <input_arg>
          <type>apci_chklist_id_e</type>
          <name>id</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    extern virtual function void lock_severity_by_id (apci_chklist_id_e id, bit v);
    </description>
    </function>
    <function>
      <body>
        <name>info</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>line_breaks_prefix</name>
        </input_arg>
      </body>
      <description>    extern virtual function void info (string msg="", int line_breaks_prefix=0);
    </description>
    </function>
    <function>
      <body>
        <name>warn</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    extern virtual function void warn (string msg="");                                 </description>
    </function>
    <function>
      <body>
        <name>error</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <input_arg>
          <type>avery_data_base</type>
          <name>f</name>
        </input_arg>
      </body>
      <description>    extern virtual function void error(string msg = "", avery_data_base f=null);
    </description>
    </function>
    <function>
      <body>
        <name>fatal</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg2</name>
        </input_arg>
      </body>
      <description>    extern virtual function void fatal(string msg, string msg2 = "");
    </description>
    </function>
    <function>
      <body>
        <name>usage</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>is_finish</name>
        </input_arg>
      </body>
      <description>    extern virtual function void usage(string msg, int is_finish=1);
    </description>
    </function>
    <function>
      <body>
        <name>coverage_rpt</name>
        <input_arg>
          <type>string</type>
          <name>filename</name>
        </input_arg>
      </body>
      <description>    extern virtual function void coverage_rpt (string filename="");
    </description>
    </function>
    <function>
      <body>
        <name>sample</name>
        <input_arg>
          <type>apci_chklist_id_e</type>
          <name>id</name>
        </input_arg>
      </body>
      <description>    extern virtual function void sample (apci_chklist_id_e id);
    </description>
    </function>
    <function>
      <body>
        <name>sample_only</name>
        <input_arg>
          <type>apci_chklist_id_e</type>
          <name>id</name>
        </input_arg>
      </body>
      <description>    extern virtual function void sample_only (apci_chklist_id_e id);
    </description>
    </function>
    <function>
      <body>
        <name>fire</name>
        <input_arg>
          <type>apci_chklist_id_e</type>
          <name>id</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <input_arg>
          <type>avery_data_base</type>
          <name>f</name>
        </input_arg>
      </body>
      <description>    extern virtual function void fire (apci_chklist_id_e id, string msg="", avery_data_base f=null);
    </description>
    </function>
    <function>
      <body>
        <name>cnt_fired</name>
        <input_arg>
          <type>apci_chklist_id_e</type>
          <name>id</name>
        </input_arg>
      </body>
      <description>    extern virtual function int  cnt_fired (apci_chklist_id_e id);
    </description>
    </function>
    <function>
      <body>
        <name>message_control</name>
        <input_arg>
          <type>string</type>
          <name>s</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_enable</name>
        </input_arg>
      </body>
      <description>    function void message_control(string s, bit is_enable);
    </description>
    </function>
    <function>
      <body>
        <name>disable_info</name>
      </body>
      <description>    function void disable_info();
    </description>
    </function>
    <function>
      <body>
        <name>enable_info</name>
      </body>
      <description>    function void enable_info();
    </description>
    </function>
    <function>
      <body>
        <name>step</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    extern function void step( string msg);
    </description>
    </function>
    <function>
      <body>
        <name>substep</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    extern function void substep( string msg);
    </description>
    </function>
    <function>
      <body>
        <name>add_mirror</name>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    extern function void add_mirror( apci_log log);
    </description>
    </function>
    <function>
      <body>
        <name>trim_path</name>
        <input_arg>
          <type>string</type>
          <name>path</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>num_dots</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>remove_leading_scope</name>
        </input_arg>
      </body>
      <description>    extern function string trim_path(string path, int num_dots = 1, bit remove_leading_scope = 0);
    </description>
    </function>
  </class>
  <class>
    <name>apci_port_status</name>
    <description>class apci_port_status</description>
    <member>
      <name>captured_bus_num</name>
      <type>int</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    function new(string name="");
    </description>
    </function>
  </class>
  <class>
    <name>acxl_fm_cmd</name>
    <description>class acxl_fm_cmd</description>
    <member>
      <name>category</name>
      <type>bit</type>
    </member>
    <member>
      <name>rsvd00</name>
      <type>bit</type>
    </member>
    <member>
      <name>tag</name>
      <type>bit</type>
    </member>
    <member>
      <name>rsvd01</name>
      <type>bit</type>
    </member>
    <member>
      <name>opcode</name>
      <type>bit</type>
    </member>
    <member>
      <name>payload_length</name>
      <type>bit</type>
    </member>
    <member>
      <name>rsvd10</name>
      <type>bit</type>
    </member>
    <member>
      <name>background_oper</name>
      <type>bit</type>
    </member>
    <member>
      <name>return_code</name>
      <type>bit</type>
    </member>
    <member>
      <name>extended_status</name>
      <type>bit</type>
    </member>
    <member>
      <name>payload</name>
      <type>bit</type>
    </member>
    <struct>
      <name>user_ctrl</name>
      <arv>
        <name>is_drop</name>
        <type>bit</type>
      </arv>
    </struct>
    <member>
      <name>is_done</name>
      <type>bit</type>
    </member>
    <member>
      <name>rsp</name>
      <type>acxl_fm_cmd</type>
    </member>
    <member>
      <name>req</name>
      <type>acxl_fm_cmd</type>
    </member>
    <member>
      <name>target_type3</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>acxl_fm_cmd_cat_e</type>
          <name>category</name>
        </input_arg>
        <input_arg>
          <type>acxl_fm_cmd_e</type>
          <name>opcode</name>
        </input_arg>
      </body>
      <description>    extern function new(
        string            name=    "",
        acxl_fm_cmd_cat_e category = ACXL_FM_CMD_CAT_req,
        acxl_fm_cmd_e     opcode   = ACXL_FM_event_notif );
    </description>
    </function>
    <function>
      <body>
        <name>pre_randomize</name>
      </body>
      <description>    function void pre_randomize(); endfunction
    </description>
    </function>
    <function>
      <body>
        <name>copy</name>
        <input_arg>
          <type>acxl_fm_cmd</type>
          <name>to</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>level</name>
        </input_arg>
      </body>
      <description>    extern function acxl_fm_cmd copy  (acxl_fm_cmd to = null, int level = -1);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern function string   sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <function>
      <body>
        <name>compare</name>
        <input_arg>
          <type>acxl_fm_cmd</type>
          <name>to</name>
        </input_arg>
        <ref_arg>
          <type>string</type>
          <name>diff</name>
        </ref_arg>
      </body>
      <description>    extern function bit compare(acxl_fm_cmd to, ref string diff);
    </description>
    </function>
    <function>
      <body>
        <name>post_randomize</name>
      </body>
      <description>    function void post_randomize();
    </description>
    </function>
    <task>
      <body>
        <name>wait_done</name>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    extern virtual task wait_done(time timer = 0, string msg = "");
    </description>
    </task>
    <function>
      <body>
        <name>is_request</name>
      </body>
      <description>    function bit is_request()    ; return category == ACXL_FM_CMD_CAT_req        ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_response</name>
      </body>
      <description>    function bit is_response()   ; return category == ACXL_FM_CMD_CAT_rsp        ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_event_notif</name>
      </body>
      <description>    function bit is_event_notif(); return category == ACXL_FM_CMD_CAT_event_notif; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>setup_bind_vppb</name>
        <input_arg>
          <type>int</type>
          <name>vcs_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>vppb_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>ppb_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>ld_id</name>
        </input_arg>
      </body>
      <description>    function void setup_bind_vppb(int vcs_id, int vppb_id, int ppb_id, int ld_id=0);
    </description>
    </function>
    <function>
      <body>
        <name>tunnel_cmd</name>
        <input_arg>
          <type>int</type>
          <name>ppb_id</name>
        </input_arg>
        <input_arg>
          <type>acxl_fm_cmd</type>
          <name>kid</name>
        </input_arg>
      </body>
      <description>    function void tunnel_cmd (int ppb_id, acxl_fm_cmd kid);
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_mc</name>
    <description>class apci_cap_mc</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>post_randomize</name>
      </body>
      <description>    function void post_randomize();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_mc",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_get_alert_cfg</name>
    <description>class acxl_cmd_get_alert_cfg</description>
    <struct>
      <name>out</name>
      <arv>
        <name>corrected_persistent_mem_err_warning_threshold</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>corrected_volatile_mem_err_warning_threshold</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>under_temp_warning_threshold</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>over_temp_warning_threshold</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>under_temp_critical_alert_threshold</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>over_temp_critical_alert_threshold</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>life_used_programmable_warning_threshold</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>life_used_critical_alert_threshold</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>programmable_alerts</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>valid_alerts</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_get_alert_cfg); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_mm_handler</name>
    <description>class apci_mm_handler</description>
    <member>
      <name>offset_start</name>
      <type>bit</type>
    </member>
    <member>
      <name>offset_limit</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_mm_handler");
    </description>
    </function>
    <function>
      <body>
        <name>write_dw</name>
        <input_arg>
          <type>bit</type>
          <name>offset</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>v</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>byte_enable</name>
        </input_arg>
      </body>
      <description>    virtual function void write_dw(bit       offset, bit       v, bit       byte_enable);
    </description>
    </function>
    <function>
      <body>
        <name>read_dw</name>
        <input_arg>
          <type>bit</type>
          <name>offset</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>byte_enable</name>
        </input_arg>
      </body>
      <description>    virtual function bit       read_dw(bit       offset, bit       byte_enable);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    virtual function string sprint(int verbosity=0, string prefix="");
    </description>
    </function>
    <function>
      <body>
        <name>sanity_check</name>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    virtual function void sanity_check(apci_log log);
    </description>
    </function>
    <function>
      <body>
        <name>get_size_dw</name>
      </body>
      <description>    virtual function int get_size_dw();
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_sfi</name>
    <description>class apci_cap_sfi</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_sfi",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cfg_info</name>
    <description>class acxl_cfg_info</description>
    <member>
      <name>pcie_cap</name>
      <type>bit</type>
    </member>
    <member>
      <name>cxl_io_cap</name>
      <type>bit</type>
    </member>
    <member>
      <name>cxl_mem_cap</name>
      <type>bit</type>
    </member>
    <member>
      <name>cxl_cache_cap</name>
      <type>bit</type>
    </member>
    <member>
      <name>sync_hdr_bypass_cap</name>
      <type>bit</type>
    </member>
    <member>
      <name>retimer1_cxl_aware</name>
      <type>bit</type>
    </member>
    <member>
      <name>retimer2_cxl_aware</name>
      <type>bit</type>
    </member>
    <member>
      <name>common_clock</name>
      <type>bit</type>
    </member>
    <member>
      <name>mld_cap</name>
      <type>bit</type>
    </member>
    <member>
      <name>num_lds</name>
      <type>bit</type>
    </member>
    <member>
      <name>l0_tx_null_flit_cnt</name>
      <type>int</type>
    </member>
    <member>
      <name>lrsm_timeout</name>
      <type>int</type>
    </member>
    <member>
      <name>lrsm_num_retry</name>
      <type>int</type>
    </member>
    <member>
      <name>lrsm_num_phy_reinit</name>
      <type>int</type>
    </member>
    <member>
      <name>llr_wrap_value</name>
      <type>int</type>
    </member>
    <member>
      <name>pm_vdm_credit_return_delay_max</name>
      <type>time</type>
    </member>
    <member>
      <name>pm_vdm_reset_prep_timeout</name>
      <type>time</type>
    </member>
    <member>
      <name>mdh_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>gpf_sup</name>
      <type>byte</type>
    </member>
    <member>
      <name>chk_dev_bias_en</name>
      <type>bit</type>
    </member>
    <struct>
      <name>opt_errors</name>
      <arv>
        <name>cxl_static_bits_check_err</name>
        <type>bit</type>
      </arv>
    </struct>
  </class>
  <class>
    <name>acxl_cmd_get_sld_qos_ctrl</name>
    <description>class acxl_cmd_get_sld_qos_ctrl</description>
    <struct>
      <name>out</name>
      <arv>
        <name>backpressure_sample_interval</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>egress_severe_percentage</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>egress_moderate_percentage</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>qos_telemetry_ctrl</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_get_sld_qos_ctrl); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_clear_event_records</name>
    <description>class acxl_cmd_clear_event_records</description>
    <struct>
      <name>in</name>
      <arv>
        <name>rsvd3</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>num_event_record_handles</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>event_log</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>clear_all_events</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rsvd0_1</name>
        <type>bit</type>
      </arv>
    </struct>
    <member>
      <name>event_record_handles</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_clear_event_records); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cxs_gasket</name>
    <description>class acxl_cxs_gasket</description>
  </class>
  <class>
    <name>avery_data_base</name>
    <description>class avery_data_base</description>
    <member>
      <name>name</name>
      <type>string</type>
    </member>
    <member>
      <name>avy_id</name>
      <type>int</type>
    </member>
    <member>
      <name>up</name>
      <type>avery_data_base</type>
    </member>
    <member>
      <name>down</name>
      <type>avery_data_base</type>
    </member>
    <member>
      <name>user_data</name>
      <type>avery_user_data</type>
    </member>
    <member>
      <name>avy_id_orig</name>
      <type>int</type>
    </member>
    <member>
      <name>unbaselog</name>
      <type>avery_log</type>
    </member>
    <member>
      <name>blocking_item_done</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    function new(string name = "avery_data_base");
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    virtual function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <function>
      <body>
        <name>copy</name>
        <input_arg>
          <type>vmm_data</type>
          <name>to</name>
        </input_arg>
      </body>
      <description>    function vmm_data copy(vmm_data to = null);
    </description>
    </function>
    <function>
      <body>
        <name>copy</name>
        <input_arg>
          <type>avery_data_base</type>
          <name>to</name>
        </input_arg>
      </body>
      <description>    function avery_data_base copy(avery_data_base to = null);
    </description>
    </function>
    <function>
      <body>
        <name>sprint_user_str</name>
      </body>
      <description>    virtual function string sprint_user_str();
    </description>
    </function>
    <function>
      <body>
        <name>replace_user_str</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    virtual function void replace_user_str(string msg);
    </description>
    </function>
    <function>
      <body>
        <name>append_user_str</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    virtual function void append_user_str(string msg);
    </description>
    </function>
  </class>
  <class>
    <name>avery_timer</name>
    <description>class avery_timer</description>
    <member>
      <name>is_timed_out</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_min_timed_out</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>avery_log</type>
          <name>log</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timeout</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>min_timeout</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_fatal</name>
        </input_arg>
      </body>
      <description>    extern function new(
            avery_log  log = null, 
            time       timeout,                       time       min_timeout = 0,               string     msg = "",
            bit        is_fatal = 0
        );
    </description>
    </function>
    <task>
      <body>
        <name>start</name>
      </body>
      <description>    extern virtual task          start();
    </description>
    </task>
    <task>
      <body>
        <name>restart</name>
      </body>
      <description>    extern virtual task          restart();
    </description>
    </task>
    <task>
      <body>
        <name>stop</name>
      </body>
      <description>    extern virtual task          stop();
    </description>
    </task>
    <function>
      <body>
        <name>set_timeout</name>
        <input_arg>
          <type>time</type>
          <name>t</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_timeout(time t);       </description>
    </function>
    <function>
      <body>
        <name>set_min_timeout</name>
        <input_arg>
          <type>time</type>
          <name>t</name>
        </input_arg>
      </body>
      <description>    extern virtual function void set_min_timeout(time t);       </description>
    </function>
  </class>
  <class>
    <name>apci_cap_acs</name>
    <description>class apci_cap_acs</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_acs",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>avery_user_data</name>
    <description>class avery_user_data</description>
    <member>
      <name>u1</name>
      <type>bit</type>
    </member>
    <member>
      <name>u16</name>
      <type>bit</type>
    </member>
    <member>
      <name>u32</name>
      <type>bit</type>
    </member>
    <member>
      <name>str</name>
      <type>string</type>
    </member>
  </class>
  <class>
    <name>apci_cap_lnr</name>
    <description>class apci_cap_lnr</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_lnr",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_l1_pm_sub</name>
    <description>class apci_cap_l1_pm_sub</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_l1_pm_sub",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();                                                                                           
    </description>
    </function>
    <function>
      <body>
        <name>sprint_l1_substates_sup</name>
      </body>
      <description>    function string sprint_l1_substates_sup();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_pl_gen4</name>
    <description>class apci_cap_pl_gen4</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_pl_gen4",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
        <input_arg>
          <type>int</type>
          <name>max_link_width</name>
        </input_arg>
      </body>
      <description>    virtual function bit       get_cap_size(int max_link_width);
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_dvsec_flexbus_port</name>
    <description>class apci_cap_dvsec_flexbus_port</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_dvsec_flexbus_port",
		 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
  </class>
  <class>
    <name>apci_mem_model</name>
    <description>class apci_mem_model</description>
    <member>
      <name>log</name>
      <type>apci_log</type>
    </member>
    <member>
      <name>name</name>
      <type>string</type>
    </member>
    <member>
      <name>space</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_mem_model", apci_log log);
    </description>
    </function>
    <function>
      <body>
        <name>read</name>
        <input_arg>
          <type>bit</type>
          <name>offset</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>byte_enable</name>
        </input_arg>
      </body>
      <description>    extern virtual function bit       read(bit       offset,                                              bit        byte_enable = 4'b1111 );
    </description>
    </function>
    <function>
      <body>
        <name>write</name>
        <input_arg>
          <type>bit</type>
          <name>offset</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>byte_enable</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>val</name>
        </input_arg>
        <input_arg>
          <type>avery_data_base</type>
          <name>dbg</name>
        </input_arg>
      </body>
      <description>    extern virtual function void     write(bit       offset,                                              bit        byte_enable = 4'b1111,
                                           bit       val,
                                           avery_data_base dbg = null );
    </description>
    </function>
    <function>
      <body>
        <name>attach</name>
        <input_arg>
          <type>apci_mm_handler</type>
          <name>h</name>
        </input_arg>
      </body>
      <description>    extern virtual function void attach(apci_mm_handler h);
    </description>
    </function>
    <function>
      <body>
        <name>detach</name>
        <input_arg>
          <type>apci_mm_handler</type>
          <name>h</name>
        </input_arg>
      </body>
      <description>    extern virtual function void detach(apci_mm_handler h);
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_pcie</name>
    <description>class apci_cap_pcie</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>post_randomize</name>
      </body>
      <description>    function void post_randomize();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_pcie",
	         apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_max_payload_size_sup</name>
      </body>
      <description>    function avery_u16 get_max_payload_size_sup();
    </description>
    </function>
    <function>
      <body>
        <name>get_max_payload_size</name>
      </body>
      <description>    function avery_u16 get_max_payload_size();
    </description>
    </function>
    <function>
      <body>
        <name>get_max_payload_size_dw</name>
      </body>
      <description>    function avery_u16 get_max_payload_size_dw();
    </description>
    </function>
    <function>
      <body>
        <name>get_max_read_req_size</name>
      </body>
      <description>    function avery_u16 get_max_read_req_size();
    </description>
    </function>
    <function>
      <body>
        <name>get_max_read_req_size_dw</name>
      </body>
      <description>    function avery_u16 get_max_read_req_size_dw();
    </description>
    </function>
    <function>
      <body>
        <name>get_rcb_dw</name>
      </body>
      <description>    function avery_u16 get_rcb_dw();
    </description>
    </function>
    <function>
      <body>
        <name>get_cpl_timeout</name>
      </body>
      <description>    function avery_u64 get_cpl_timeout();
    </description>
    </function>
    <function>
      <body>
        <name>dsp_set_link_bandwidth_mgmt_status</name>
        <input_arg>
          <type>bit</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    function void dsp_set_link_bandwidth_mgmt_status(bit v);
    </description>
    </function>
    <function>
      <body>
        <name>dsp_set_link_auto_bandwidth_status</name>
        <input_arg>
          <type>bit</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    function void dsp_set_link_auto_bandwidth_status(bit v);
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_activate_fw</name>
    <description>class acxl_cmd_activate_fw</description>
    <struct>
      <name>in</name>
      <arv>
        <name>slot</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>action</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_activate_fw); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>avery_rw_data</name>
    <description>class avery_rw_data</description>
    <member>
      <name>payload</name>
      <type>reg</type>
    </member>
    <member>
      <name>payload_dw</name>
      <type>reg</type>
    </member>
    <member>
      <name>rw_address</name>
      <type>bit</type>
    </member>
    <member>
      <name>extra_argument</name>
      <type>int</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>int</type>
          <name>isw</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>total2</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>start2</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_dw2</name>
        </input_arg>
      </body>
      <description>    extern function new (
        input int isw= -1, 
        input int total2= 1,
        input bit        start2 = 0,
        input bit is_dw2= 0);
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_security_receive</name>
    <description>class acxl_cmd_security_receive</description>
    <struct>
      <name>in</name>
      <arv>
        <name>rsvd3</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>sp_specific</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>security_protocol</name>
        <type>bit</type>
      </arv>
    </struct>
    <member>
      <name>out_data</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_security_receive); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_cxl_dev_reg_if</name>
    <description>class apci_cap_cxl_dev_reg_if</description>
    <member>
      <name>cap_ids</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>cap_versions</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>rsvd1</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>offsets</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>lengths</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>rsvd2</name>
      <type>avery_reg_field</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>array_size</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_cxl_dev_reg_if", apci_log log = null, int array_size = 1); 
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>get_avery_cap_id</name>
      </body>
      <description>        virtual function int get_avery_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();  
    </description>
    </function>
    <function>
      <body>
        <name>reset_cap</name>
        <input_arg>
          <type>apci_rst_e</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    virtual function void reset_cap(apci_rst_e kind);                                                                                                                    
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cache</name>
    <description>class acxl_cache</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>acxl_requester</type>
          <name>agent</name>
        </input_arg>
      </body>
      <description>    extern function new(string name = "acxl_cache", acxl_requester agent);
    </description>
    </function>
    <function>
      <body>
        <name>get_any_dirty_line</name>
      </body>
      <description>    extern virtual function acxl_cacheline get_any_dirty_line();
    </description>
    </function>
    <function>
      <body>
        <name>evict_line</name>
        <input_arg>
          <type>acxl_cacheline</type>
          <name>line</name>
        </input_arg>
        <input_arg>
          <type>acxl_msg</type>
          <name>dbg</name>
        </input_arg>
      </body>
      <description>    extern virtual function void evict_line(acxl_cacheline line, acxl_msg dbg=null);
    </description>
    </function>
    <function>
      <body>
        <name>flush</name>
        <input_arg>
          <type>acxl_msg</type>
          <name>dbg</name>
        </input_arg>
      </body>
      <description>    extern virtual function void flush(acxl_msg dbg=null);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern virtual function string sprint(int verbosity = 0, string prefix="");
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_disable_passphrase</name>
    <description>class acxl_cmd_disable_passphrase</description>
    <struct>
      <name>in</name>
      <arv>
        <name>cur_passphrase</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rsvd1</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>passphrase_type</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_disable_passphrase); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_tx_sym_uvm_port</name>
    <description>class apci_tx_sym_uvm_port</description>
    <member>
      <name>bfm</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>port_id</name>
      <type>int</type>
    </member>
    <member>
      <name>logic_lane_num</name>
      <type>int</type>
    </member>
    <function>
      <body>
        <name>set</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>logic_lane_num</name>
        </input_arg>
        <input_arg>
          <type>apci_raw_sym_t</type>
          <name>raw</name>
        </input_arg>
      </body>
      <description>    function void set( apci_device    bfm		,
		       int	      port_id		,
		       int	      logic_lane_num	,
		       apci_raw_sym_t raw		 );
    </description>
    </function>
  </class>
  <class>
    <name>apci_testcase_base</name>
    <description>class apci_testcase_base</description>
    <member>
      <name>test_name</name>
      <type>string</type>
    </member>
    <member>
      <name>rc</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>sw</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>ep0</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>ep_bfms</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>rc_bfms</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>all_bfms</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>all_masters</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>monitors</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>dut_cxl_seq</name>
      <type>acxl_dut_seq</type>
    </member>
    <member>
      <name>all_duts</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>bfm</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>rc_app_bfm</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>dut1_bfm</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>all_mgrs</name>
      <type>apci_device_mgr</type>
    </member>
    <member>
      <name>num_eps</name>
      <type>int</type>
    </member>
    <member>
      <name>test_failed</name>
      <type>bit</type>
    </member>
    <member>
      <name>test_not_applicable</name>
      <type>bit</type>
    </member>
    <member>
      <name>sim_failed</name>
      <type>bit</type>
    </member>
    <member>
      <name>sim_not_applicable</name>
      <type>bit</type>
    </member>
    <member>
      <name>s</name>
      <type>string</type>
    </member>
    <member>
      <name>_tests_depot</name>
      <type>apci_testcase_container</type>
    </member>
    <member>
      <name>_test_body_implemented</name>
      <type>bit</type>
    </member>
    <member>
      <name>_selected</name>
      <type>bit</type>
    </member>
    <member>
      <name>ok</name>
      <type>bit</type>
    </member>
    <member>
      <name>err</name>
      <type>bit</type>
    </member>
    <member>
      <name>test_log</name>
      <type>apci_log</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>test_name</name>
        </input_arg>
      </body>
      <description>    function new(string test_name);
    </description>
    </function>
    <function>
      <body>
        <name>grab_test</name>
        <ref_arg>
          <type>string</type>
          <name>t</name>
        </ref_arg>
      </body>
      <description>    static function apci_testcase_base grab_test(ref string t);
    </description>
    </function>
    <function>
      <body>
        <name>add_rc</name>
        <input_arg>
          <type>apci_device</type>
          <name>h</name>
        </input_arg>
      </body>
      <description>    function void add_rc(apci_device h);
    </description>
    </function>
    <function>
      <body>
        <name>add_sw</name>
        <input_arg>
          <type>apci_device</type>
          <name>h</name>
        </input_arg>
      </body>
      <description>    function void add_sw(apci_device h);
    </description>
    </function>
    <function>
      <body>
        <name>add_ep</name>
        <input_arg>
          <type>apci_device</type>
          <name>h</name>
        </input_arg>
      </body>
      <description>    function void add_ep(apci_device h);
    </description>
    </function>
    <function>
      <body>
        <name>add_bfm</name>
        <input_arg>
          <type>apci_device</type>
          <name>h</name>
        </input_arg>
      </body>
      <description>    function void add_bfm(apci_device h);
    </description>
    </function>
    <function>
      <body>
        <name>add_rc_app_bfm</name>
        <input_arg>
          <type>apci_device</type>
          <name>h</name>
        </input_arg>
      </body>
      <description>    function void add_rc_app_bfm(apci_device h);
    </description>
    </function>
    <function>
      <body>
        <name>add_dut1_bfm</name>
        <input_arg>
          <type>apci_device</type>
          <name>h</name>
        </input_arg>
      </body>
      <description>    function void add_dut1_bfm(apci_device h);
    </description>
    </function>
    <function>
      <body>
        <name>add_dut_pif</name>
        <parameter>
          <type>apci_pipe_intf</type>
          <name>h</name>
        </parameter>
      </body>
      <description>    function void add_dut_pif(virtual apci_pipe_intf h      );
    </description>
    </function>
    <function>
      <body>
        <name>add_dut_cxl_seq</name>
        <input_arg>
          <type>acxl_dut_seq</type>
          <name>h</name>
        </input_arg>
      </body>
      <description>    function void add_dut_cxl_seq(acxl_dut_seq h);
    </description>
    </function>
    <function>
      <body>
        <name>set_severity_except_myself</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_chklist_id_e</type>
          <name>id</name>
        </input_arg>
        <input_arg>
          <type>avery_severity</type>
          <name>serverity</name>
        </input_arg>
      </body>
      <description>    function void set_severity_except_myself(apci_device bfm, apci_chklist_id_e id, avery_severity serverity);
    </description>
    </function>
    <task>
      <body>
        <name>pre_bfm_started</name>
      </body>
      <description>    virtual task pre_bfm_started();
    </description>
    </task>
    <task>
      <body>
        <name>run</name>
      </body>
      <description>    virtual task run();
    </description>
    </task>
    <task>
      <body>
        <name>wait_eps</name>
        <input_arg>
          <type>bit</type>
          <name>configured</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>how_many</name>
        </input_arg>
      </body>
      <description>    virtual task wait_eps(bit configured = 0,    	                      int how_many = 0);
    </description>
    </task>
    <task>
      <body>
        <name>test_body</name>
      </body>
      <description>    virtual task test_body();
    </description>
    </task>
    <task>
      <body>
        <name>test_body_per_bfm_sequential</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
      </body>
      <description>    virtual task test_body_per_bfm_sequential(apci_device bfm);
    </description>
    </task>
    <task>
      <body>
        <name>test_body_per_bfm_parallel</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
      </body>
      <description>    virtual task test_body_per_bfm_parallel(apci_device bfm);
    </description>
    </task>
    <task>
      <body>
        <name>collect_coverage</name>
      </body>
      <description>    virtual task collect_coverage();
    </description>
    </task>
    <task>
      <body>
        <name>wrapup</name>
      </body>
      <description>    virtual task wrapup();                                                                       
    </description>
    </task>
    <function>
      <body>
        <name>find_controller_bfm</name>
        <input_arg>
          <type>int</type>
          <name>ep_id</name>
        </input_arg>
      </body>
      <description>    virtual function apci_device find_controller_bfm(int ep_id);
    </description>
    </function>
    <function>
      <body>
        <name>sprint_topology</name>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    virtual function string sprint_topology(string prefix = "\t");
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_null</name>
    <description>class apci_cap_null</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_null",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
  </class>
  <class>
    <name>acxl_dut_seq</name>
    <description>class acxl_dut_seq</description>
    <task>
      <body>
        <name>get_cacheline</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
        <output_arg>
          <type>acxl_cacheline</type>
          <name>cline</name>
        </output_arg>
      </body>
      <description>    virtual task get_cacheline (bit       addr, output acxl_cacheline cline);
    </description>
    </task>
    <task>
      <body>
        <name>cline_to_invalid</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task cline_to_invalid(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>cline_to_exclusive_clean</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task cline_to_exclusive_clean(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>cline_to_modified</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task cline_to_modified(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_RdCurr</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_RdCurr(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_RdOwn</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_RdOwn(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_RdOwnNoData</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_RdOwnNoData(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_RdShared</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_RdShared(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_MemWr</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_MemWr(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_ItoMWr</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_ItoMWr(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_CLFlush</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_CLFlush(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_CleanEvict</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_CleanEvict(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_DirtyEvict</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_DirtyEvict(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_RdAny</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_RdAny(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_CleanEvictNoData</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_CleanEvictNoData(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_WOWrInv</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_WOWrInv(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_WOWrInvF</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_WOWrInvF(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_WrInv</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_WrInv(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>send_CacheFlushed</name>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_CacheFlushed(bit       addr);
    </description>
    </task>
    <task>
      <body>
        <name>enter_pkgc_l1</name>
      </body>
      <description>    virtual task enter_pkgc_l1();
    </description>
    </task>
    <task>
      <body>
        <name>add_ide_key</name>
        <input_arg>
          <type>bit</type>
          <name>key</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>iv</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_tx</name>
        </input_arg>
      </body>
      <description>    virtual task add_ide_key(bit       key, bit       iv, bit is_tx);
    </description>
    </task>
    <task>
      <body>
        <name>start_ide_sequence</name>
      </body>
      <description>    virtual task start_ide_sequence();
    </description>
    </task>
    <task>
      <body>
        <name>send_d2h_req</name>
        <input_arg>
          <type>acxl_d2h_req_opcode_e</type>
          <name>req_type</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>addr</name>
        </input_arg>
      </body>
      <description>    virtual task send_d2h_req(acxl_d2h_req_opcode_e req_type, bit       addr);
    </description>
    </task>
  </class>
  <class>
    <name>acxl_flit</name>
    <description>class acxl_flit</description>
    <member>
      <name>bits</name>
      <type>bit</type>
    </member>
    <member>
      <name>bytes</name>
      <type>bit</type>
    </member>
    <member>
      <name>dwords</name>
      <type>bit</type>
    </member>
    <member>
      <name>slot_data</name>
      <type>bit</type>
    </member>
    <member>
      <name>protocol_id</name>
      <type>bit</type>
    </member>
    <member>
      <name>crc</name>
      <type>bit</type>
    </member>
    <member>
      <name>raw_bytes</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_done</name>
      <type>bit</type>
    </member>
    <struct>
      <name>user_ctrl</name>
      <arv>
        <name>is_drop</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rsp_ack</name>
        <type>byte</type>
      </arv>
      <arv>
        <name>with_eds</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>inter_flit_gap</name>
        <type>int</type>
      </arv>
      <arv>
        <name>ide_mac_delay</name>
        <type>byte</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>acxl_flit_type</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    extern function new(string name= "", acxl_flit_type kind = ACXL_FLIT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>pre_randomize</name>
      </body>
      <description>    function void pre_randomize(); endfunction
    </description>
    </function>
    <function>
      <body>
        <name>copy</name>
        <input_arg>
          <type>acxl_flit</type>
          <name>to</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>level</name>
        </input_arg>
      </body>
      <description>    extern function acxl_flit copy  (acxl_flit to = null, int level = -1);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern function string   sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <function>
      <body>
        <name>compare</name>
        <input_arg>
          <type>acxl_flit</type>
          <name>to</name>
        </input_arg>
        <ref_arg>
          <type>string</type>
          <name>diff</name>
        </ref_arg>
      </body>
      <description>    extern function bit compare(acxl_flit to, ref string diff);
    </description>
    </function>
    <function>
      <body>
        <name>check_decode_kind</name>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
        <input_arg>
          <type>acxl_cfg_info</type>
          <name>cxlcfg</name>
        </input_arg>
        <input_arg>
          <type>acxl_port_cfg</type>
          <name>portcfg</name>
        </input_arg>
        <output_arg>
          <type>acxl_framing_err_e</type>
          <name>err_no</name>
        </output_arg>
      </body>
      <description>    extern function void check_decode_kind(        apci_log           log    ,
                                                   acxl_cfg_info      cxlcfg,
                                                   acxl_port_cfg      portcfg,
                                            output acxl_framing_err_e err_no  );
    </description>
    </function>
    <function>
      <body>
        <name>get_valid_pid_byte</name>
      </body>
      <description>    extern static function quene_of_byte get_valid_pid_byte();
    </description>
    </function>
    <function>
      <body>
        <name>rehash_crc</name>
      </body>
      <description>    extern function void rehash_crc();
    </description>
    </function>
    <function>
      <body>
        <name>end_on_blk_boundary</name>
      </body>
      <description>    extern function bit end_on_blk_boundary();
    </description>
    </function>
    <function>
      <body>
        <name>pid_has_eds</name>
      </body>
      <description>    extern virtual function bit pid_has_eds();
    </description>
    </function>
    <task>
      <body>
        <name>wait_sent</name>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    extern virtual task wait_sent(string entry, time timer = 0, string msg = "");
    </description>
    </task>
    <function>
      <body>
        <name>user_decode_slot</name>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_down_port</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_all_data_flit</name>
        </input_arg>
      </body>
      <description>    extern function void user_decode_slot(apci_log log, bit is_down_port, bit is_all_data_flit = 0);
    </description>
    </function>
    <function>
      <body>
        <name>post_randomize</name>
      </body>
      <description>    function void post_randomize();
    </description>
    </function>
    <function>
      <body>
        <name>is_cm_prot</name>
      </body>
      <description>    virtual function bit is_cm_prot()    ; return kind == ACXL_FLIT_cm_prot   ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_cm_data</name>
      </body>
      <description>    virtual function bit is_cm_data()    ; return kind == ACXL_FLIT_cm_data   ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_cm</name>
      </body>
      <description>    virtual function bit is_cm()         ; return kind inside {ACXL_FLIT_cm, ACXL_FLIT_cm_prot, ACXL_FLIT_cm_data}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_llctrl</name>
      </body>
      <description>    virtual function bit is_llctrl()     ; return kind inside {ACXL_FLIT_llcrd_ack,
    </description>
    </function>
    <function>
      <body>
        <name>is_llcrd_ack</name>
      </body>
      <description>    virtual function bit is_llcrd_ack()  ; return kind == ACXL_FLIT_llcrd_ack ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_retry_frame</name>
      </body>
      <description>    virtual function bit is_retry_frame(); return kind == ACXL_FLIT_retry_frame; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_retry_req</name>
      </body>
      <description>    virtual function bit is_retry_req()  ; return kind == ACXL_FLIT_retry_req ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_retry_ack</name>
      </body>
      <description>    virtual function bit is_retry_ack()  ; return kind == ACXL_FLIT_retry_ack ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_retry_idle</name>
      </body>
      <description>    virtual function bit is_retry_idle()  ; return kind == ACXL_FLIT_retry_idle; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_init_param</name>
      </body>
      <description>    virtual function bit is_init_param() ; return kind == ACXL_FLIT_init_param; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_almp</name>
      </body>
      <description>    virtual function bit is_almp()       ; return kind == ACXL_FLIT_almp      ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_null_flit</name>
      </body>
      <description>    virtual function bit is_null_flit()  ; return kind == ACXL_FLIT_null      ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_io</name>
      </body>
      <description>    virtual function bit is_io()         ; return kind == ACXL_FLIT_io        ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_ide</name>
      </body>
      <description>    virtual function bit is_ide()        ; return kind inside {ACXL_FLIT_ide_start, ACXL_FLIT_ide_idle, ACXL_FLIT_ide_tmac}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_ide_start</name>
      </body>
      <description>    virtual function bit is_ide_start()  ; return kind == ACXL_FLIT_ide_start; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_ide_idle</name>
      </body>
      <description>    virtual function bit is_ide_idle()   ; return kind == ACXL_FLIT_ide_idle ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_ide_tmac</name>
      </body>
      <description>    virtual function bit is_ide_tmac()   ; return kind == ACXL_FLIT_ide_tmac ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_retry</name>
      </body>
      <description>    virtual function bit is_retry();
    </description>
    </function>
    <function>
      <body>
        <name>is_retryable_ctrl_flit</name>
      </body>
      <description>    virtual function bit is_retryable_ctrl_flit();
    </description>
    </function>
    <function>
      <body>
        <name>is_retryable</name>
      </body>
      <description>    virtual function bit is_retryable();
    </description>
    </function>
    <function>
      <body>
        <name>is_non_retryable</name>
      </body>
      <description>    virtual function bit is_non_retryable();
    </description>
    </function>
    <function>
      <body>
        <name>get_full_ack</name>
      </body>
      <description>    virtual function int get_full_ack();
    </description>
    </function>
    <function>
      <body>
        <name>set_full_ack</name>
        <input_arg>
          <type>int</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_full_ack(int v);
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cache_callbacks</name>
    <description>class acxl_cache_callbacks</description>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
      </body>
      <description>    virtual function string sprint(int verbosity = 0);
    </description>
    </function>
  </class>
  <class>
    <name>acxl_coverage_sampler</name>
    <description>class acxl_coverage_sampler</description>
    <member>
      <name>cmsg</name>
      <type>acxl_msg</type>
    </member>
    <member>
      <name>flit</name>
      <type>acxl_flit</type>
    </member>
    <member>
      <name>cross_weight</name>
      <type>int</type>
    </member>
    <member>
      <name>cxl_host_tx</name>
      <type>bit</type>
    </member>
    <member>
      <name>valid_bits_in_slots</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    function new(string name = "acxl_coverage_sampler");
    </description>
    </function>
    <function>
      <body>
        <name>sample_cxl_msg</name>
        <input_arg>
          <type>acxl_msg</type>
          <name>m</name>
        </input_arg>
      </body>
      <description>    virtual function void sample_cxl_msg(acxl_msg m);
    </description>
    </function>
    <function>
      <body>
        <name>sample_flit</name>
        <input_arg>
          <type>acxl_flit</type>
          <name>f</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>cxl_host_tx</name>
        </input_arg>
      </body>
      <description>    virtual function void sample_flit(acxl_flit f, bit cxl_host_tx);
    </description>
    </function>
    <function>
      <body>
        <name>sample_vlsm_state</name>
        <input_arg>
          <type>acxl_vlsm_state_e</type>
          <name>st</name>
        </input_arg>
      </body>
      <description>    virtual function void sample_vlsm_state(acxl_vlsm_state_e st);
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_ari</name>
    <description>class apci_cap_ari</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_ari",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_mriov</name>
    <description>class apci_cap_mriov</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_mriov",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
  </class>
  <class>
    <name>acxl_msg</name>
    <description>class acxl_msg</description>
    <member>
      <name>port_id</name>
      <type>int</type>
    </member>
    <member>
      <name>bytes</name>
      <type>bit</type>
    </member>
    <struct>
      <name>user_ctrl</name>
      <arv>
        <name>is_drop</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>is_ei</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>go_then_data</name>
        <type>byte</type>
      </arv>
      <arv>
        <name>snoop_rsp</name>
        <type>byte</type>
      </arv>
      <arv>
        <name>spec_read</name>
        <type>byte</type>
      </arv>
      <arv>
        <name>data_32B</name>
        <type>byte</type>
      </arv>
    </struct>
    <member>
      <name>is_done</name>
      <type>bit</type>
    </member>
    <member>
      <name>rsp_msg</name>
      <type>acxl_msg</type>
    </member>
    <member>
      <name>rspData_msgs</name>
      <type>acxl_msg</type>
    </member>
    <member>
      <name>req</name>
      <type>acxl_msg</type>
    </member>
    <member>
      <name>target_type3</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>acxl_msg_type</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    extern function new(string name= "", acxl_msg_type kind = ACXL_MSG_d2h_req);
    </description>
    </function>
    <function>
      <body>
        <name>pre_randomize</name>
      </body>
      <description>    function void pre_randomize(); endfunction
    </description>
    </function>
    <function>
      <body>
        <name>copy</name>
        <input_arg>
          <type>acxl_msg</type>
          <name>to</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>level</name>
        </input_arg>
      </body>
      <description>    extern function acxl_msg copy  (acxl_msg to = null, int level = -1);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern function string   sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <function>
      <body>
        <name>compare</name>
        <input_arg>
          <type>acxl_msg</type>
          <name>to</name>
        </input_arg>
        <ref_arg>
          <type>string</type>
          <name>diff</name>
        </ref_arg>
      </body>
      <description>    extern function bit compare(acxl_msg to, ref string diff);
    </description>
    </function>
    <function>
      <body>
        <name>post_randomize</name>
      </body>
      <description>    function void post_randomize();
    </description>
    </function>
    <function>
      <body>
        <name>is_d2h_req</name>
      </body>
      <description>    function bit is_d2h_req()    ; return kind == ACXL_MSG_d2h_req    ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_d2h_rsp</name>
      </body>
      <description>    function bit is_d2h_rsp()    ; return kind == ACXL_MSG_d2h_rsp    ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_d2h_data</name>
      </body>
      <description>    function bit is_d2h_data()   ; return kind == ACXL_MSG_d2h_data   ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_h2d_req</name>
      </body>
      <description>    function bit is_h2d_req()    ; return kind == ACXL_MSG_h2d_req    ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_h2d_rsp</name>
      </body>
      <description>    function bit is_h2d_rsp()    ; return kind == ACXL_MSG_h2d_rsp    ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_h2d_data</name>
      </body>
      <description>    function bit is_h2d_data()   ; return kind == ACXL_MSG_h2d_data   ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_m2s_req</name>
      </body>
      <description>    function bit is_m2s_req()    ; return kind == ACXL_MSG_m2s_req    ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_m2s_reqdata</name>
      </body>
      <description>    function bit is_m2s_reqdata(); return kind == ACXL_MSG_m2s_reqdata; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_s2m_ndr</name>
      </body>
      <description>    function bit is_s2m_ndr()    ; return kind == ACXL_MSG_s2m_ndr    ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_s2m_drs</name>
      </body>
      <description>    function bit is_s2m_drs()    ; return kind == ACXL_MSG_s2m_drs    ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_d2h</name>
      </body>
      <description>    function bit is_d2h()        ; return kind inside {ACXL_MSG_d2h_req, ACXL_MSG_d2h_rsp, ACXL_MSG_d2h_data}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_h2d</name>
      </body>
      <description>    function bit is_h2d()        ; return kind inside {ACXL_MSG_h2d_req, ACXL_MSG_h2d_rsp, ACXL_MSG_h2d_data}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_m2s</name>
      </body>
      <description>    function bit is_m2s()        ; return kind inside {ACXL_MSG_m2s_req, ACXL_MSG_m2s_reqdata}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_s2m</name>
      </body>
      <description>    function bit is_s2m()        ; return kind inside {ACXL_MSG_s2m_ndr, ACXL_MSG_s2m_drs}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_RdCurr</name>
      </body>
      <description>    function bit is_RdCurr()     ; return kind == ACXL_MSG_d2h_req &amp;&amp; u.d2h_req.opcode == ACXL_D2H_RdCurr; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_RdShared</name>
      </body>
      <description>    function bit is_RdShared()   ; return kind == ACXL_MSG_d2h_req &amp;&amp; u.d2h_req.opcode == ACXL_D2H_RdShared; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_RdAny</name>
      </body>
      <description>    function bit is_RdAny()      ; return kind == ACXL_MSG_d2h_req &amp;&amp; u.d2h_req.opcode == ACXL_D2H_RdAny; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_RdOwn</name>
      </body>
      <description>    function bit is_RdOwn()      ; return kind == ACXL_MSG_d2h_req &amp;&amp; u.d2h_req.opcode == ACXL_D2H_RdOwn; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_DirtyEvict</name>
      </body>
      <description>    function bit is_DirtyEvict();       return kind == ACXL_MSG_d2h_req &amp;&amp; u.d2h_req.opcode == ACXL_D2H_DirtyEvict; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_CleanEvict</name>
      </body>
      <description>    function bit is_CleanEvict();       return kind == ACXL_MSG_d2h_req &amp;&amp; u.d2h_req.opcode == ACXL_D2H_CleanEvict; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_CleanEvictNoData</name>
      </body>
      <description>    function bit is_CleanEvictNoData(); return kind == ACXL_MSG_d2h_req &amp;&amp; u.d2h_req.opcode == ACXL_D2H_CleanEvictNoData; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_Evict</name>
      </body>
      <description>    function bit is_Evict()      ; return kind == ACXL_MSG_d2h_req &amp;&amp; u.d2h_req.opcode inside {ACXL_D2H_CleanEvict, ACXL_D2H_DirtyEvict, ACXL_D2H_CleanEvictNoData}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_ItoMWr</name>
      </body>
      <description>    function bit is_ItoMWr()     ; return kind == ACXL_MSG_d2h_req &amp;&amp; u.d2h_req.opcode == ACXL_D2H_ItoMWr; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_MemWr</name>
      </body>
      <description>    function bit is_MemWr()      ; return kind == ACXL_MSG_d2h_req &amp;&amp; u.d2h_req.opcode == ACXL_D2H_MemWr; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_m2s_MemRd</name>
      </body>
      <description>    function bit is_m2s_MemRd()    ; return kind == ACXL_MSG_m2s_req &amp;&amp; u.m2s_req.opcode == ACXL_M2S_MemRd; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_m2s_MemRdData</name>
      </body>
      <description>    function bit is_m2s_MemRdData(); return kind == ACXL_MSG_m2s_req &amp;&amp; u.m2s_req.opcode == ACXL_M2S_MemRdData; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_m2s_MemInv</name>
      </body>
      <description>    function bit is_m2s_MemInv()   ; return kind == ACXL_MSG_m2s_req &amp;&amp; u.m2s_req.opcode == ACXL_M2S_MemInv; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_m2s_MemInvNT</name>
      </body>
      <description>    function bit is_m2s_MemInvNT() ; return kind == ACXL_MSG_m2s_req &amp;&amp; u.m2s_req.opcode == ACXL_M2S_MemInvNT; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_m2s_MemRdFwd</name>
      </body>
      <description>    function bit is_m2s_MemRdFwd() ; return kind == ACXL_MSG_m2s_req &amp;&amp; u.m2s_req.opcode == ACXL_M2S_MemRdFwd; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_m2s_MemWrFwd</name>
      </body>
      <description>    function bit is_m2s_MemWrFwd() ; return kind == ACXL_MSG_m2s_req &amp;&amp; u.m2s_req.opcode == ACXL_M2S_MemWrFwd; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_m2s_MemFwd</name>
      </body>
      <description>    function bit is_m2s_MemFwd()   ; return kind == ACXL_MSG_m2s_req &amp;&amp; u.m2s_req.opcode inside {ACXL_M2S_MemWrFwd, ACXL_M2S_MemRdFwd}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_m2s_MemSpecRd</name>
      </body>
      <description>    function bit is_m2s_MemSpecRd(); return kind == ACXL_MSG_m2s_req &amp;&amp; u.m2s_req.opcode == ACXL_M2S_MemSpecRd; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_m2s_MemWr</name>
      </body>
      <description>    function bit is_m2s_MemWr()    ; return kind == ACXL_MSG_m2s_reqdata &amp;&amp; u.m2s_reqdata.opcode == ACXL_M2S_MemWr; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_m2s_MemWrPtl</name>
      </body>
      <description>    function bit is_m2s_MemWrPtl() ; return kind == ACXL_MSG_m2s_reqdata &amp;&amp; u.m2s_reqdata.opcode == ACXL_M2S_MemWrPtl; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_s2m_Cmp</name>
      </body>
      <description>    function bit is_s2m_Cmp() ; return kind == ACXL_MSG_s2m_ndr &amp;&amp; u.s2m_ndr.opcode == ACXL_S2M_NDR_Cmp ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_s2m_CmpS</name>
      </body>
      <description>    function bit is_s2m_CmpS(); return kind == ACXL_MSG_s2m_ndr &amp;&amp; u.s2m_ndr.opcode == ACXL_S2M_NDR_CmpS; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_s2m_CmpE</name>
      </body>
      <description>    function bit is_s2m_CmpE(); return kind == ACXL_MSG_s2m_ndr &amp;&amp; u.s2m_ndr.opcode == ACXL_S2M_NDR_CmpE; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>has_data</name>
      </body>
      <description>    function bit has_data();
    </description>
    </function>
    <function>
      <body>
        <name>is_cxlCache</name>
      </body>
      <description>    function bit is_cxlCache()   ;
    </description>
    </function>
    <function>
      <body>
        <name>is_cxlMem</name>
      </body>
      <description>    function bit is_cxlMem()   ;
    </description>
    </function>
    <function>
      <body>
        <name>is_d2h_read</name>
      </body>
      <description>    function bit is_d2h_read();
    </description>
    </function>
    <function>
      <body>
        <name>is_read0</name>
      </body>
      <description>    function bit is_read0();
    </description>
    </function>
    <function>
      <body>
        <name>is_d2h_write</name>
      </body>
      <description>    function bit is_d2h_write();
    </description>
    </function>
    <function>
      <body>
        <name>is_CacheFlushed</name>
      </body>
      <description>    function bit is_CacheFlushed();
    </description>
    </function>
    <function>
      <body>
        <name>is_CLFlush</name>
      </body>
      <description>    function bit is_CLFlush();
    </description>
    </function>
    <function>
      <body>
        <name>expect_WritePull</name>
      </body>
      <description>    function bit expect_WritePull();
    </description>
    </function>
    <function>
      <body>
        <name>expect_ExtCmp</name>
      </body>
      <description>    function bit expect_ExtCmp();
    </description>
    </function>
    <function>
      <body>
        <name>rsp_require_data</name>
      </body>
      <description>    function bit rsp_require_data();
    </description>
    </function>
    <function>
      <body>
        <name>has_GO</name>
      </body>
      <description>    function bit has_GO();
    </description>
    </function>
    <function>
      <body>
        <name>has_Fast_GO</name>
      </body>
      <description>    function bit has_Fast_GO();
    </description>
    </function>
    <function>
      <body>
        <name>pull_data</name>
      </body>
      <description>    function bit pull_data();
    </description>
    </function>
    <function>
      <body>
        <name>pull_data_drop</name>
      </body>
      <description>    function bit pull_data_drop();
    </description>
    </function>
    <function>
      <body>
        <name>can_use_memFwd</name>
      </body>
      <description>    function bit can_use_memFwd();
    </description>
    </function>
    <function>
      <body>
        <name>is_poisoned</name>
      </body>
      <description>    function bit is_poisoned();
    </description>
    </function>
    <task>
      <body>
        <name>wait_done</name>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    extern virtual task wait_done(time timer = 0, string msg = "");
    </description>
    </task>
    <task>
      <body>
        <name>wait_sent</name>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    extern virtual task wait_sent(string entry, time timer = 0, string msg = "");
    </description>
    </task>
  </class>
  <class>
    <name>apci_cap_cxl_ras</name>
    <description>class apci_cap_cxl_ras</description>
    <member>
      <name>log</name>
      <type>apci_log</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_cxl_ras", apci_log log = null);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>get_mask</name>
        <input_arg>
          <type>acxl_ras_err_type_e</type>
          <name>t</name>
        </input_arg>
      </body>
      <description>    function bit get_mask(acxl_ras_err_type_e t);
    </description>
    </function>
    <function>
      <body>
        <name>get_severity</name>
        <input_arg>
          <type>acxl_ras_err_type_e</type>
          <name>t</name>
        </input_arg>
      </body>
      <description>    function bit get_severity(acxl_ras_err_type_e t);
    </description>
    </function>
    <function>
      <body>
        <name>reset_cap</name>
        <input_arg>
          <type>apci_rst_e</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    virtual function void reset_cap(apci_rst_e kind);                                                                                                                    
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_type1</name>
    <description>class apci_cap_type1</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_type1",
	         apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_behind_io</name>
        <output_arg>
          <type>avery_u32</type>
          <name>base</name>
        </output_arg>
        <input_arg>
          <type>avery_u32</type>
          <name>limit</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    function void get_behind_io(output avery_u32 base, avery_u32 limit, input apci_log log);
    </description>
    </function>
    <function>
      <body>
        <name>get_behind_mio</name>
        <output_arg>
          <type>avery_u32</type>
          <name>base</name>
        </output_arg>
        <input_arg>
          <type>avery_u32</type>
          <name>limit</name>
        </input_arg>
      </body>
      <description>    function void get_behind_mio(output avery_u32 base, avery_u32 limit);
    </description>
    </function>
    <function>
      <body>
        <name>get_behind_pref</name>
        <output_arg>
          <type>avery_u64</type>
          <name>base</name>
        </output_arg>
        <input_arg>
          <type>avery_u64</type>
          <name>limit</name>
        </input_arg>
      </body>
      <description>    function void get_behind_pref(output avery_u64 base, avery_u64 limit);
    </description>
    </function>
    <function>
      <body>
        <name>collect_bar_ranges</name>
        <ref_arg>
          <type>apci_bar_t</type>
          <name>ranges</name>
        </ref_arg>
        <input_arg>
          <type>bit</type>
          <name>expansion_rom</name>
        </input_arg>
      </body>
      <description>    function void collect_bar_ranges(ref apci_bar_t ranges      , input bit expansion_rom = 1);
    </description>
    </function>
  </class>
  <class>
    <name>acxl_fm_enum_sw</name>
    <description>class acxl_fm_enum_sw</description>
    <member>
      <name>vcs_q</name>
      <type>acxl_fm_enum_vcs</type>
    </member>
    <member>
      <name>ep_q</name>
      <type>acxl_fm_enum_ep</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    function new(string name = "acxl_fm_enum_sw");
    </description>
    </function>
    <function>
      <body>
        <name>find_unbinded_ld</name>
        <output_arg>
          <type>acxl_fm_enum_ep</type>
          <name>ep</name>
        </output_arg>
        <output_arg>
          <type>int</type>
          <name>ld</name>
        </output_arg>
      </body>
      <description>    function void find_unbinded_ld(output acxl_fm_enum_ep ep, output int ld);
    </description>
    </function>
    <function>
      <body>
        <name>set_binded</name>
        <input_arg>
          <type>acxl_fm_enum_ep</type>
          <name>ep</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>ld</name>
        </input_arg>
      </body>
      <description>    function void set_binded(acxl_fm_enum_ep ep, int ld);
    </description>
    </function>
    <function>
      <body>
        <name>clear_binded</name>
        <input_arg>
          <type>acxl_fm_enum_ep</type>
          <name>ep</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>ld</name>
        </input_arg>
      </body>
      <description>    function void clear_binded(acxl_fm_enum_ep ep, int ld);
    </description>
    </function>
  </class>
  <class>
    <name>apci_cb_rx_err_logic_idle</name>
    <description>class apci_cb_rx_err_logic_idle</description>
    <member>
      <name>new_hdr</name>
      <type>bit</type>
    </member>
    <member>
      <name>ei_cnt</name>
      <type>int</type>
    </member>
    <function>
      <body>
        <name>tx_sym_before_scramble</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>logic_lane_num</name>
        </input_arg>
        <inout_arg>
          <type>apci_raw_sym_t</type>
          <name>raw</name>
        </inout_arg>
      </body>
      <description>    virtual function void tx_sym_before_scramble(
                  apci_device    bfm           ,
                  int            port_id       ,
                  int            logic_lane_num,
            inout apci_raw_sym_t raw);
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_mpcie</name>
    <description>class apci_cap_mpcie</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_mpcie",
	         apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_get_fw_info</name>
    <description>class acxl_cmd_get_fw_info</description>
    <struct>
      <name>fw_activation_cap</name>
      <arv>
        <name>slot4_fw_revision</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>slot3_fw_revision</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>slot2_fw_revision</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>slot1_fw_revision</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rsvd3</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rsvd</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>online</name>
        <type>bit</type>
      </arv>
    </struct>
    <struct>
      <name>fw_slot_info</name>
      <arv>
        <name>rsvd</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>slot_num_next</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>slot_num_cur</name>
        <type>bit</type>
      </arv>
    </struct>
    <member>
      <name>fw_slots_sup</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_get_fw_info); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>acxl_fm_enum_mgr</name>
    <description>class acxl_fm_enum_mgr</description>
    <member>
      <name>switches</name>
      <type>acxl_fm_enum_sw</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    function new(string name = "acxl_fm_enum_mgr");
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_pl_gen4_margin</name>
    <description>class apci_cap_pl_gen4_margin</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_pl_gen4_margin",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
        <input_arg>
          <type>int</type>
          <name>max_link_width</name>
        </input_arg>
      </body>
      <description>    virtual function bit       get_cap_size(int max_link_width);
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_dvsec_cxl_reg_locator</name>
    <description>class apci_cap_dvsec_cxl_reg_locator</description>
    <member>
      <name>num_vectors</name>
      <type>int</type>
    </member>
    <member>
      <name>reg_bir</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>rsvd</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>reg_block_id</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>reg_block_offset_low</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>reg_block_offset_high</name>
      <type>avery_reg_field</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>num_vectors</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_dvsec_cxl_reg_locator",
		 int num_vectors = 3, apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();  
    </description>
    </function>
  </class>
  <class>
    <name>apci_phy_msg_bus_cmd</name>
    <description>class apci_phy_msg_bus_cmd</description>
    <member>
      <name>is_done</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_p2p_write</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_packed</name>
      <type>bit</type>
    </member>
    <member>
      <name>raw_bytes</name>
      <type>bit</type>
    </member>
    <member>
      <name>serial_wrs</name>
      <type>apci_phy_msg_bus_cmd</type>
    </member>
    <member>
      <name>parent</name>
      <type>apci_phy_msg_bus_cmd</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <parameter>
          <type>apci_msg_bus_cmd_type</type>
          <name>kind</name>
        </parameter>
      </body>
      <description>    function new(`avery_strname apci_msg_bus_cmd_type kind = APCI_MSG_BUS_no_cmd);
    </description>
    </function>
    <function>
      <body>
        <name>is_wr</name>
      </body>
      <description>    virtual function bit is_wr(); return kind inside {APCI_MSG_BUS_wr_committed, APCI_MSG_BUS_wr_uncommitted}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern virtual function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <function>
      <body>
        <name>sprint_bytes</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern virtual function string sprint_bytes(int verbosity = 0, string prefix = "");
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_cxl_cm_reg</name>
    <description>class apci_cap_cxl_cm_reg</description>
    <member>
      <name>cxl_sup</name>
      <type>byte</type>
    </member>
    <member>
      <name>cap_ids</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>cap_versions</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>cap_pointers</name>
      <type>avery_reg_field</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
        <input_arg>
          <type>byte</type>
          <name>cxl_sup</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_cxl_cm_reg", apci_log log = null, byte cxl_sup = 1);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();                                                                                                                                
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
    <function>
      <body>
        <name>reset_cap</name>
        <input_arg>
          <type>apci_rst_e</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    virtual function void reset_cap(apci_rst_e kind);                                                                                                                    
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_dpc</name>
    <description>class apci_cap_dpc</description>
    <member>
      <name>max_end2end_tlp</name>
      <type>int</type>
    </member>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_dpc",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_msi</name>
    <description>class apci_cap_msi</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_msi",
	         apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
    <function>
      <body>
        <name>get_num_vec</name>
      </body>
      <description>    virtual function int get_num_vec();
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_dvsec_gpf_cxl_port</name>
    <description>class apci_cap_dvsec_gpf_cxl_port</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_dvsec_gpf_cxl_port",
            apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_phase1_timeout</name>
      </body>
      <description>    function time get_phase1_timeout();
    </description>
    </function>
    <function>
      <body>
        <name>get_phase2_timeout</name>
      </body>
      <description>    function time get_phase2_timeout();
    </description>
    </function>
  </class>
  <class>
    <name>apci_cfg_info</name>
    <description>class apci_cfg_info</description>
    <member>
      <name>log</name>
      <type>apci_log</type>
    </member>
    <member>
      <name>speed_sup</name>
      <type>byte</type>
    </member>
    <member>
      <name>peer_speed_sup</name>
      <type>byte</type>
    </member>
    <member>
      <name>peer2peer_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>usp_eqts2_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>margin_param_by_phy</name>
      <type>bit</type>
    </member>
    <member>
      <name>ARI_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>SRIOV_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>ATS_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>PRI_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>SRIS_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>expansion_rom_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>null_cap_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>vital_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>msi_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>msix_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>atomicop_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>atomicop_little_endian</name>
      <type>bit</type>
    </member>
    <member>
      <name>vc_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>aer_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>vsec_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>mfvc_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>dsn_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>rc_link_declar_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>rc_int_link_ctrl_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>power_budget_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>power_budget_ctrl_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>acs_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>rcrb_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>mc_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>rbar_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>vf_rbar_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>dpa_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>ltr_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>tph_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>sec_pcie_ext_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>l1_pm_substates_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>dpc_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>sris_modcp_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>dl_feature_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>pasid_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>lnr_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>hierarchy_id_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>rtr_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>sfi_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>native_pcie_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>ptm_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>frs_q_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>wake_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>vga_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>doe_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>ide_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>shadow_func_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>flit_perform_measure_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>flit_err_inject_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>device3_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>cxl_sup</name>
      <type>byte</type>
    </member>
    <member>
      <name>use_rxtermination</name>
      <type>bit</type>
    </member>
    <member>
      <name>DynamicPresetCoefUpdates</name>
      <type>bit</type>
    </member>
    <member>
      <name>PclkAsPhyInput</name>
      <type>byte</type>
    </member>
    <member>
      <name>alt_protocol_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>precoding_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>tx_mod_comp_in_loopbk_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>tx_loopbk_eq</name>
      <type>bit</type>
    </member>
    <member>
      <name>use_low_pin</name>
      <type>byte</type>
    </member>
    <member>
      <name>use_serdes</name>
      <type>bit</type>
    </member>
    <member>
      <name>save_precoding_for_polling_compliance</name>
      <type>bit</type>
    </member>
    <member>
      <name>gen6_pipe_mode</name>
      <type>bit</type>
    </member>
    <member>
      <name>ccix_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>ccix_vendor_id</name>
      <type>bit</type>
    </member>
    <member>
      <name>mctp_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>mctp_vendor_id</name>
      <type>bit</type>
    </member>
    <member>
      <name>rx_skew_tolerance</name>
      <type>int</type>
    </member>
    <member>
      <name>n_physical_func</name>
      <type>int</type>
    </member>
    <member>
      <name>n_vc</name>
      <type>int</type>
    </member>
    <member>
      <name>sriov_rand_num_vfs</name>
      <type>bit</type>
    </member>
    <member>
      <name>replay_timer_tolerance</name>
      <type>int</type>
    </member>
    <member>
      <name>simplified_replay_timer_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>simplified_replay_timer_high</name>
      <type>int</type>
    </member>
    <member>
      <name>simplified_replay_timer_low</name>
      <type>int</type>
    </member>
    <member>
      <name>simplified_replay_timer_ext_sync_high</name>
      <type>int</type>
    </member>
    <member>
      <name>simplified_replay_timer_ext_sync_low</name>
      <type>int</type>
    </member>
    <struct>
      <name>opt_errors</name>
      <arv>
        <name>uncor_internal_err</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>corrected_internal_err</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>byte_enable</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>cross_4k</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>io_req</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>cfg_req</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>intx_msg_upstream</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>cross_rcb</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>framing_err_8b10b</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>framing_err_128b</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>receiver_err_in_Recovery</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>receiver_err_in_Disabled</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>receiver_err_in_HotReset</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rx_mal_tlp_update_fc</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>route_to_rc_err_downstream</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>broadcast_from_rc_err_upstream</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>vendor_type0_sup</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>max_pasid_width_chk</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>ur_for_ecrc_err</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>drs_msg_chk</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>frs_msg_chk</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>hid_msg_chk</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>cor_err_for_poisoned_tlp</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>mal_unexpected_cpl</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>mal_retry_cpl</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>dstate_is_uc</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>cpl_timeout_recv_cnt</name>
        <type>int</type>
      </arv>
    </struct>
    <member>
      <name>link_err_to_recovery</name>
      <type>bit</type>
    </member>
    <member>
      <name>user_phy_cb</name>
      <type>bit</type>
    </member>
    <member>
      <name>max_performance</name>
      <type>bit</type>
    </member>
    <member>
      <name>use_sw_bar</name>
      <type>bit</type>
    </member>
    <member>
      <name>disable_bars</name>
      <type>bit</type>
    </member>
    <member>
      <name>ensure_mem_bar</name>
      <type>bit</type>
    </member>
    <member>
      <name>min_skp_interval_8b10b</name>
      <type>int</type>
    </member>
    <member>
      <name>max_skp_interval_8b10b</name>
      <type>int</type>
    </member>
    <member>
      <name>tolerance_skp_8b10b</name>
      <type>int</type>
    </member>
    <member>
      <name>min_skp_interval_128b</name>
      <type>int</type>
    </member>
    <member>
      <name>max_skp_interval_128b</name>
      <type>int</type>
    </member>
    <member>
      <name>tolerance_skp_128b</name>
      <type>int</type>
    </member>
    <member>
      <name>min_skp_interval_1b1b</name>
      <type>int</type>
    </member>
    <member>
      <name>max_skp_interval_1b1b</name>
      <type>int</type>
    </member>
    <member>
      <name>tolerance_skp_1b1b</name>
      <type>int</type>
    </member>
    <member>
      <name>SRIS_skp_interval_8b10b</name>
      <type>int</type>
    </member>
    <member>
      <name>SRIS_skp_interval_128b</name>
      <type>int</type>
    </member>
    <member>
      <name>SRIS_skp_interval_1b1b</name>
      <type>int</type>
    </member>
    <member>
      <name>tolerance_lowbound_skp_8b10b</name>
      <type>int</type>
    </member>
    <member>
      <name>tolerance_lowbound_skp_128b</name>
      <type>int</type>
    </member>
    <member>
      <name>lowbound_skp_interval_chk</name>
      <type>bit</type>
    </member>
    <member>
      <name>idle_to_rlock_cnt</name>
      <type>int</type>
    </member>
    <member>
      <name>max_gen4_compliance_setting_cnt</name>
      <type>int</type>
    </member>
    <member>
      <name>max_gen5_compliance_setting_cnt</name>
      <type>int</type>
    </member>
    <member>
      <name>max_gen6_compliance_setting_cnt</name>
      <type>int</type>
    </member>
    <member>
      <name>esm_quicksim_scale</name>
      <type>int</type>
    </member>
    <member>
      <name>cpl_timeout_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>cpl_timeout_quicksim_scale</name>
      <type>int</type>
    </member>
    <member>
      <name>bus_enum_timeout</name>
      <type>time</type>
    </member>
    <member>
      <name>bfm_timeout_long</name>
      <type>time</type>
    </member>
    <member>
      <name>WriteCommitted_to_Ack</name>
      <type>int</type>
    </member>
    <member>
      <name>Read_to_ReadCompletion</name>
      <type>int</type>
    </member>
    <member>
      <name>nfts_timeout_8b10b</name>
      <type>int</type>
    </member>
    <member>
      <name>nfts_timeout_128b</name>
      <type>int</type>
    </member>
    <member>
      <name>nfts_extended_sync</name>
      <type>int</type>
    </member>
    <member>
      <name>nfts_tolerance</name>
      <type>int</type>
    </member>
    <member>
      <name>infer_ei_scale</name>
      <type>real</type>
    </member>
    <member>
      <name>TS_MPS_user</name>
      <type>bit</type>
    </member>
    <member>
      <name>TS_MRRS_user</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_quicksim</name>
        </input_arg>
      </body>
      <description>    function new( string   name        = "unamed_cfg_info",
                  apci_log log         = null,
                  bit      is_quicksim = 1
	      );
    </description>
    </function>
    <function>
      <body>
        <name>get_n_pf</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
      </body>
      <description>    function int get_n_pf(int port_id);
    </description>
    </function>
    <function>
      <body>
        <name>use_quicksim</name>
        <input_arg>
          <type>int</type>
          <name>scale</name>
        </input_arg>
      </body>
      <description>    function void use_quicksim (int scale = 0);
    </description>
    </function>
    <function>
      <body>
        <name>use_quicksim_plus</name>
      </body>
      <description>    function void use_quicksim_plus();
    </description>
    </function>
    <function>
      <body>
        <name>sanity_check</name>
      </body>
      <description>    function void sanity_check();
    </description>
    </function>
  </class>
  <class>
    <name>acxl_pm_msg</name>
    <description>class acxl_pm_msg</description>
    <member>
      <name>port_id</name>
      <type>int</type>
    </member>
    <member>
      <name>bytes</name>
      <type>bit</type>
    </member>
    <member>
      <name>dwords</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_done</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>acxl_pm_msg_type</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    function new(string name="", acxl_pm_msg_type kind = ACXL_PM_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>to_apci_tr</name>
      </body>
      <description>    function apci_transaction to_apci_tr();
    </description>
    </function>
    <function>
      <body>
        <name>from_vdm_tlp</name>
        <input_arg>
          <type>apci_tlp</type>
          <name>tlp</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
      </body>
      <description>    function void from_vdm_tlp(apci_tlp tlp, apci_log log, output bit err);
    </description>
    </function>
    <function>
      <body>
        <name>is_request</name>
      </body>
      <description>    function bit is_request   (); return u.pmreq.is_req; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_response</name>
      </body>
      <description>    function bit is_response  (); return !u.pmreq.is_req; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_agent_info</name>
      </body>
      <description>    function bit is_agent_info(); return u.pmreq.opcode == ACXL_PM_agent_info; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_reset_prep</name>
      </body>
      <description>    function bit is_reset_prep(); return u.pmreq.opcode == ACXL_PM_reset_prep; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_credit_rtn</name>
      </body>
      <description>    function bit is_credit_rtn(); return u.pmreq.opcode == ACXL_PM_credit_rtn; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_gpf</name>
      </body>
      <description>    function bit is_gpf       (); return u.pmreq.opcode == ACXL_PM_gpf       ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_pmreq</name>
      </body>
      <description>    function bit is_pmreq     (); return (u.pmreq.opcode == ACXL_PM_pmreq &amp;&amp; !u.pmreq.go &amp;&amp;  u.pmreq.is_req); endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_pmrsp</name>
      </body>
      <description>    function bit is_pmrsp     (); return (u.pmreq.opcode == ACXL_PM_pmreq &amp;&amp; !u.pmreq.go &amp;&amp; !u.pmreq.is_req); endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_pmgo</name>
      </body>
      <description>    function bit is_pmgo      (); return (u.pmreq.opcode == ACXL_PM_pmreq &amp;&amp;  u.pmreq.go                   ); endfunction
    </description>
    </function>
    <function>
      <body>
        <name>not_use_credit</name>
      </body>
      <description>    function bit not_use_credit(); return u.pmreq.opcode inside {ACXL_PM_credit_rtn, ACXL_PM_gpf}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>require_rsp</name>
      </body>
      <description>    function bit require_rsp(); return (is_request() &amp;&amp; u.pmreq.opcode inside {ACXL_PM_agent_info, ACXL_PM_reset_prep, ACXL_PM_gpf}); endfunction
    </description>
    </function>
    <function>
      <body>
        <name>use_credit</name>
      </body>
      <description>    function bit use_credit()    ; return !not_use_credit(); endfunction
    </description>
    </function>
    <task>
      <body>
        <name>wait_done</name>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    extern virtual task wait_done(time timer = 0, string msg = "");
    </description>
    </task>
  </class>
  <class>
    <name>apci_cap_mfvc</name>
    <description>class apci_cap_mfvc</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_mfvc",	apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>acxl_bias_tr</name>
    <description>class acxl_bias_tr</description>
    <member>
      <name>{</name>
      <type>bit</type>
    </member>
    <member>
      <name>addr</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_done</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    extern function new(string name= "");
    </description>
    </function>
    <task>
      <body>
        <name>wait_done</name>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    extern virtual task    wait_done(time timer = 0, string msg = "");
    </description>
    </task>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern virtual function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_pri</name>
    <description>class apci_cap_pri</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_pri",
	         apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cdat_dslbis</name>
    <description>class acxl_cdat_dslbis</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    function new(string name = "acxl_cdat_dslbis");
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_get_timestamp</name>
    <description>class acxl_cmd_get_timestamp</description>
    <struct>
      <name>out</name>
      <arv>
        <name>timestamp</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_get_timestamp); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_get_supported_logs</name>
    <description>class acxl_cmd_get_supported_logs</description>
    <struct>
      <name>out</name>
      <arv>
        <name>rsvd2</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>num_log_entries</name>
        <type>bit</type>
      </arv>
    </struct>
    <struct>
      <name>log_entries</name>
      <arv>
        <name>log_size</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>log_id</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_get_supported_logs); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_msix_table</name>
    <description>class apci_msix_table</description>
    <member>
      <name>log</name>
      <type>apci_log</type>
    </member>
    <member>
      <name>num_vectors</name>
      <type>int</type>
    </member>
    <member>
      <name>msg_addr</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>msg_upper_addr</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>msg_data</name>
      <type>avery_reg_field</type>
    </member>
    <member>
      <name>mask_bit</name>
      <type>avery_reg_field</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>num_vectors</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_msix_table", int num_vectors, apci_log log = null);
    </description>
    </function>
    <function>
      <body>
        <name>fwrite_cb</name>
        <input_arg>
          <type>avery_reg_field</type>
          <name>f</name>
        </input_arg>
        <input_arg>
          <type>avery_reg_val_t</type>
          <name>old_v</name>
        </input_arg>
      </body>
      <description>    virtual function void fwrite_cb(avery_reg_field f, avery_reg_val_t old_v);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
  </class>
  <class>
    <name>avery_component</name>
    <description>class avery_component</description>
    <member>
      <name>name</name>
      <type>string</type>
    </member>
    <member>
      <name>inst</name>
      <type>string</type>
    </member>
    <member>
      <name>parent</name>
      <type>avery_component</type>
    </member>
    <member>
      <name>log</name>
      <type>avery_log</type>
    </member>
    <member>
      <name>avy_id</name>
      <type>int</type>
    </member>
    <member>
      <name>avery_dump_all</name>
      <type>bit</type>
    </member>
    <member>
      <name>_flushed</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>`avery_xvm_parent</name>
        </input_arg>
      </body>
      <description>    function new( string   name,
                  `avery_xvm_parent);
    </description>
    </function>
    <function>
      <body>
        <name>get_name</name>
      </body>
      <description>    virtual function string get_name();
    </description>
    </function>
    <function>
      <body>
        <name>check_result</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
      </body>
      <description>    virtual function bit check_result( int verbosity = 0 );
    </description>
    </function>
    <task>
      <body>
        <name>end_sim_cb</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    virtual task end_sim_cb(string msg = "");
    </description>
    </task>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    virtual function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <function>
      <body>
        <name>aprint</name>
        <input_arg>
          <type>int</type>
          <name>file</name>
        </input_arg>
        <ref_arg>
          <type>string</type>
          <name>msg</name>
        </ref_arg>
        <input_arg>
          <type>int</type>
          <name>id</name>
        </input_arg>
      </body>
      <description>    virtual function void aprint(int file, ref string msg, input int id = 0);
    </description>
    </function>
    <function>
      <body>
        <name>aprint_set_file</name>
        <input_arg>
          <type>int</type>
          <name>file</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>filename</name>
        </input_arg>
      </body>
      <description>    virtual function void aprint_set_file(int file, string filename);
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_dl_feature</name>
    <description>class apci_cap_dl_feature</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_dl_feature",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>apci_seq_util</name>
    <description>class apci_seq_util</description>
    <member>
      <name>ok</name>
      <type>bit</type>
    </member>
    <member>
      <name>dev_type</name>
      <type>int</type>
    </member>
    <member>
      <name>dut_dev_type</name>
      <type>int</type>
    </member>
    <member>
      <name>sw</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>ep0</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>ep_bfms</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>all_bfms</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>all_masters</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>all_duts</name>
      <type>apci_device</type>
    </member>
    <member>
      <name>dut1_bfm</name>
      <type>apci_device</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>apci_device</type>
          <name>bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_device</type>
          <name>rc_app_bfm</name>
        </input_arg>
        <input_arg>
          <type>apci_device</type>
          <name>target</name>
        </input_arg>
        <input_arg>
          <type>apci_testcase_base</type>
          <name>testcase</name>
        </input_arg>
      </body>
      <description>    function new(apci_device bfm, apci_device rc_app_bfm = null, apci_device target = null, apci_testcase_base testcase = null);
    </description>
    </function>
    <task>
      <body>
        <name>update_vf_bdf</name>
        <ref_arg>
          <type>apci_device_mgr</type>
          <name>mgr</name>
        </ref_arg>
      </body>
      <description>    virtual task update_vf_bdf(ref apci_device_mgr mgr);
    </description>
    </task>
    <function>
      <body>
        <name>get_func_info_by_bdf</name>
        <input_arg>
          <type>int</type>
          <name>bdf</name>
        </input_arg>
        <ref_arg>
          <type>apci_device_mgr</type>
          <name>mgrs</name>
        </ref_arg>
      </body>
      <description>    virtual function apci_func_info get_func_info_by_bdf (int bdf, ref apci_device_mgr mgrs      );
    </description>
    </function>
    <function>
      <body>
        <name>get_func_info_by_dev</name>
        <input_arg>
          <type>apci_device</type>
          <name>tgt_dev</name>
        </input_arg>
        <input_arg>
          <type>apci_device_mgr</type>
          <name>mgrs</name>
        </input_arg>
      </body>
      <description>    virtual function apci_func_info get_func_info_by_dev(apci_device tgt_dev, apci_device_mgr mgrs      ); 
    </description>
    </function>
    <function>
      <body>
        <name>get_mgr_by_dev</name>
        <input_arg>
          <type>apci_device</type>
          <name>tgt_dev</name>
        </input_arg>
        <input_arg>
          <type>apci_device_mgr</type>
          <name>mgrs</name>
        </input_arg>
      </body>
      <description>    virtual function apci_device_mgr get_mgr_by_dev(apci_device tgt_dev, apci_device_mgr mgrs      );
    </description>
    </function>
    <task>
      <body>
        <name>fetch_cfg_space</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>tgt</name>
        </input_arg>
        <output_arg>
          <type>apci_cfg_space</type>
          <name>cs</name>
        </output_arg>
        <ref_arg>
          <type>bit</type>
          <name>raw_dwords</name>
        </ref_arg>
      </body>
      <description>    virtual task fetch_cfg_space(apci_bdf_t tgt, output apci_cfg_space cs, ref bit       raw_dwords      );
    </description>
    </task>
    <function>
      <body>
        <name>detect_wmsk</name>
        <input_arg>
          <type>bit</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    local function bit       detect_wmsk(bit       v);
    </description>
    </function>
    <function>
      <body>
        <name>collect_dut_funcs</name>
        <ref_arg>
          <type>apci_device_mgr</type>
          <name>mgrs</name>
        </ref_arg>
        <ref_arg>
          <type>apci_func_info</type>
          <name>funcs</name>
        </ref_arg>
        <input_arg>
          <type>string</type>
          <name>mode</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>sorting</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>num_vfs</name>
        </input_arg>
      </body>
      <description>    static function void collect_dut_funcs(
            ref   apci_device_mgr mgrs        ,
            ref   apci_func_info  funcs       ,
            input string          mode    = "",
            input string          sorting = "",
            input int             num_vfs = 5 );
    </description>
    </function>
    <task>
      <body>
        <name>collect_link_partner_info</name>
        <input_arg>
          <type>apci_device</type>
          <name>me</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>port</name>
        </input_arg>
        <output_arg>
          <type>apci_func_info</type>
          <name>funcs</name>
        </output_arg>
      </body>
      <description>    virtual task collect_link_partner_info(apci_device me, int port, output apci_func_info funcs      );
    </description>
    </task>
    <task>
      <body>
        <name>check_switch_atomic_routing</name>
        <output_arg>
          <type>int</type>
          <name>atomic_routing_sup</name>
        </output_arg>
      </body>
      <description>    virtual task check_switch_atomic_routing(output int atomic_routing_sup);
    </description>
    </task>
    <task>
      <body>
        <name>set_err_rpt_enable</name>
        <input_arg>
          <type>apci_device_mgr</type>
          <name>mgrs</name>
        </input_arg>
        <input_arg>
          <type>apci_func_info</type>
          <name>tgt_func</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>tgt_val</name>
        </input_arg>
      </body>
      <description>    virtual task set_err_rpt_enable(apci_device_mgr mgrs, apci_func_info tgt_func, bit       tgt_val);
    </description>
    </task>
    <task>
      <body>
        <name>check_cap_exist</name>
        <input_arg>
          <type>apci_capability</type>
          <name>cap</name>
        </input_arg>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <output_arg>
          <type>int</type>
          <name>found</name>
        </output_arg>
      </body>
      <description>    virtual task check_cap_exist(
	    input apci_capability cap,
	    input apci_bdf_t bdf,
	    output int found
	);
    </description>
    </task>
    <task>
      <body>
        <name>search_cap</name>
        <input_arg>
          <type>apci_capability</type>
          <name>cap</name>
        </input_arg>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>cap_addrs</name>
        </output_arg>
      </body>
      <description>    virtual task search_cap(
        input  apci_capability  cap,
	       apci_bdf_t	bdf,
        output bit       	cap_addrs      
        );
    </description>
    </task>
    <task>
      <body>
        <name>wait_rx_ufc</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>vc_id</name>
        </input_arg>
        <input_arg>
          <type>apci_dllp_type</type>
          <name>t</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>fc_h</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>fc_d</name>
        </input_arg>
        <output_arg>
          <type>apci_dllp</type>
          <name>dp</name>
        </output_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    virtual task wait_rx_ufc(
	input  int	      port_id = 0,
	input  int            vc_id = 0,
        input  apci_dllp_type t,
        input  int	      fc_h = 0,
	input  int	      fc_d = 0,
        output apci_dllp      dp,
        input  time	      timer = 0, 
        input  string	      msg = ""
        );
    </description>
    </task>
    <task>
      <body>
        <name>wait_tx_acknak</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>apci_dllp_type</type>
          <name>t</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>seq_num</name>
        </input_arg>
        <output_arg>
          <type>apci_dllp</type>
          <name>dp</name>
        </output_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    virtual task wait_tx_acknak(
	input  int	      port_id = 0,
	input  apci_dllp_type t,
	input  int	      seq_num = 0,
	output apci_dllp      dp,
	input  time	      timer = 0, 
	input  string	      msg = ""
	);
    </description>
    </task>
    <task>
      <body>
        <name>wait_rx_acknak</name>
        <input_arg>
          <type>int</type>
          <name>port_id</name>
        </input_arg>
        <input_arg>
          <type>apci_dllp_type</type>
          <name>t</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>seq_num</name>
        </input_arg>
        <output_arg>
          <type>apci_dllp</type>
          <name>dp</name>
        </output_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    virtual task wait_rx_acknak(
	input  int	      port_id = 0,
	input  apci_dllp_type t,
	input  int	      seq_num = 0,
	output apci_dllp      dp,
	input  time	      timer = 0, 
	input  string	      msg = ""
	);
    </description>
    </task>
    <task>
      <body>
        <name>get_target_func_info</name>
        <output_arg>
          <type>apci_func_info</type>
          <name>tgt_finfs</name>
        </output_arg>
        <input_arg>
          <type>string</type>
          <name>mode</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>num_vfs</name>
        </input_arg>
      </body>
      <description>    virtual task get_target_func_info(output apci_func_info tgt_finfs      , input string mode = "", input int num_vfs = 5); 
    </description>
    </task>
    <task>
      <body>
        <name>get_target_mgr</name>
        <output_arg>
          <type>apci_device_mgr</type>
          <name>tgt_mgrs</name>
        </output_arg>
      </body>
      <description>    virtual task get_target_mgr(output apci_device_mgr tgt_mgrs      ); 
    </description>
    </task>
    <task>
      <body>
        <name>get_ep_devices</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <ref_arg>
          <type>apci_device</type>
          <name>all_devs_q</name>
        </ref_arg>
        <ref_arg>
          <type>apci_device</type>
          <name>tgt_devs_q</name>
        </ref_arg>
      </body>
      <description>	virtual task get_ep_devices(input apci_bdf_t bdf, ref apci_device all_devs_q      , ref apci_device tgt_devs_q      );
    </description>
    </task>
    <task>
      <body>
        <name>get_target_speeds</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>f</name>
        </input_arg>
        <output_arg>
          <type>int</type>
          <name>highest_rate</name>
        </output_arg>
        <output_arg>
          <type>int</type>
          <name>target_speeds</name>
        </output_arg>
        <input_arg>
          <type>bit</type>
          <name>disable_eq_bypass</name>
        </input_arg>
      </body>
      <description>    virtual task get_target_speeds(input apci_func_info f, output int highest_rate, output int target_speeds      , input bit disable_eq_bypass = 0); 
    </description>
    </task>
    <task>
      <body>
        <name>disable_gen5_eq_bypass</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>f</name>
        </input_arg>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>dn_bdf</name>
        </input_arg>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>up_bdf</name>
        </input_arg>
      </body>
      <description>    virtual task disable_gen5_eq_bypass(input apci_func_info f = null, input apci_bdf_t dn_bdf = 0, input apci_bdf_t up_bdf = 0);
    </description>
    </task>
    <function>
      <body>
        <name>backdoor_bfm_gen5_eq_option</name>
        <input_arg>
          <type>apci_link_behavior_ctrl_e</type>
          <name>eq_option</name>
        </input_arg>
        <input_arg>
          <type>apci_device</type>
          <name>all_bfms</name>
        </input_arg>
      </body>
      <description>    virtual function void backdoor_bfm_gen5_eq_option (apci_link_behavior_ctrl_e eq_option, apci_device all_bfms      );
    </description>
    </function>
    <task>
      <body>
        <name>get_link_partner_bdf</name>
        <input_arg>
          <type>apci_device</type>
          <name>me</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>port</name>
        </input_arg>
        <output_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </output_arg>
      </body>
      <description>    virtual task get_link_partner_bdf(apci_device me, int port, output apci_bdf_t bdf);
    </description>
    </task>
    <task>
      <body>
        <name>get_link_partner_info</name>
        <input_arg>
          <type>apci_device</type>
          <name>me</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>port</name>
        </input_arg>
        <output_arg>
          <type>apci_func_info</type>
          <name>peer</name>
        </output_arg>
      </body>
      <description>    virtual task get_link_partner_info(apci_device me, int port, output apci_func_info peer);
    </description>
    </task>
    <task>
      <body>
        <name>get_link_partner_mgr</name>
        <input_arg>
          <type>apci_device</type>
          <name>me</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>port</name>
        </input_arg>
        <output_arg>
          <type>apci_device_mgr</type>
          <name>peer</name>
        </output_arg>
      </body>
      <description>    virtual task get_link_partner_mgr(apci_device me, int port, output apci_device_mgr peer);
    </description>
    </task>
    <task>
      <body>
        <name>get_link_bdf</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>f</name>
        </input_arg>
        <output_arg>
          <type>apci_bdf_t</type>
          <name>dn_port_bdf</name>
        </output_arg>
        <output_arg>
          <type>apci_bdf_t</type>
          <name>up_port_bdf</name>
        </output_arg>
      </body>
      <description>    virtual task get_link_bdf(apci_func_info f, output apci_bdf_t dn_port_bdf, output apci_bdf_t up_port_bdf);
    </description>
    </task>
    <task>
      <body>
        <name>get_link_width</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <output_arg>
          <type>int</type>
          <name>link_width</name>
        </output_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
      </body>
      <description>    virtual task get_link_width(apci_bdf_t bdf, output int link_width, output bit err);
    </description>
    </task>
    <task>
      <body>
        <name>get_highest_common_rate</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>f</name>
        </input_arg>
        <output_arg>
          <type>int</type>
          <name>highest_rate</name>
        </output_arg>
      </body>
      <description>    virtual task get_highest_common_rate(apci_func_info f, output int highest_rate);
    </description>
    </task>
    <function>
      <body>
        <name>speed_to_rate</name>
        <input_arg>
          <type>bit</type>
          <name>sp</name>
        </input_arg>
      </body>
      <description>    local function bit       speed_to_rate(bit       sp);
    </description>
    </function>
    <task>
      <body>
        <name>do_dl_down_rst</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
      </body>
      <description>    virtual task do_dl_down_rst(input apci_func_info func, output bit err);
    </description>
    </task>
    <task>
      <body>
        <name>do_2nd_bus_rst</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
      </body>
      <description>    virtual task do_2nd_bus_rst(input apci_func_info func, output bit err);
    </description>
    </task>
    <task>
      <body>
        <name>do_flr</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
        <output_arg>
          <type>bit</type>
          <name>na</name>
        </output_arg>
      </body>
      <description>    virtual task do_flr(input apci_func_info func, output bit err, output bit na);
    </description>
    </task>
    <task>
      <body>
        <name>read_secondary_bdf</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>type1_bdf</name>
        </input_arg>
        <output_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </output_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
        <input_arg>
          <type>string</type>
          <name>caller</name>
        </input_arg>
      </body>
      <description>    virtual task read_secondary_bdf(apci_bdf_t  type1_bdf, output apci_bdf_t bdf, output bit err, input string caller);
    </description>
    </task>
    <task>
      <body>
        <name>program_target_link_speed_if_needed</name>
        <input_arg>
          <type>bit</type>
          <name>err</name>
        </input_arg>
      </body>
      <description>    virtual task program_target_link_speed_if_needed(bit err);
    </description>
    </task>
    <task>
      <body>
        <name>do_speed_change_by_bdf</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>dn_port_bdf</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>new_speed</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>not_applicable</name>
        </output_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
      </body>
      <description>    virtual task do_speed_change_by_bdf(
                   apci_bdf_t dn_port_bdf   ,                      int        new_speed,
            output bit        not_applicable,
            output bit        err);
    </description>
    </task>
    <task>
      <body>
        <name>do_speed_change</name>
        <input_arg>
          <type>int</type>
          <name>new_speed</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
      </body>
      <description>    virtual task do_speed_change(input int new_speed = -1, output bit err);
    </description>
    </task>
    <function>
      <body>
        <name>do_inj_jitter</name>
        <input_arg>
          <type>bit</type>
          <name>negative</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>random</name>
        </input_arg>
        <input_arg>
          <type>apci_device</type>
          <name>all_bfms</name>
        </input_arg>
      </body>
      <description>    virtual function void do_inj_jitter(input bit negative = 0, input bit random = 0, apci_device all_bfms      );
    </description>
    </function>
    <task>
      <body>
        <name>do_linkwidth_change</name>
        <input_arg>
          <type>int</type>
          <name>change_linkwidth</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
      </body>
      <description>    virtual task do_linkwidth_change(input int change_linkwidth = -1, output bit err);
    </description>
    </task>
    <task>
      <body>
        <name>do_hot_reset</name>
      </body>
      <description>    virtual task do_hot_reset();
    </description>
    </task>
    <task>
      <body>
        <name>do_reset</name>
      </body>
      <description>    virtual task do_reset();
    </description>
    </task>
    <task>
      <body>
        <name>do_disabled</name>
      </body>
      <description>    virtual task do_disabled();
    </description>
    </task>
    <task>
      <body>
        <name>do_rst_then_enum_revive</name>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
        <input_arg>
          <type>apci_device</type>
          <name>bfms</name>
        </input_arg>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>skip_bus_master_enable</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>skip_vf_enable</name>
        </input_arg>
      </body>
      <description>    virtual task do_rst_then_enum_revive(
	input string entry = "do_reset",
	input apci_device bfms       = {}, 
	input apci_func_info func = null,
	input bit skip_bus_master_enable = 0, 
	input bit skip_vf_enable = 0
	);
    </description>
    </task>
    <task>
      <body>
        <name>pick_up_non_d0_dstate</name>
        <input_arg>
          <type>apci_device_mgr</type>
          <name>mgrs</name>
        </input_arg>
        <output_arg>
          <type>apci_pm_dstate_e</type>
          <name>dstate</name>
        </output_arg>
        <output_arg>
          <type>bit</type>
          <name>no_soft_rst</name>
        </output_arg>
      </body>
      <description>    virtual task pick_up_non_d0_dstate(
	input apci_device_mgr mgrs      ,
	output apci_pm_dstate_e dstate,
	output bit no_soft_rst
    );
    </description>
    </task>
    <task>
      <body>
        <name>check_dstate_sup</name>
        <input_arg>
          <type>apci_device_mgr</type>
          <name>mgrs</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>d1_sup</name>
        </output_arg>
        <output_arg>
          <type>bit</type>
          <name>d2_sup</name>
        </output_arg>
        <output_arg>
          <type>bit</type>
          <name>no_soft_rst</name>
        </output_arg>
      </body>
      <description>    virtual task check_dstate_sup(
	input apci_device_mgr mgrs      ,
	output bit d1_sup,
	output bit d2_sup,
	output bit no_soft_rst
    );
    </description>
    </task>
    <task>
      <body>
        <name>direct_dstate</name>
        <input_arg>
          <type>apci_pm_dstate_e</type>
          <name>test_mode</name>
        </input_arg>
        <input_arg>
          <type>apci_device_mgr</type>
          <name>mgrs</name>
        </input_arg>
      </body>
      <description>    virtual task direct_dstate(
	input apci_pm_dstate_e test_mode,
	input apci_device_mgr mgrs      
    );
    </description>
    </task>
    <task>
      <body>
        <name>write_power_state</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>apci_pm_dstate_e</type>
          <name>test_mode</name>
        </input_arg>
      </body>
      <description>    virtual task write_power_state (
        input apci_func_info func,
        input apci_pm_dstate_e test_mode
    );
    </description>
    </task>
    <task>
      <body>
        <name>check_end2end_prefix_sup_per_func</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>end2end_prefix_sup</name>
        </output_arg>
        <output_arg>
          <type>byte</type>
          <name>max_end2end_tlp_prefixes</name>
        </output_arg>
        <output_arg>
          <type>bit</type>
          <name>tph_sup</name>
        </output_arg>
        <output_arg>
          <type>bit</type>
          <name>pasid_sup</name>
        </output_arg>
      </body>
      <description>    virtual task check_end2end_prefix_sup_per_func(
	input apci_func_info   func,
	output bit end2end_prefix_sup,
	output byte max_end2end_tlp_prefixes,
	output bit tph_sup,
	output bit pasid_sup
    );
    </description>
    </task>
    <function>
      <body>
        <name>corrupt_ts</name>
        <input_arg>
          <type>apci_os</type>
          <name>os</name>
        </input_arg>
        <input_arg>
          <type>apci_os_type</type>
          <name>corrupt_type</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
        <input_arg>
          <type>integer</type>
          <name>value</name>
        </input_arg>
      </body>
      <description>    virtual function void corrupt_ts(
	input apci_os os,
	input apci_os_type corrupt_type, 
	input string  entry,
	input integer value = -1
	);
    </description>
    </function>
    <function>
      <body>
        <name>make_ts</name>
        <input_arg>
          <type>apci_os</type>
          <name>os</name>
        </input_arg>
        <input_arg>
          <type>apci_symbol_t</type>
          <name>link_num</name>
        </input_arg>
        <input_arg>
          <type>apci_symbol_t</type>
          <name>lane_num</name>
        </input_arg>
        <input_arg>
          <type>apci_symbol_t</type>
          <name>nfts</name>
        </input_arg>
        <input_arg>
          <type>apci_symbol_t</type>
          <name>rate</name>
        </input_arg>
        <input_arg>
          <type>apci_symbol_t</type>
          <name>tc</name>
        </input_arg>
      </body>
      <description>    local function void make_ts(apci_os os, apci_symbol_t link_num, lane_num, nfts, rate, tc);
    </description>
    </function>
    <function>
      <body>
        <name>create_tr</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>write</name>
        </input_arg>
        <input_arg>
          <type>apci_trans_type</type>
          <name>tr_type</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>len</name>
        </input_arg>
      </body>
      <description>    virtual function apci_transaction create_tr (
        apci_func_info func, 
        bit write = -1, 
        apci_trans_type tr_type = APCI_TRANS_unknown, 
        int len = 1
	);
    </description>
    </function>
    <function>
      <body>
        <name>create_tlp</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>apci_cfg_space</type>
          <name>cfg</name>
        </input_arg>
        <input_arg>
          <type>apci_tlp_type</type>
          <name>req_type</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>len_input</name>
        </input_arg>
      </body>
      <description>    virtual function apci_tlp create_tlp(
	apci_func_info func,
	input apci_cfg_space cfg = null,
        apci_tlp_type  req_type = APCI_TLP_unknown,
	bit             len_input = 0
	);
    </description>
    </function>
    <function>
      <body>
        <name>create_err_tlp</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>apci_cfg_space</type>
          <name>cfg</name>
        </input_arg>
        <input_arg>
          <type>apci_tlp_type</type>
          <name>req_type</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>for_ei</name>
        </input_arg>
      </body>
      <description>    virtual function apci_tlp create_err_tlp(
	apci_func_info func,
	apci_cfg_space cfg,
        apci_tlp_type  req_type = APCI_TLP_unknown,
	bit            for_ei = 0
	);
    </description>
    </function>
    <function>
      <body>
        <name>get_random_funcs</name>
        <input_arg>
          <type>apci_device_mgr</type>
          <name>mgrs</name>
        </input_arg>
        <output_arg>
          <type>apci_func_info</type>
          <name>tgt_funcs</name>
        </output_arg>
        <output_arg>
          <type>bit</type>
          <name>found</name>
        </output_arg>
        <input_arg>
          <type>int</type>
          <name>num_funcs</name>
        </input_arg>
      </body>
      <description>    virtual function void get_random_funcs(
	    input  apci_device_mgr  mgrs      ,
	    output apci_func_info   tgt_funcs      ,
	    output bit		    found,
	    input  int              num_funcs = 5
	);
    </description>
    </function>
    <function>
      <body>
        <name>get_imd_dn_port</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
      </body>
      <description>    virtual function apci_bdf_t get_imd_dn_port(apci_func_info func);
    </description>
    </function>
    <task>
      <body>
        <name>do_equalization</name>
        <input_arg>
          <type>int</type>
          <name>target_speed</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
      </body>
      <description>     virtual task do_equalization(
		    int        target_speed,
	     output bit        err
	     );
    </description>
    </task>
    <task>
      <body>
        <name>perform_equal</name>
        <input_arg>
          <type>byte</type>
          <name>target_speed</name>
        </input_arg>
        <input_arg>
          <type>output</type>
          <name>err</name>
        </input_arg>
      </body>
      <description>    task perform_equal(input byte target_speed, output err);
    </description>
    </task>
    <task>
      <body>
        <name>do_err_inj</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>apci_error_type</type>
          <name>et</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <output_arg>
          <type>apci_tlp</type>
          <name>bad_tlp</name>
        </output_arg>
      </body>
      <description>    virtual task do_err_inj(
        input  apci_func_info	func,
	input  apci_error_type	et,
        input  time		timer = 0,
	output apci_tlp		bad_tlp
	  	  	);
    </description>
    </task>
    <task>
      <body>
        <name>malformed_rsvd_tlp</name>
        <input_arg>
          <type>apci_tlp</type>
          <name>p</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
      </body>
      <description>    virtual task malformed_rsvd_tlp (
	input  apci_tlp  p,
	input  string    entry = ""
    );
    </description>
    </task>
    <task>
      <body>
        <name>cfg_access</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_write</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>cfg_addr</name>
        </input_arg>
        <inout_arg>
          <type>avery_u32</type>
          <name>v</name>
        </inout_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
      </body>
      <description>    virtual task cfg_access(
	input  apci_bdf_t    bdf,
               bit           is_write = 0,
	       bit           cfg_addr = 0,
	inout  avery_u32     v,
	output bit	     err
	);
    </description>
    </task>
    <task>
      <body>
        <name>polling_link_training</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>apci_cap_pcie</type>
          <name>pcie_cap</name>
        </input_arg>
        <input_arg>
          <type>avery_u64</type>
          <name>v</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
      </body>
      <description>    virtual task polling_link_training(
            input  apci_bdf_t      bdf  ,      	    apci_cap_pcie	   pcie_cap,                      avery_u64       v    ,                  output bit             err  );         </description>
    </task>
    <task>
      <body>
        <name>polling_cap_change</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>apci_capability</type>
          <name>cap</name>
        </input_arg>
        <input_arg>
          <type>avery_reg_field</type>
          <name>f</name>
        </input_arg>
        <input_arg>
          <type>avery_u64</type>
          <name>v</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
      </body>
      <description>    virtual task polling_cap_change(
            input  apci_bdf_t      bdf  ,                             apci_capability cap  ,                             avery_reg_field f    ,                             avery_u64       v    ,                             time            timer = 0,                  output bit             err  );           </description>
    </task>
    <task>
      <body>
        <name>polling_cap_unchange</name>
        <input_arg>
          <type>bit</type>
          <name>is_keep</name>
        </input_arg>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>apci_capability</type>
          <name>cap</name>
        </input_arg>
        <input_arg>
          <type>avery_reg_field</type>
          <name>f</name>
        </input_arg>
        <input_arg>
          <type>avery_u64</type>
          <name>v</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_dw</name>
        </input_arg>
      </body>
      <description>    virtual task polling_cap_unchange(
	input bit is_keep,   		  apci_bdf_t bdf,   		  apci_capability cap,   		  avery_reg_field f,   		  avery_u64 v = 0,           time 	  timer = 0,   	bit 	  is_dw = 0    	);
    </description>
    </task>
    <task>
      <body>
        <name>set_max_payload_size</name>
        <input_arg>
          <type>apci_device_mgr</type>
          <name>mgrs</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>mps</name>
        </input_arg>
        <output_arg>
          <type>int</type>
          <name>mps_dw</name>
        </output_arg>
      </body>
      <description>    virtual task set_max_payload_size(
	input  apci_device_mgr mgrs      ,
	input  bit       mps,
	output int	mps_dw
    );
    </description>
    </task>
    <task>
      <body>
        <name>set_max_read_req_size</name>
        <input_arg>
          <type>apci_device_mgr</type>
          <name>mgrs</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>mrqs</name>
        </input_arg>
        <output_arg>
          <type>int</type>
          <name>mrqs_dw</name>
        </output_arg>
      </body>
      <description>    virtual task set_max_read_req_size(
	input  apci_device_mgr mgrs      ,
	input  bit       mrqs,
	output int	mrqs_dw
    );
    </description>
    </task>
    <task>
      <body>
        <name>set_highest_mps_mrqs</name>
        <output_arg>
          <type>int</type>
          <name>mps_dw</name>
        </output_arg>
        <output_arg>
          <type>int</type>
          <name>mrqs_dw</name>
        </output_arg>
      </body>
      <description>    virtual task set_highest_mps_mrqs(output int mps_dw, output int mrqs_dw);
    </description>
    </task>
    <task>
      <body>
        <name>check_err_status</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>exp_val</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err_status</name>
        </output_arg>
        <ref_arg>
          <type>string</type>
          <name>s</name>
        </ref_arg>
        <input_arg>
          <type>bit</type>
          <name>mask</name>
        </input_arg>
      </body>
      <description>    virtual task check_err_status(
	input  apci_func_info func,
	input  bit       exp_val,
	output bit       err_status,
	ref    string   s,
	input  bit       mask = 0
    );
    </description>
    </task>
    <task>
      <body>
        <name>clear_err_status</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>aer_exist</name>
        </input_arg>
      </body>
      <description>    virtual task clear_err_status(
	input apci_func_info	func,
	input bit		aer_exist
    );
    </description>
    </task>
    <task>
      <body>
        <name>enable_err_report</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual task enable_err_report(
	input apci_func_info	func,
	input bit      		v = 'b1111 
    );
    </description>
    </task>
    <task>
      <body>
        <name>disable_err_report</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
      </body>
      <description>    virtual task disable_err_report(
	input apci_func_info	func
    );
    </description>
    </task>
    <task>
      <body>
        <name>framing_error_cap_check</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
      </body>
      <description>    virtual task framing_error_cap_check(
	input apci_func_info	func
    );
    </description>
    </task>
    <task>
      <body>
        <name>write_aspm_ctrl</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>new_value</name>
        </input_arg>
      </body>
      <description>    virtual task write_aspm_ctrl (
	input apci_func_info func,
	input bit       new_value
    );
    </description>
    </task>
    <task>
      <body>
        <name>program_aspm_ctrl</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>new_value</name>
        </input_arg>
      </body>
      <description>    virtual task program_aspm_ctrl (
	input  apci_bdf_t bdf,
	input  bit         new_value
    );
    </description>
    </task>
    <task>
      <body>
        <name>program_auto_speed_and_width</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>disable_auto_speed</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>disable_auto_width</name>
        </input_arg>
      </body>
      <description>    virtual task program_auto_speed_and_width(
	    input  apci_bdf_t bdf,
	    input  bit        disable_auto_speed,   	    input  bit        disable_auto_width    	);
    </description>
    </task>
    <task>
      <body>
        <name>wait_ltssm_and_speed</name>
        <input_arg>
          <type>apci_ltssm_state_e</type>
          <name>state</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>speed</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>timeout_msg</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>err</name>
        </input_arg>
      </body>
      <description>    task wait_ltssm_and_speed(
	input apci_ltssm_state_e state,
	input int speed = -1,
        input time timer = test_info.ltssm_1ms_timeout,
        input string timeout_msg = "",
	bit err = 0
	);
    </description>
    </task>
    <task>
      <body>
        <name>verify_eq_status</name>
        <input_arg>
          <type>int</type>
          <name>speed</name>
        </input_arg>
        <input_arg>
          <type>apci_func_info</type>
          <name>dut_func</name>
        </input_arg>
      </body>
      <description>    virtual task verify_eq_status (
	input int speed = -1,
	input apci_func_info dut_func = null
    );
    </description>
    </task>
    <task>
      <body>
        <name>wait_aspm_happen</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>apci_aspm_control_e</type>
          <name>exp_pm_state</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>accept</name>
        </input_arg>
      </body>
      <description>    virtual task wait_aspm_happen (
	input apci_func_info func,
	input apci_aspm_control_e exp_pm_state,
	input bit accept = 1
    );
    </description>
    </task>
    <task>
      <body>
        <name>aspm_support_then_send_cfg</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>apci_aspm_control_e</type>
          <name>aspm_ctrl</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>not_applicable</name>
        </output_arg>
        <output_arg>
          <type>string</type>
          <name>msg</name>
        </output_arg>
      </body>
      <description>    virtual task aspm_support_then_send_cfg(
	input apci_func_info func,
	input apci_aspm_control_e aspm_ctrl,
	output bit not_applicable,
	output string msg
    );
    </description>
    </task>
    <task>
      <body>
        <name>enable_aspm</name>
        <input_arg>
          <type>apci_device_mgr</type>
          <name>mgrs</name>
        </input_arg>
        <input_arg>
          <type>apci_aspm_control_e</type>
          <name>aspm_ctrl</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>not_applicable</name>
        </output_arg>
        <output_arg>
          <type>string</type>
          <name>msg</name>
        </output_arg>
        <input_arg>
          <type>bit</type>
          <name>enter_pkgc_l1</name>
        </input_arg>
      </body>
      <description>    virtual task enable_aspm(
	input apci_device_mgr mgrs      ,
	input apci_aspm_control_e aspm_ctrl,
	output bit not_applicable,
	output string msg,
        input  bit enter_pkgc_l1 = 1
    );
    </description>
    </task>
    <task>
      <body>
        <name>disable_aspm</name>
        <input_arg>
          <type>apci_device_mgr</type>
          <name>mgrs</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>not_applicable</name>
        </output_arg>
        <output_arg>
          <type>string</type>
          <name>msg</name>
        </output_arg>
      </body>
      <description>    virtual task disable_aspm(
	input apci_device_mgr mgrs      ,
	output bit not_applicable,
	output string msg
    );
    </description>
    </task>
    <function>
      <body>
        <name>margin_get_subset_of_lanes</name>
        <input_arg>
          <type>int</type>
          <name>offset</name>
        </input_arg>
        <ref_arg>
          <type>apci_margin_param</type>
          <name>params</name>
        </ref_arg>
        <output_arg>
          <type>int</type>
          <name>lane_mask</name>
        </output_arg>
      </body>
      <description>    virtual function int margin_get_subset_of_lanes(int offset, ref apci_margin_param params      , output int lane_mask);
    </description>
    </function>
    <task>
      <body>
        <name>do_margin_cmd</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>apci_margin_cmd</type>
          <name>cmd</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>lane_no</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>link_width</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
        <ref_arg>
          <type>apci_margin_param</type>
          <name>reports</name>
        </ref_arg>
      </body>
      <description>    virtual task do_margin_cmd(
	    input  apci_func_info     func      ,
	    input  apci_margin_cmd    cmd       ,
            input  int                lane_no   ,               input  int                link_width,
            output bit                err       ,
	    ref    apci_margin_param  reports      
	);
    </description>
    </task>
    <task>
      <body>
        <name>check_margin_ready</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
      </body>
      <description>    virtual task check_margin_ready(
	    input  apci_func_info    func,
	    output bit               err
    	);
    </description>
    </task>
    <task>
      <body>
        <name>do_margin_reports</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>link_width</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
        <ref_arg>
          <type>apci_margin_param</type>
          <name>reports</name>
        </ref_arg>
        <input_arg>
          <type>apci_margin_receiver_num_e</type>
          <name>receiver_num</name>
        </input_arg>
      </body>
      <description>    virtual task do_margin_reports(
	    input  apci_func_info    func,
	    input  int               link_width,
	    output bit               err,
	    ref    apci_margin_param reports      ,
            input apci_margin_receiver_num_e receiver_num = APCI_MARGIN_RX_NUM_reserved
	);
    </description>
    </task>
    <task>
      <body>
        <name>do_margin_broadcast</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>apci_margin_type</type>
          <name>kind</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>link_width</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
        <ref_arg>
          <type>apci_margin_param</type>
          <name>reports</name>
        </ref_arg>
      </body>
      <description>    virtual task do_margin_broadcast(
	    input  apci_func_info     func,
	    input apci_margin_type    kind,
	    input int                 link_width,
            output bit                err,
	    ref    apci_margin_param  reports      
	);
    </description>
    </task>
    <task>
      <body>
        <name>do_margin_acc_retimer_reg</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>apci_margin_receiver_num_e</type>
          <name>rx_num</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>payload</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>link_width</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
        <ref_arg>
          <type>apci_margin_param</type>
          <name>reports</name>
        </ref_arg>
      </body>
      <description>    virtual task do_margin_acc_retimer_reg(
	    input  apci_func_info	      func,
	    input  apci_margin_receiver_num_e rx_num,
	    input  bit      		      payload,
	    input  int			      link_width,
            output bit			      err,
	    ref    apci_margin_param	      reports      
	);
    </description>
    </task>
    <task>
      <body>
        <name>do_margin_set_err_cnt_limit</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>apci_margin_receiver_num_e</type>
          <name>rx_num</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>err_cnt</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>link_width</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
        <ref_arg>
          <type>apci_margin_param</type>
          <name>reports</name>
        </ref_arg>
      </body>
      <description>    virtual task do_margin_set_err_cnt_limit(
	    input  apci_func_info	      func,
	    input  apci_margin_receiver_num_e rx_num,
	    input  bit      		      err_cnt,
	    input  int			      link_width,
            output bit			      err,
	    ref    apci_margin_param	      reports      
	);
    </description>
    </task>
    <task>
      <body>
        <name>do_margin_by_mask</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>apci_margin_cmd</type>
          <name>cmd</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>lane_mask</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
        <ref_arg>
          <type>apci_margin_param</type>
          <name>reports</name>
        </ref_arg>
      </body>
      <description>    virtual task do_margin_by_mask(
	    input  apci_func_info     func          ,
	    input  apci_margin_cmd    cmd           ,
            input  bit                lane_mask     ,               output bit                err           ,
	    ref    apci_margin_param  reports      
	);
    </description>
    </task>
    <task>
      <body>
        <name>do_margin_acc_retimer</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>apci_margin_cmd</type>
          <name>cmd</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>lane_mask</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
        <ref_arg>
          <type>apci_margin_param</type>
          <name>reports</name>
        </ref_arg>
      </body>
      <description>    virtual task do_margin_acc_retimer(
	    input  apci_func_info     func          ,
	    input  apci_margin_cmd    cmd           ,
            input  bit                lane_mask     ,               output bit                err           ,
	    ref    apci_margin_param  reports      
	);
    </description>
    </task>
    <task>
      <body>
        <name>setup_vc</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>index</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>vc_en</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>vc_id</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>tc_vc_map</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>ext_vc_cnt</name>
        </input_arg>
      </body>
      <description>    virtual task setup_vc(apci_bdf_t bdf, bit       index, bit vc_en, bit       vc_id, 
			  bit       tc_vc_map, bit       ext_vc_cnt);
    </description>
    </task>
    <task>
      <body>
        <name>set_msix_vector_mask</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>vec_index</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>mask</name>
        </input_arg>
      </body>
      <description>    virtual task set_msix_vector_mask(apci_bdf_t bdf, int vec_index, bit mask);
    </description>
    </task>
    <task>
      <body>
        <name>set_aer_mask_severity</name>
        <input_arg>
          <type>apci_error_type</type>
          <name>et</name>
        </input_arg>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>mask</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>sev</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_advisory</name>
        </input_arg>
      </body>
      <description>    virtual task set_aer_mask_severity(apci_error_type et, apci_func_info func, bit mask, bit sev, bit is_advisory = 0);
    </description>
    </task>
    <task>
      <body>
        <name>get_tlp_replay_time</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <output_arg>
          <type>time</type>
          <name>replay_timer_timeout_high</name>
        </output_arg>
        <output_arg>
          <type>time</type>
          <name>replay_timer_timeout_low</name>
        </output_arg>
      </body>
      <description>    virtual task get_tlp_replay_time(
        input   apci_func_info func,
         
        output  time replay_timer_timeout_high,
        output  time replay_timer_timeout_low
        );  
    </description>
    </task>
    <task>
      <body>
        <name>set_extended_sync</name>
        <input_arg>
          <type>bit</type>
          <name>enable</name>
        </input_arg>
        <input_arg>
          <type>apci_device_mgr</type>
          <name>mgrs</name>
        </input_arg>
      </body>
      <description>    task set_extended_sync(bit enable, apci_device_mgr mgrs      );
    </description>
    </task>
    <task>
      <body>
        <name>check_ecs_status</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>apci_tlp</type>
          <name>tlp</name>
        </input_arg>
        <input_arg>
          <type>apci_msg_ecs_e</type>
          <name>ecs_type</name>
        </input_arg>
      </body>
      <description>    virtual task check_ecs_status(apci_func_info func, apci_tlp tlp, apci_msg_ecs_e ecs_type);
    </description>
    </task>
    <task>
      <body>
        <name>trigger_dpc</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>apci_dpc_tirgger_reason</type>
          <name>reason</name>
        </input_arg>
      </body>
      <description>    task trigger_dpc(apci_bdf_t bdf, apci_dpc_tirgger_reason reason = APCI_DPC_TRIGGER_ramdon);
    </description>
    </task>
    <task>
      <body>
        <name>use_common_cb</name>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
      </body>
      <description>    virtual task use_common_cb(
        input  string    entry = "drop_eios"
        );
    </description>
    </task>
    <function>
      <body>
        <name>get_cxl_test_alg_base</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>f</name>
        </input_arg>
      </body>
      <description>    virtual function bit       get_cxl_test_alg_base(apci_func_info f);
    </description>
    </function>
    <task>
      <body>
        <name>wait_err_msg</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>exp_msg</name>
        </input_arg>
        <input_arg>
          <type>apci_msg_code_e</type>
          <name>exp_msg_code</name>
        </input_arg>
        <output_arg>
          <type>apci_tlp</type>
          <name>rx_msg</name>
        </output_arg>
      </body>
      <description>    task wait_err_msg(        apci_func_info  func    ,
                              bit             exp_msg ,
			      apci_msg_code_e exp_msg_code,
                       output apci_tlp        rx_msg);
    </description>
    </task>
    <task>
      <body>
        <name>set_ide_register_block</name>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_link_stream</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>index</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>enable</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>stream_id</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>tc</name>
        </input_arg>
      </body>
      <description>    virtual task set_ide_register_block(apci_bdf_t bdf, bit is_link_stream, int index, bit enable, bit       stream_id, bit       tc);
    </description>
    </task>
    <task>
      <body>
        <name>check_status_reg_and_clear</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>func</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>aer_exist</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>mask</name>
        </input_arg>
        <input_arg>
          <type>apci_err_type_e</type>
          <name>exp_err_type</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_correctable</name>
        </input_arg>
      </body>
      <description>    task check_status_reg_and_clear(
	    apci_func_info  func     ,
	    bit             aer_exist,
	    bit             mask     ,
	    apci_err_type_e exp_err_type,
	    bit             is_correctable
	);
    </description>
    </task>
    <task>
      <body>
        <name>prepare_AER_to_report_internal_err</name>
        <input_arg>
          <type>apci_func_info</type>
          <name>finf</name>
        </input_arg>
        <output_arg>
          <type>bit</type>
          <name>err</name>
        </output_arg>
      </body>
      <description>    task prepare_AER_to_report_internal_err(apci_func_info finf, output bit err);
    </description>
    </task>
  </class>
  <class>
    <name>apci_log_callbacks</name>
    <description>class apci_log_callbacks</description>
    <function>
      <body>
        <name>assertion_msg_cb</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <inout_arg>
          <type>bit</type>
          <name>is_disable</name>
        </inout_arg>
        <ref_arg>
          <type>apci_assertion_item</type>
          <name>item</name>
        </ref_arg>
      </body>
      <description>    virtual function void assertion_msg_cb(
			input string msg,
			inout bit is_disable,
			ref apci_assertion_item item
		    );
    </description>
    </function>
    <function>
      <body>
        <name>warn_msg_cb</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <inout_arg>
          <type>bit</type>
          <name>is_disable</name>
        </inout_arg>
      </body>
      <description>    virtual function void warn_msg_cb(
			input string msg,
			inout bit is_disable 
		    );
    </description>
    </function>
    <function>
      <body>
        <name>error_msg_cb</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <inout_arg>
          <type>bit</type>
          <name>is_disable</name>
        </inout_arg>
      </body>
      <description>    virtual function void error_msg_cb(
			input string msg,
			inout bit is_disable 
		    );
    </description>
    </function>
    <function>
      <body>
        <name>fatal_msg_cb</name>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
        <inout_arg>
          <type>bit</type>
          <name>is_disable</name>
        </inout_arg>
      </body>
      <description>    virtual function void fatal_msg_cb(
			input string msg,
			inout bit is_disable
		    );
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_freeze_security_state</name>
    <description>class acxl_cmd_freeze_security_state</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_freeze_security_state); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_alt_protocol</name>
    <description>class apci_cap_alt_protocol</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_alt_protocol",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>acxl_line_tr</name>
    <description>class acxl_line_tr</description>
    <member>
      <name>port_id</name>
      <type>int</type>
    </member>
    <member>
      <name>func_id</name>
      <type>int</type>
    </member>
    <member>
      <name>addr</name>
      <type>bit</type>
    </member>
    <member>
      <name>bytes</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_done</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_issued</name>
      <type>bit</type>
    </member>
    <struct>
      <name>user_ctrl</name>
      <arv>
        <name>allocate_if_cache_miss</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>acxl_line_tr_type</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    extern function new(string name= "", acxl_line_tr_type kind = ACXL_LT_store);
    </description>
    </function>
    <function>
      <body>
        <name>pre_randomize</name>
      </body>
      <description>    function void pre_randomize(); endfunction
    </description>
    </function>
    <function>
      <body>
        <name>copy</name>
        <input_arg>
          <type>acxl_line_tr</type>
          <name>to</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>level</name>
        </input_arg>
      </body>
      <description>    extern function acxl_line_tr copy  (acxl_line_tr to = null, int level = -1);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern function string   sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <function>
      <body>
        <name>is_CacheFlushed</name>
      </body>
      <description>    virtual function bit is_CacheFlushed(); 
    </description>
    </function>
    <function>
      <body>
        <name>is_store</name>
      </body>
      <description>    virtual function bit is_store();
    </description>
    </function>
    <function>
      <body>
        <name>is_load</name>
      </body>
      <description>    virtual function bit is_load();
    </description>
    </function>
    <task>
      <body>
        <name>wait_done</name>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    extern task          wait_done(time timer = 0, string msg = "");
    </description>
    </task>
    <function>
      <body>
        <name>annotate</name>
        <input_arg>
          <type>string</type>
          <name>s</name>
        </input_arg>
      </body>
      <description>    extern virtual function void annotate(string s);
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_get_sld_qos_status</name>
    <description>class acxl_cmd_get_sld_qos_status</description>
    <struct>
      <name>out</name>
      <arv>
        <name>backpressure_average_percentage</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_get_sld_qos_status); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_genz_pkt</name>
    <description>class apci_genz_pkt</description>
  </class>
  <class>
    <name>apci_cap_aer</name>
    <description>class apci_cap_aer</description>
    <member>
      <name>pcie_cap</name>
      <type>apci_cap_pcie</type>
    </member>
    <member>
      <name>end2end_tlp_prefix</name>
      <type>int</type>
    </member>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>post_randomize</name>
      </body>
      <description>    function void post_randomize();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_aer",
	         apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
        <input_arg>
          <type>bit</type>
          <name>pcie_cap_end2end</name>
        </input_arg>
      </body>
      <description>    virtual function bit       get_cap_size(bit pcie_cap_end2end);
    </description>
    </function>
  </class>
  <class>
    <name>avery_param_log</name>
    <description>class avery_param_log</description>
    <member>
      <name>cvg_report_file</name>
      <type>int</type>
    </member>
    <member>
      <name>dbg_flag</name>
      <type>bit</type>
    </member>
    <member>
      <name>dbg_flag_visited</name>
      <type>int</type>
    </member>
    <member>
      <name>unknown_assert_q</name>
      <type>string</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>`avery_xvm_parent</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>product_name</name>
        </input_arg>
      </body>
      <description>    extern function new(string name, `avery_xvm_parent, string product_name = "AVY");
    </description>
    </function>
  </class>
  <class>
    <name>apci_pif_wrapper</name>
    <description>class apci_pif_wrapper</description>
    <function>
      <body>
        <name>new</name>
        <parameter>
          <type>apci_pipe_intf</type>
          <name>pipe_ifs</name>
        </parameter>
      </body>
      <description>    function new(virtual apci_pipe_intf pipe_ifs       = '{});
    </description>
    </function>
  </class>
  <class>
    <name>apci_flit</name>
    <description>class apci_flit</description>
    <member>
      <name>tlp_bytes</name>
      <type>bit</type>
    </member>
    <member>
      <name>crc</name>
      <type>bit</type>
    </member>
    <member>
      <name>ecc</name>
      <type>bit</type>
    </member>
    <member>
      <name>crc_calc</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_done</name>
      <type>bit</type>
    </member>
    <struct>
      <name>user_ctrl</name>
      <arv>
        <name>is_drop</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>is_nullify</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>`avery_new_named</name>
        <input_arg>
          <type>apci_flit_type</type>
          <name>kind</name>
        </input_arg>
      </body>
      <description>    extern function `avery_new_named(apci_flit_type kind = APCI_FLIT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>pre_randomize</name>
      </body>
      <description>    function void pre_randomize(); endfunction
    </description>
    </function>
    <function>
      <body>
        <name>copy</name>
        <input_arg>
          <type>apci_flit</type>
          <name>to</name>
        </input_arg>
        <input_arg>
          <type>int</type>
          <name>level</name>
        </input_arg>
      </body>
      <description>    extern function apci_flit copy  (apci_flit to = null, int level = -1);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern function string   sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <function>
      <body>
        <name>sprint_tlp_dllp</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern function string   sprint_tlp_dllp(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <function>
      <body>
        <name>compare</name>
        <input_arg>
          <type>apci_flit</type>
          <name>to</name>
        </input_arg>
        <ref_arg>
          <type>string</type>
          <name>diff</name>
        </ref_arg>
      </body>
      <description>    extern function bit compare(apci_flit to, ref string diff);
    </description>
    </function>
    <function>
      <body>
        <name>rehash_crc</name>
      </body>
      <description>    extern function void rehash_crc();
    </description>
    </function>
    <function>
      <body>
        <name>rehash_ecc</name>
      </body>
      <description>    extern function void rehash_ecc();
    </description>
    </function>
    <function>
      <body>
        <name>pack_raw_bytes</name>
      </body>
      <description>    extern function void pack_raw_bytes();
    </description>
    </function>
    <task>
      <body>
        <name>wait_sent</name>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    extern virtual task wait_sent(string entry, time timer = 0, string msg = "");
    </description>
    </task>
    <function>
      <body>
        <name>is_replayed</name>
      </body>
      <description>    extern function bit is_replayed();
    </description>
    </function>
    <function>
      <body>
        <name>has_explict_seq_num</name>
      </body>
      <description>    function bit has_explict_seq_num(); return dllp.replay_cmd == APCI_FLIT_REPLAY_CMD_tx_seq; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_ack</name>
      </body>
      <description>    function bit is_ack();      return dllp.replay_cmd == APCI_FLIT_REPLAY_CMD_ack; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_nak</name>
      </body>
      <description>    function bit is_nak();      return is_std_nak() || is_sel_nak(); endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_std_nak</name>
      </body>
      <description>    function bit is_std_nak();  return dllp.replay_cmd == APCI_FLIT_REPLAY_CMD_std_nak; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_sel_nak</name>
      </body>
      <description>    function bit is_sel_nak();  return dllp.replay_cmd == APCI_FLIT_REPLAY_CMD_sel_nak; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_idle</name>
      </body>
      <description>    function bit is_idle();     return kind == APCI_FLIT_idle; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_nop</name>
      </body>
      <description>    function bit is_nop();      return kind == APCI_FLIT_nop; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_payload</name>
      </body>
      <description>    function bit is_payload();  return kind == APCI_FLIT_payload; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_pasid</name>
    <description>class apci_cap_pasid</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_pasid",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
      </body>
      <description>    virtual function bit       get_cap_size();
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_dvsec_cxl_device</name>
    <description>class apci_cap_dvsec_cxl_device</description>
    <function>
      <body>
        <name>collect_hdm_ranges</name>
        <ref_arg>
          <type>apci_addr_range_t</type>
          <name>ranges</name>
        </ref_arg>
      </body>
      <description>    function void collect_hdm_ranges(ref apci_addr_range_t ranges      );
    </description>
    </function>
    <function>
      <body>
        <name>get_mem_size_range1</name>
      </body>
      <description>    function bit       get_mem_size_range1();
    </description>
    </function>
    <function>
      <body>
        <name>get_mem_size_range2</name>
      </body>
      <description>    function bit       get_mem_size_range2();
    </description>
    </function>
    <function>
      <body>
        <name>get_mem_base_range1</name>
      </body>
      <description>    function bit       get_mem_base_range1();
    </description>
    </function>
    <function>
      <body>
        <name>get_mem_base_range2</name>
      </body>
      <description>    function bit       get_mem_base_range2();
    </description>
    </function>
    <function>
      <body>
        <name>get_cxl_reset_timeout_ms</name>
      </body>
      <description>    function bit       get_cxl_reset_timeout_ms();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_dvsec_cxl_device",
            apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
  </class>
  <class>
    <name>apci_packet</name>
    <description>class apci_packet</description>
    <member>
      <name>port_id</name>
      <type>int</type>
    </member>
    <member>
      <name>func_id</name>
      <type>int</type>
    </member>
    <member>
      <name>is_8b10b</name>
      <type>bit</type>
    </member>
    <member>
      <name>link_speed</name>
      <type>byte</type>
    </member>
    <member>
      <name>link_width</name>
      <type>byte</type>
    </member>
    <member>
      <name>start_lane_no</name>
      <type>byte</type>
    </member>
    <member>
      <name>is_flit_mode</name>
      <type>bit</type>
    </member>
    <struct>
      <name>user_ctrl</name>
      <arv>
        <name>is_ei</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>is_drop</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>is_nullify</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>pack_hdr</name>
        <type>byte</type>
      </arv>
      <arv>
        <name>pack_ecrc</name>
        <type>byte</type>
      </arv>
      <arv>
        <name>not_consume_tag</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>not_consume_fc</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>eds_drop_os</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rsp_nak</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>rsp_ack</name>
        <type>byte</type>
      </arv>
      <arv>
        <name>rsp_ufc</name>
        <type>byte</type>
      </arv>
      <arv>
        <name>vendor_hdr_crd</name>
        <type>int</type>
      </arv>
      <arv>
        <name>vendor_data_crd</name>
        <type>int</type>
      </arv>
      <arv>
        <name>use_5bit_8bit_tag</name>
        <type>byte</type>
      </arv>
      <arv>
        <name>no_encryption</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>ide_stream_id</name>
        <type>int</type>
      </arv>
      <arv>
        <name>ide_sub_stream</name>
        <type>int</type>
      </arv>
      <arv>
        <name>ide_prefix_p_bit</name>
        <type>int</type>
      </arv>
      <arv>
        <name>ide_prefix_m_bit</name>
        <type>int</type>
      </arv>
      <arv>
        <name>ide_prefix_k_bit</name>
        <type>int</type>
      </arv>
      <arv>
        <name>ide_tc</name>
        <type>int</type>
      </arv>
    </struct>
    <struct>
      <name>cpl_ctrl</name>
      <arv>
        <name>user_qid</name>
        <type>byte</type>
      </arv>
      <arv>
        <name>cpl_stat</name>
        <type>byte</type>
      </arv>
      <arv>
        <name>split_at_rcb</name>
        <type>byte</type>
      </arv>
      <arv>
        <name>split_at_mps</name>
        <type>byte</type>
      </arv>
      <arv>
        <name>first_cpl_delay</name>
        <type>int</type>
      </arv>
      <arv>
        <name>cpl_interval</name>
        <type>int</type>
      </arv>
    </struct>
    <member>
      <name>pkt_before</name>
      <type>apci_packet</type>
    </member>
    <member>
      <name>pkt_after</name>
      <type>apci_packet</type>
    </member>
    <member>
      <name>flits</name>
      <type>apci_flit</type>
    </member>
    <member>
      <name>cxl_flits</name>
      <type>acxl_flit</type>
    </member>
    <member>
      <name>is_done</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    extern function new(string name = "apci_packet");
    </description>
    </function>
    <function>
      <body>
        <name>copy</name>
        <input_arg>
          <type>apci_packet</type>
          <name>to</name>
        </input_arg>
      </body>
      <description>    extern function apci_packet copy(apci_packet to = null);
    </description>
    </function>
    <task>
      <body>
        <name>wait_done</name>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    extern virtual task wait_done(time timer = 0, string msg = "");
    </description>
    </task>
    <task>
      <body>
        <name>wait_sent</name>
        <input_arg>
          <type>string</type>
          <name>entry</name>
        </input_arg>
        <input_arg>
          <type>time</type>
          <name>timer</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>msg</name>
        </input_arg>
      </body>
      <description>    extern virtual task wait_sent(string entry, time timer = 0, string msg = "");
    </description>
    </task>
    <function>
      <body>
        <name>rehash_link_crc</name>
      </body>
      <description>    virtual function void rehash_link_crc();
    </description>
    </function>
    <function>
      <body>
        <name>rehash_ecrc</name>
      </body>
      <description>    virtual function void rehash_ecrc();
    </description>
    </function>
    <function>
      <body>
        <name>is_tlp</name>
      </body>
      <description>    function is_tlp();  apci_tlp  p;    return $cast(p, this); endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_dllp</name>
      </body>
      <description>    function is_dllp(); apci_dllp p;    return $cast(p, this); endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_eds</name>
      </body>
      <description>    function is_eds();  apci_eds_pkt p; return $cast(p, this); endfunction
    </description>
    </function>
    <function>
      <body>
        <name>get_parent_tr</name>
      </body>
      <description>    function apci_transaction get_parent_tr();
    </description>
    </function>
  </class>
  <class>
    <name>apci_func_info</name>
    <description>class apci_func_info</description>
    <member>
      <name>is_multi_f</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_type1</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_pf</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_vf</name>
      <type>bit</type>
    </member>
    <member>
      <name>is_ari_dev</name>
      <type>bit</type>
    </member>
    <member>
      <name>sec_bus</name>
      <type>bit</type>
    </member>
    <member>
      <name>sub_bus</name>
      <type>bit</type>
    </member>
    <member>
      <name>type1_io_16bit</name>
      <type>bit</type>
    </member>
    <member>
      <name>virtual_funcs</name>
      <type>apci_func_info</type>
    </member>
    <member>
      <name>pf</name>
      <type>apci_func_info</type>
    </member>
    <member>
      <name>alt_bus_base</name>
      <type>bit</type>
    </member>
    <member>
      <name>alt_bus_limit</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_bdf_t</type>
          <name>bdf</name>
        </input_arg>
      </body>
      <description>    extern function new(string name = "", apci_bdf_t bdf);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern virtual function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
    <function>
      <body>
        <name>get_link_partner</name>
      </body>
      <description>    extern virtual function apci_func_info get_link_partner();
    </description>
    </function>
    <function>
      <body>
        <name>get_link_partner_bdf</name>
      </body>
      <description>    extern virtual function apci_bdf_t get_link_partner_bdf();
    </description>
    </function>
    <function>
      <body>
        <name>get_device_mgr</name>
      </body>
      <description>    extern virtual function apci_device_mgr get_device_mgr();
    </description>
    </function>
    <function>
      <body>
        <name>is_rcrb</name>
      </body>
      <description>    virtual function bit is_rcrb();
    </description>
    </function>
    <function>
      <body>
        <name>connected_to_cxl</name>
      </body>
      <description>    function bit connected_to_cxl();
    </description>
    </function>
    <function>
      <body>
        <name>connected_to_cxl2</name>
      </body>
      <description>    function bit connected_to_cxl2();
    </description>
    </function>
    <function>
      <body>
        <name>connected_to_cxl11</name>
      </body>
      <description>    function bit connected_to_cxl11();
    </description>
    </function>
  </class>
  <class>
    <name>apci_mmio_cap</name>
    <description>class apci_mmio_cap</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    function new(string name);
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();                                                                                                                                
    </description>
    </function>
    <function>
      <body>
        <name>get_avery_cap_id</name>
      </body>
      <description>    virtual function int get_avery_cap_id();                                                                                                                                
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    virtual function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_dvsec_noncxl_func_map</name>
    <description>class apci_cap_dvsec_noncxl_func_map</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_dvsec_noncxl_func_map", 
            apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_doe_err_log_access</name>
    <description>class apci_cap_doe_err_log_access</description>
  </class>
  <class>
    <name>acxl_cdat_dsmas</name>
    <description>class acxl_cdat_dsmas</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    function new(string name = "acxl_cdat_dsmas");
    </description>
    </function>
  </class>
  <class>
    <name>acxl_msgs_in_slot</name>
    <description>class acxl_msgs_in_slot</description>
    <member>
      <name>is_down_port</name>
      <type>bit</type>
    </member>
    <member>
      <name>id</name>
      <type>byte</type>
    </member>
    <member>
      <name>q</name>
      <type>acxl_msg</type>
    </member>
  </class>
  <class>
    <name>apci_margin_param</name>
    <description>class apci_margin_param</description>
    <member>
      <name>lane_no</name>
      <type>int</type>
    </member>
    <member>
      <name>indErrorSampler</name>
      <type>bit</type>
    </member>
    <member>
      <name>sampleReportingMethod</name>
      <type>bit</type>
    </member>
    <member>
      <name>indLeftRightTiming</name>
      <type>bit</type>
    </member>
    <member>
      <name>indUpDownVoltage</name>
      <type>bit</type>
    </member>
    <member>
      <name>voltageSupported</name>
      <type>bit</type>
    </member>
    <member>
      <name>numTimingSteps</name>
      <type>byte</type>
    </member>
    <member>
      <name>maxTimingOffset</name>
      <type>byte</type>
    </member>
    <member>
      <name>numVoltageSteps</name>
      <type>byte</type>
    </member>
    <member>
      <name>maxVoltageOffset</name>
      <type>byte</type>
    </member>
    <member>
      <name>samplingRateVoltage</name>
      <type>byte</type>
    </member>
    <member>
      <name>samplingRateTiming</name>
      <type>byte</type>
    </member>
    <member>
      <name>sampleCount</name>
      <type>byte</type>
    </member>
    <member>
      <name>errorCountLimit</name>
      <type>bit</type>
    </member>
    <member>
      <name>maxLanes</name>
      <type>bit</type>
    </member>
    <member>
      <name>maxTimingOffsetChange</name>
      <type>byte</type>
    </member>
    <member>
      <name>maxVoltageOffsetChange</name>
      <type>byte</type>
    </member>
    <member>
      <name>rxMsgBusWriteBufDepth</name>
      <type>bit</type>
    </member>
    <member>
      <name>txMsgBusMinWriteBufDepth</name>
      <type>bit</type>
    </member>
    <member>
      <name>start_margin</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>is_margin_timing</name>
      </body>
      <description>    virtual function bit is_margin_timing (); return margin_condition inside {APCI_margin_timing_right, APCI_margin_timing_left }; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_margin_voltage</name>
      </body>
      <description>    virtual function bit is_margin_voltage(); return margin_condition inside {APCI_margin_voltage_up  , APCI_margin_voltage_down}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_right_down</name>
      </body>
      <description>    virtual function bit is_right_down    (); return margin_condition inside {APCI_margin_timing_right, APCI_margin_voltage_down}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_left_up</name>
      </body>
      <description>    virtual function bit is_left_up       (); return !(is_right_down());                                                           endfunction
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>int</type>
          <name>lane_no</name>
        </input_arg>
      </body>
      <description>    function new(int lane_no = 0);
    </description>
    </function>
    <function>
      <body>
        <name>decode</name>
        <input_arg>
          <type>apci_margin_type</type>
          <name>kind</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>v</name>
        </input_arg>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    virtual function void decode(apci_margin_type kind, bit       v, apci_log log);
    </description>
    </function>
    <function>
      <body>
        <name>encode_marginCtrlCapbilities</name>
      </body>
      <description>    virtual function bit       encode_marginCtrlCapbilities();
    </description>
    </function>
    <function>
      <body>
        <name>check</name>
        <input_arg>
          <type>apci_log</type>
          <name>log</name>
        </input_arg>
      </body>
      <description>    virtual function bit check(apci_log log);
    </description>
    </function>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    extern virtual function string sprint(int verbosity = 0, string prefix = "");
    </description>
    </function>
  </class>
  <class>
    <name>apci_cap_pl_gen5</name>
    <description>class apci_cap_pl_gen5</description>
    <function>
      <body>
        <name>set_next_cap_offset</name>
        <input_arg>
          <type>avery_u16</type>
          <name>v</name>
        </input_arg>
      </body>
      <description>    virtual function void set_next_cap_offset(avery_u16 v);
    </description>
    </function>
    <function>
      <body>
        <name>get_next_cap_offset</name>
      </body>
      <description>    virtual function bit       get_next_cap_offset();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_id</name>
      </body>
      <description>    virtual function bit       get_cap_id();
    </description>
    </function>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>apci_port_type</type>
          <name>ptype</name>
        </input_arg>
      </body>
      <description>    function new(string name = "apci_cap_pl_gen5",
                 apci_port_type ptype = APCI_PORT_unknown);
    </description>
    </function>
    <function>
      <body>
        <name>create_dynamic_fields</name>
      </body>
      <description>    virtual function void create_dynamic_fields();
    </description>
    </function>
    <function>
      <body>
        <name>get_cap_size</name>
        <input_arg>
          <type>int</type>
          <name>max_link_width</name>
        </input_arg>
      </body>
      <description>    virtual function bit       get_cap_size(int max_link_width);
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cacheline</name>
    <description>class acxl_cacheline</description>
    <member>
      <name>line_size</name>
      <type>bit</type>
    </member>
    <member>
      <name>addr</name>
      <type>bit</type>
    </member>
    <member>
      <name>bytes</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>is_invalid</name>
      </body>
      <description>    function bit is_invalid()  ; return state inside {ACXL_CL_STATE_I}                                       ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_shared</name>
      </body>
      <description>    function bit is_shared()   ; return state inside {ACXL_CL_STATE_SC, ACXL_CL_STATE_SD}                    ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_exclusive</name>
      </body>
      <description>    function bit is_exclusive(); return state inside {ACXL_CL_STATE_UC, ACXL_CL_STATE_UCE, ACXL_CL_STATE_UD} ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_modified</name>
      </body>
      <description>    function bit is_modified() ; return state inside {ACXL_CL_STATE_SD, ACXL_CL_STATE_UD}                    ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_clean</name>
      </body>
      <description>    function bit is_clean()    ; return state inside {ACXL_CL_STATE_UC, ACXL_CL_STATE_UCE, ACXL_CL_STATE_SC} ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_UC</name>
      </body>
      <description>    function bit is_UC()       ; return state inside {ACXL_CL_STATE_UC, ACXL_CL_STATE_UCE}                   ; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_SC</name>
      </body>
      <description>    function bit is_SC()       ; return state inside {ACXL_CL_STATE_SC}; endfunction
    </description>
    </function>
    <function>
      <body>
        <name>is_full_line</name>
      </body>
      <description>    virtual function bit is_full_line();
    </description>
    </function>
  </class>
  <class>
    <name>acxl_fm_enum_ep</name>
    <description>class acxl_fm_enum_ep</description>
    <member>
      <name>binded</name>
      <type>bit</type>
    </member>
    <member>
      <name>sw_ppb_id</name>
      <type>int</type>
    </member>
    <member>
      <name>ld_count</name>
      <type>int</type>
    </member>
    <member>
      <name>mem_size</name>
      <type>int</type>
    </member>
    <member>
      <name>egress_port_congestion_sup</name>
      <type>bit</type>
    </member>
    <member>
      <name>throughput_reduction_sup</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>sprint</name>
        <input_arg>
          <type>int</type>
          <name>verbosity</name>
        </input_arg>
        <input_arg>
          <type>string</type>
          <name>prefix</name>
        </input_arg>
      </body>
      <description>    function string sprint(int verbosity = 0, string prefix="");
    </description>
    </function>
  </class>
  <class>
    <name>shall</name>
    <description>class shall</description>
    <member>
      <name>bfm</name>
      <type>apci_device_base</type>
    </member>
    <member>
      <name>name</name>
      <type>string</type>
    </member>
    <member>
      <name>log</name>
      <type>apci_log</type>
    </member>
    <task>
      <body>
        <name>wait_from_lpif</name>
        <output_arg>
          <type>apci_data_base</type>
          <name>d</name>
        </output_arg>
      </body>
      <description>    virtual task wait_from_lpif(output apci_data_base d);
    </description>
    </task>
    <function>
      <body>
        <name>sprint</name>
      </body>
      <description>    virtual function string sprint();
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_get_log</name>
    <description>class acxl_cmd_get_log</description>
    <struct>
      <name>in</name>
      <arv>
        <name>length</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>offset</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>log_id</name>
        <type>bit</type>
      </arv>
    </struct>
    <struct>
      <name>cel_entries</name>
      <arv>
        <name>rsvd8</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>secondary_mailbox_sup</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>background_operation</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>security_state_change</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>immediate_log_change</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>immediate_policy_change</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>immediate_data_change</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>immediate_cfg_change</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>cfg_change_after_reset</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>opcode</name>
        <type>bit</type>
      </arv>
    </struct>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_get_log); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cmd_get_lsa</name>
    <description>class acxl_cmd_get_lsa</description>
    <struct>
      <name>in</name>
      <arv>
        <name>length</name>
        <type>bit</type>
      </arv>
      <arv>
        <name>offset</name>
        <type>bit</type>
      </arv>
    </struct>
    <member>
      <name>out_data</name>
      <type>bit</type>
    </member>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
        <input_arg>
          <type>bit</type>
          <name>is_response</name>
        </input_arg>
      </body>
      <description>    function new(string name="", bit is_response=0); super.new(name, ACXL_DC_get_lsa); this.is_response = is_response; endfunction
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cdat_header</name>
    <description>class acxl_cdat_header</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    function new(string name = "acxl_cdat_header");
    </description>
    </function>
  </class>
  <class>
    <name>acxl_cdat_dsemts</name>
    <description>class acxl_cdat_dsemts</description>
    <function>
      <body>
        <name>new</name>
        <input_arg>
          <type>string</type>
          <name>name</name>
        </input_arg>
      </body>
      <description>    function new(string name = "acxl_cdat_dsemts");
    </description>
    </function>
  </class>
</information>
