{
    "anvm_component": {
        "prefix": "anvm_component",
        "body": [
            "anvm_component  ${0:name_class};"
        ],
        "description": "class anvm_component extends avery_component;\n"
    },
    "anvm_component :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_component"
        ],
        "body": [
            "new(${1:name}, ${2:parent}, ${3:stream_id});"
        ],
        "description": "[Class:anvm_component]\n     function new(\n string          name,\n    `ifdef ANVM_UVM       uvm_component  parent    = null,\n    `endif    int             stream_id = 0    );    "
    },
    "anvm_component :: check_result": {
        "prefix": [
            "check_result",
            "function:check_result -> anvm_component"
        ],
        "body": [
            "check_result(${1:verbosity});"
        ],
        "description": "[Class:anvm_component]\n     virtual function bit check_result(\n int verbosity = 0 );    "
    },
    "anvm_component :: end_sim_cb": {
        "prefix": [
            "end_sim_cb",
            "task:end_sim_cb -> anvm_component"
        ],
        "body": [
            "end_sim_cb(${1:msg});"
        ],
        "description": "[Class:anvm_component]\n     virtual task end_sim_cb(\nstring msg = \"\");    "
    },
    "anvm_fabric_host_adaptor": {
        "prefix": "anvm_fabric_host_adaptor",
        "body": [
            "anvm_fabric_host_adaptor  ${0:name_class};"
        ],
        "description": "class anvm_fabric_host_adaptor extends anvm_host_adaptor_base;\n"
    },
    "anvm_fabric_host_adaptor :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_fabric_host_adaptor"
        ],
        "body": [
            "new(${1:instance_name});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor]\n     function new(\nstring instance_name);    "
    },
    "anvm_fabric_host_adaptor :: get_nqn": {
        "prefix": [
            "get_nqn",
            "function:get_nqn -> anvm_fabric_host_adaptor"
        ],
        "body": [
            "get_nqn(${0:});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor]\n     virtual function anvm_nqn get_nqn(\n);    "
    },
    "anvm_fabric_host_adaptor :: wait_discovery_ctrlers": {
        "prefix": [
            "wait_discovery_ctrlers",
            "task:wait_discovery_ctrlers -> anvm_fabric_host_adaptor"
        ],
        "body": [
            "wait_discovery_ctrlers(${1:ctrler_ids});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor]\n     virtual task wait_discovery_ctrlers(\nref anvm_fab_ctrler_id ctrler_ids      );    "
    },
    "anvm_fabric_host_adaptor :: post_capsule": {
        "prefix": [
            "post_capsule",
            "function:post_capsule -> anvm_fabric_host_adaptor"
        ],
        "body": [
            "post_capsule(${1:cs});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor]\n     virtual function void post_capsule(\nanvm_capsule cs);    "
    },
    "anvm_fabric_host_adaptor :: wait_rx_capsule": {
        "prefix": [
            "wait_rx_capsule",
            "task:wait_rx_capsule -> anvm_fabric_host_adaptor"
        ],
        "body": [
            "wait_rx_capsule(${1:cs});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor]\n     virtual task wait_rx_capsule(\noutput anvm_capsule cs);    "
    },
    "anvm_fabric_host_adaptor :: get_admin_sq_capsule_size": {
        "prefix": [
            "get_admin_sq_capsule_size",
            "function:get_admin_sq_capsule_size -> anvm_fabric_host_adaptor"
        ],
        "body": [
            "get_admin_sq_capsule_size(${0:});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor]\n     virtual function int get_admin_sq_capsule_size(\n);    "
    },
    "anvm_fabric_host_adaptor :: get_amdin_rsp_capsule_size": {
        "prefix": [
            "get_amdin_rsp_capsule_size",
            "function:get_amdin_rsp_capsule_size -> anvm_fabric_host_adaptor"
        ],
        "body": [
            "get_amdin_rsp_capsule_size(${0:});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor]\n     virtual function int get_amdin_rsp_capsule_size(\n);    "
    },
    "anvm_fabric_host_adaptor :: get_host_memory_size": {
        "prefix": [
            "get_host_memory_size",
            "function:get_host_memory_size -> anvm_fabric_host_adaptor"
        ],
        "body": [
            "get_host_memory_size(${0:});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor]\n     virtual function bit       get_host_memory_size(\n);    "
    },
    "anvm_fabric_host_adaptor :: write_dword_array": {
        "prefix": [
            "write_dword_array",
            "task:write_dword_array -> anvm_fabric_host_adaptor"
        ],
        "body": [
            "write_dword_array(${1:addr}, ${2:va}, ${3:first_be}, ${4:last_be}, ${5:flag}, ${6:dbg});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor]\n     virtual task write_dword_array(\n            bit             addr    ,\n            bit             va          ,\n            bit              first_be = 'hf,\n            bit              last_be  = 'hf,\n            bit             flag     = 0,\n                   avery_data_base dbg      = null );    "
    },
    "anvm_fabric_host_adaptor :: read_dword_array": {
        "prefix": [
            "read_dword_array",
            "task:read_dword_array -> anvm_fabric_host_adaptor"
        ],
        "body": [
            "read_dword_array(${1:addr}, ${2:num_dwords}, ${3:va}, ${4:err}, ${5:first_be}, ${6:last_be}, ${7:flag}, ${8:dbg});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor]\n     virtual task read_dword_array(\n            input  bit             addr      ,\n                   int             num_dwords,\n            output bit             va            ,\n            output bit             err       ,\n            input  bit              first_be   = 'hf,\n            input  bit              last_be    = 'hf,\n            input  bit             flag       = 0,\n               input  avery_data_base dbg        = null );    "
    },
    "anvm_fabric_host_adaptor :: wait_irq": {
        "prefix": [
            "wait_irq",
            "task:wait_irq -> anvm_fabric_host_adaptor"
        ],
        "body": [
            "wait_irq(${1:ctrler_id}, ${2:int_kind}, ${3:addr}, ${4:data});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor]\n     virtual task wait_irq(\n output int              ctrler_id,\n          anvm_interrupt_e int_kind ,\n  bit              addr     ,\n                                  bit              data      );    "
    },
    "anvm_fabric_host_adaptor :: do_hot_reset": {
        "prefix": [
            "do_hot_reset",
            "task:do_hot_reset -> anvm_fabric_host_adaptor"
        ],
        "body": [
            "do_hot_reset(${1:ctrler_id});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor]\n     virtual task do_hot_reset(\nbit       ctrler_id);    "
    },
    "anvm_fabric_host_adaptor :: do_warm_reset": {
        "prefix": [
            "do_warm_reset",
            "task:do_warm_reset -> anvm_fabric_host_adaptor"
        ],
        "body": [
            "do_warm_reset(${1:hold_time_in_ns});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor]\n     virtual task do_warm_reset(\ntime hold_time_in_ns = 0);    "
    },
    "anvm_fabric_host_adaptor :: do_cold_reset": {
        "prefix": [
            "do_cold_reset",
            "task:do_cold_reset -> anvm_fabric_host_adaptor"
        ],
        "body": [
            "do_cold_reset(${1:hold_time_in_ns});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor]\n     virtual task do_cold_reset(\ntime hold_time_in_ns = 0);    "
    },
    "anvm_fabric_host_adaptor :: do_subsystem_reset": {
        "prefix": [
            "do_subsystem_reset",
            "task:do_subsystem_reset -> anvm_fabric_host_adaptor"
        ],
        "body": [
            "do_subsystem_reset(${1:ctrler_id});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor]\n     virtual task do_subsystem_reset(\nbit       ctrler_id);    "
    },
    "anvm_fabric_host_adaptor :: do_function_reset": {
        "prefix": [
            "do_function_reset",
            "task:do_function_reset -> anvm_fabric_host_adaptor"
        ],
        "body": [
            "do_function_reset(${1:ctrler_id}, ${2:flr_support});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor]\n     virtual task do_function_reset(\nbit       ctrler_id,\n output bit flr_support);    "
    },
    "anvm_fabric_host_adaptor :: reset": {
        "prefix": [
            "reset",
            "task:reset -> anvm_fabric_host_adaptor"
        ],
        "body": [
            "reset(${0:});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor]\n     virtual task reset(\n);    "
    },
    "anvm_fabric_host_adaptor :: get_port_number": {
        "prefix": [
            "get_port_number",
            "function:get_port_number -> anvm_fabric_host_adaptor"
        ],
        "body": [
            "get_port_number(${1:ctrler_id});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor]\n     virtual function int get_port_number (\nbit       ctrler_id);    "
    },
    "anvm_fabric_host_adaptor :: free_host_mem": {
        "prefix": [
            "free_host_mem",
            "function:free_host_mem -> anvm_fabric_host_adaptor"
        ],
        "body": [
            "free_host_mem(${1:addr}, ${2:len}, ${3:src});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor]\n     virtual function void free_host_mem(\nbit       addr,\n bit       len,\n anvm_data_base src);    "
    },
    "anvm_fabric_ctrler_adaptor": {
        "prefix": "anvm_fabric_ctrler_adaptor",
        "body": [
            "anvm_fabric_ctrler_adaptor  ${0:name_class};"
        ],
        "description": "class anvm_fabric_ctrler_adaptor extends anvm_ctrler_adaptor_base;\n"
    },
    "anvm_fabric_ctrler_adaptor :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_fabric_ctrler_adaptor"
        ],
        "body": [
            "new(${1:instance_name});"
        ],
        "description": "[Class:anvm_fabric_ctrler_adaptor]\n     function new(\nstring instance_name);    "
    },
    "anvm_fabric_ctrler_adaptor :: my_connect": {
        "prefix": [
            "my_connect",
            "function:my_connect -> anvm_fabric_ctrler_adaptor"
        ],
        "body": [
            "my_connect(${1:fab}, ${2:ctrler}, ${3:ctrler_id}, ${4:sub_nqn}, ${5:is_discovery});"
        ],
        "description": "[Class:anvm_fabric_ctrler_adaptor]\n     virtual function void my_connect(\n    anvm_fabric_fake fab,\n            anvm_controller  ctrler,\n    bit              ctrler_id,\n    anvm_nqn         sub_nqn,\n    bit              is_discovery);    "
    },
    "anvm_fabric_ctrler_adaptor :: post_capsule": {
        "prefix": [
            "post_capsule",
            "function:post_capsule -> anvm_fabric_ctrler_adaptor"
        ],
        "body": [
            "post_capsule(${1:cs});"
        ],
        "description": "[Class:anvm_fabric_ctrler_adaptor]\n     virtual function void post_capsule(\nanvm_capsule cs);    "
    },
    "anvm_fabric_ctrler_adaptor :: wait_rx_capsule": {
        "prefix": [
            "wait_rx_capsule",
            "task:wait_rx_capsule -> anvm_fabric_ctrler_adaptor"
        ],
        "body": [
            "wait_rx_capsule(${1:cs});"
        ],
        "description": "[Class:anvm_fabric_ctrler_adaptor]\n     virtual task wait_rx_capsule(\noutput anvm_capsule cs);    "
    },
    "anvm_fabric_ctrler_adaptor :: write_mem": {
        "prefix": [
            "write_mem",
            "task:write_mem -> anvm_fabric_ctrler_adaptor"
        ],
        "body": [
            "write_mem(${1:addr}, ${2:v}, ${3:be});"
        ],
        "description": "[Class:anvm_fabric_ctrler_adaptor]\n     virtual task write_mem(\nbit       addr,\n bit       v,\n bit       be);    "
    },
    "anvm_fabric_ctrler_adaptor :: read_mem": {
        "prefix": [
            "read_mem",
            "task:read_mem -> anvm_fabric_ctrler_adaptor"
        ],
        "body": [
            "read_mem(${1:addr}, ${2:v}, ${3:err});"
        ],
        "description": "[Class:anvm_fabric_ctrler_adaptor]\n     virtual task read_mem(\nbit       addr,\n output bit       v,\n output bit err);    "
    },
    "anvm_fabric_ctrler_adaptor :: write_mem_array": {
        "prefix": [
            "write_mem_array",
            "task:write_mem_array -> anvm_fabric_ctrler_adaptor"
        ],
        "body": [
            "write_mem_array(${1:addr}, ${2:va}, ${3:fbe}, ${4:lbe}, ${5:dbg});"
        ],
        "description": "[Class:anvm_fabric_ctrler_adaptor]\n     virtual task write_mem_array(\nbit       addr,\n ref bit       va      ,\n input bit       fbe,\n bit       lbe,\n string dbg=\"\");    "
    },
    "anvm_fabric_ctrler_adaptor :: read_mem_array": {
        "prefix": [
            "read_mem_array",
            "task:read_mem_array -> anvm_fabric_ctrler_adaptor"
        ],
        "body": [
            "read_mem_array(${1:addr}, ${2:num_dwords}, ${3:va}, ${4:err});"
        ],
        "description": "[Class:anvm_fabric_ctrler_adaptor]\n     virtual task read_mem_array(\nbit       addr,\n int num_dwords,\n output bit       va      ,\n output bit err);    "
    },
    "anvm_fabric_ctrler_adaptor :: reset": {
        "prefix": [
            "reset",
            "task:reset -> anvm_fabric_ctrler_adaptor"
        ],
        "body": [
            "reset(${0:});"
        ],
        "description": "[Class:anvm_fabric_ctrler_adaptor]\n     virtual task reset(\n);    "
    },
    "anvm_fabric_ctrler_adaptor :: wait_pcie_event": {
        "prefix": [
            "wait_pcie_event",
            "task:wait_pcie_event -> anvm_fabric_ctrler_adaptor"
        ],
        "body": [
            "wait_pcie_event(${1:entry});"
        ],
        "description": "[Class:anvm_fabric_ctrler_adaptor]\n     virtual task wait_pcie_event(\nstring entry);    "
    },
    "test_summary_register": {
        "prefix": [
            "test_summary_register",
            "function:test_summary_register"
        ],
        "body": [
            "test_summary_register(${1:c});"
        ],
        "description": "function void test_summary_register(\nanvm_component c);    "
    },
    "test_summary": {
        "prefix": [
            "test_summary",
            "task:test_summary"
        ],
        "body": [
            "test_summary(${1:s});"
        ],
        "description": "task test_summary(\n string s = \"UNKNOWN\");    "
    },
    "anvm_test_severity_register": {
        "prefix": [
            "anvm_test_severity_register",
            "function:anvm_test_severity_register"
        ],
        "body": [
            "anvm_test_severity_register(${1:l});"
        ],
        "description": "function void anvm_test_severity_register(\nanvm_log l);    "
    },
    "anvm_test_set_severity": {
        "prefix": [
            "anvm_test_set_severity",
            "function:anvm_test_set_severity"
        ],
        "body": [
            "anvm_test_set_severity(${1:id}, ${2:v});"
        ],
        "description": "function void anvm_test_set_severity(\nstring id,\n anvm_severity v);    "
    },
    "anvm_test_report_register": {
        "prefix": [
            "anvm_test_report_register",
            "function:anvm_test_report_register"
        ],
        "body": [
            "anvm_test_report_register(${1:b});"
        ],
        "description": "function void anvm_test_report_register(\nanvm_driver_base b);    "
    },
    "anvm_seq_report_register": {
        "prefix": [
            "anvm_seq_report_register",
            "function:anvm_seq_report_register"
        ],
        "body": [
            "anvm_seq_report_register(${1:b});"
        ],
        "description": "function void anvm_seq_report_register(\nanvm_seq_common b);    "
    },
    "anvm_test_report": {
        "prefix": [
            "anvm_test_report",
            "task:anvm_test_report"
        ],
        "body": [
            "anvm_test_report(${0:});"
        ],
        "description": "task anvm_test_report(\n);    "
    },
    "anvm_test_select": {
        "prefix": [
            "anvm_test_select",
            "task:anvm_test_select"
        ],
        "body": [
            "anvm_test_select(${1:test_name});"
        ],
        "description": "task automatic anvm_test_select(\n string test_name = \"\");    "
    },
    "anvm_test_select_check": {
        "prefix": [
            "anvm_test_select_check",
            "task:anvm_test_select_check"
        ],
        "body": [
            "anvm_test_select_check(${0:});"
        ],
        "description": "task anvm_test_select_check(\n);    "
    },
    "anvm_seq_common": {
        "prefix": "anvm_seq_common",
        "body": [
            "anvm_seq_common  ${0:name_class};"
        ],
        "description": "class anvm_seq_common extends anvm_seq_base;\n"
    },
    "anvm_seq_common :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_seq_common"
        ],
        "body": [
            "new(${1:bfm}, ${2:target}, ${3:scope});"
        ],
        "description": "[Class:anvm_seq_common]\n     function new (\nanvm_driver_base bfm = null,\n   anvm_driver_base target = null,\n   string scope = \"\");    "
    },
    "anvm_seq_common :: copy": {
        "prefix": [
            "copy",
            "function:copy -> anvm_seq_common"
        ],
        "body": [
            "copy(${1:to});"
        ],
        "description": "[Class:anvm_seq_common]\n     function anvm_seq_common copy (\nanvm_seq_common to = null);    "
    },
    "anvm_seq_common :: run": {
        "prefix": [
            "run",
            "task:run -> anvm_seq_common"
        ],
        "body": [
            "run(${0:});"
        ],
        "description": "[Class:anvm_seq_common]\n     virtual task run(\n);    "
    },
    "anvm_seq_common :: before_run": {
        "prefix": [
            "before_run",
            "task:before_run -> anvm_seq_common"
        ],
        "body": [
            "before_run(${0:});"
        ],
        "description": "[Class:anvm_seq_common]\n     virtual task before_run(\n);    "
    },
    "anvm_seq_common :: run_body": {
        "prefix": [
            "run_body",
            "task:run_body -> anvm_seq_common"
        ],
        "body": [
            "run_body(${0:});"
        ],
        "description": "[Class:anvm_seq_common]\n     virtual task run_body(\n);    "
    },
    "anvm_seq_common :: end_messages": {
        "prefix": [
            "end_messages",
            "function:end_messages -> anvm_seq_common"
        ],
        "body": [
            "end_messages(${1:s});"
        ],
        "description": "[Class:anvm_seq_common]\n     virtual function void end_messages(\noutput string s);    "
    },
    "anvm_seq_common :: after_run": {
        "prefix": [
            "after_run",
            "task:after_run -> anvm_seq_common"
        ],
        "body": [
            "after_run(${0:});"
        ],
        "description": "[Class:anvm_seq_common]\n     virtual task after_run(\n);    "
    },
    "anvm_seq_common :: seq_info": {
        "prefix": [
            "seq_info",
            "function:seq_info -> anvm_seq_common"
        ],
        "body": [
            "seq_info(${1:s});"
        ],
        "description": "[Class:anvm_seq_common]\n     function void seq_info(\nstring s);    "
    },
    "anvm_seq_common :: seq_error": {
        "prefix": [
            "seq_error",
            "function:seq_error -> anvm_seq_common"
        ],
        "body": [
            "seq_error(${1:s});"
        ],
        "description": "[Class:anvm_seq_common]\n     function void seq_error(\nstring s);    "
    },
    "anvm_seq_common :: seq_debug": {
        "prefix": [
            "seq_debug",
            "function:seq_debug -> anvm_seq_common"
        ],
        "body": [
            "seq_debug(${1:s});"
        ],
        "description": "[Class:anvm_seq_common]\n     function void seq_debug(\nstring s);    "
    },
    "anvm_seq_common :: seq_warn": {
        "prefix": [
            "seq_warn",
            "function:seq_warn -> anvm_seq_common"
        ],
        "body": [
            "seq_warn(${1:s});"
        ],
        "description": "[Class:anvm_seq_common]\n     function void seq_warn(\nstring s);    "
    },
    "anvm_seq_common :: seq_usage": {
        "prefix": [
            "seq_usage",
            "function:seq_usage -> anvm_seq_common"
        ],
        "body": [
            "seq_usage(${1:s});"
        ],
        "description": "[Class:anvm_seq_common]\n     function void seq_usage(\nstring s);    "
    },
    "anvm_seq_common :: seq_print_history": {
        "prefix": [
            "seq_print_history",
            "function:seq_print_history -> anvm_seq_common"
        ],
        "body": [
            "seq_print_history(${0:});"
        ],
        "description": "[Class:anvm_seq_common]\n     function void seq_print_history(\n);    "
    },
    "anvm_testcase_base": {
        "prefix": "anvm_testcase_base",
        "body": [
            "anvm_testcase_base  ${0:name_class};"
        ],
        "description": "class anvm_testcase_base;\n"
    },
    "anvm_testcase_base :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_testcase_base"
        ],
        "body": [
            "new(${1:test_name});"
        ],
        "description": "[Class:anvm_testcase_base]\n     function new(\nstring test_name);    "
    },
    "anvm_testcase_base :: add_host": {
        "prefix": [
            "add_host",
            "function:add_host -> anvm_testcase_base"
        ],
        "body": [
            "add_host(${1:h});"
        ],
        "description": "[Class:anvm_testcase_base]\n     function void add_host(\nanvm_host_software h);    "
    },
    "anvm_testcase_base :: add_controller0": {
        "prefix": [
            "add_controller0",
            "function:add_controller0 -> anvm_testcase_base"
        ],
        "body": [
            "add_controller0(${1:c});"
        ],
        "description": "[Class:anvm_testcase_base]\n     function void add_controller0(\nanvm_controller c);    "
    },
    "anvm_testcase_base :: add_controller1": {
        "prefix": [
            "add_controller1",
            "function:add_controller1 -> anvm_testcase_base"
        ],
        "body": [
            "add_controller1(${1:c});"
        ],
        "description": "[Class:anvm_testcase_base]\n     function void add_controller1(\nanvm_controller c);    "
    },
    "anvm_testcase_base :: add_controller": {
        "prefix": [
            "add_controller",
            "function:add_controller -> anvm_testcase_base"
        ],
        "body": [
            "add_controller(${1:c});"
        ],
        "description": "[Class:anvm_testcase_base]\n     function void add_controller(\nanvm_controller c);    "
    },
    "anvm_testcase_base :: pre_bfm_started": {
        "prefix": [
            "pre_bfm_started",
            "task:pre_bfm_started -> anvm_testcase_base"
        ],
        "body": [
            "pre_bfm_started(${0:});"
        ],
        "description": "[Class:anvm_testcase_base]\n     virtual task pre_bfm_started(\n);    "
    },
    "anvm_testcase_base :: run": {
        "prefix": [
            "run",
            "task:run -> anvm_testcase_base"
        ],
        "body": [
            "run(${0:});"
        ],
        "description": "[Class:anvm_testcase_base]\n     virtual task run(\n);    "
    },
    "anvm_testcase_base :: wait_ctrlers0": {
        "prefix": [
            "wait_ctrlers0",
            "task:wait_ctrlers0 -> anvm_testcase_base"
        ],
        "body": [
            "wait_ctrlers0(${1:configured}, ${2:how_many});"
        ],
        "description": "[Class:anvm_testcase_base]\n     virtual task wait_ctrlers0(\nbit configured = 0,\n                          int how_many = 0);    "
    },
    "anvm_testcase_base :: wait_ctrlers1": {
        "prefix": [
            "wait_ctrlers1",
            "task:wait_ctrlers1 -> anvm_testcase_base"
        ],
        "body": [
            "wait_ctrlers1(${1:configured}, ${2:how_many});"
        ],
        "description": "[Class:anvm_testcase_base]\n     virtual task wait_ctrlers1(\nbit configured = 0,\n                          int how_many = 0);    "
    },
    "anvm_testcase_base :: wait_ctrlers": {
        "prefix": [
            "wait_ctrlers",
            "task:wait_ctrlers -> anvm_testcase_base"
        ],
        "body": [
            "wait_ctrlers(${1:configured}, ${2:how_many});"
        ],
        "description": "[Class:anvm_testcase_base]\n     virtual task wait_ctrlers(\nbit configured = 0,\n                          int how_many = 0);    "
    },
    "anvm_testcase_base :: test_body": {
        "prefix": [
            "test_body",
            "task:test_body -> anvm_testcase_base"
        ],
        "body": [
            "test_body(${0:});"
        ],
        "description": "[Class:anvm_testcase_base]\n     virtual task test_body(\n);    "
    },
    "anvm_testcase_base :: collect_coverage": {
        "prefix": [
            "collect_coverage",
            "task:collect_coverage -> anvm_testcase_base"
        ],
        "body": [
            "collect_coverage(${0:});"
        ],
        "description": "[Class:anvm_testcase_base]\n     virtual task collect_coverage(\n);    "
    },
    "anvm_testcase_base :: wrapup": {
        "prefix": [
            "wrapup",
            "task:wrapup -> anvm_testcase_base"
        ],
        "body": [
            "wrapup(${0:});"
        ],
        "description": "[Class:anvm_testcase_base]\n     virtual task wrapup(\n);    "
    },
    "anvm_testcase_base :: find_controller_bfm0": {
        "prefix": [
            "find_controller_bfm0",
            "function:find_controller_bfm0 -> anvm_testcase_base"
        ],
        "body": [
            "find_controller_bfm0(${1:ctrler_id});"
        ],
        "description": "[Class:anvm_testcase_base]\n     virtual function anvm_controller find_controller_bfm0(\nint ctrler_id);    "
    },
    "anvm_testcase_base :: find_controller_bfm1": {
        "prefix": [
            "find_controller_bfm1",
            "function:find_controller_bfm1 -> anvm_testcase_base"
        ],
        "body": [
            "find_controller_bfm1(${1:ctrler_id});"
        ],
        "description": "[Class:anvm_testcase_base]\n     virtual function anvm_controller find_controller_bfm1(\nint ctrler_id);    "
    },
    "anvm_testcase_base :: find_controller_bfm": {
        "prefix": [
            "find_controller_bfm",
            "function:find_controller_bfm -> anvm_testcase_base"
        ],
        "body": [
            "find_controller_bfm(${1:ctrler_id});"
        ],
        "description": "[Class:anvm_testcase_base]\n     virtual function anvm_controller find_controller_bfm(\nint ctrler_id);    "
    },
    "anvm_coverage": {
        "prefix": "anvm_coverage",
        "body": [
            "anvm_coverage  ${0:name_class};"
        ],
        "description": "class anvm_coverage extends anvm_data_base;\n"
    },
    "anvm_coverage :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_coverage"
        ],
        "body": [
            "new(${1:name});"
        ],
        "description": "[Class:anvm_coverage]\n     function new(\nstring name = \"anvm_coverage\");    "
    },
    "anvm_coverage :: sample_cmd": {
        "prefix": [
            "sample_cmd",
            "function:sample_cmd -> anvm_coverage"
        ],
        "body": [
            "sample_cmd(${1:cmd});"
        ],
        "description": "[Class:anvm_coverage]\n     virtual function void sample_cmd(\nanvm_cmd_entry cmd);    "
    },
    "anvm_coverage :: sample_cpl": {
        "prefix": [
            "sample_cpl",
            "function:sample_cpl -> anvm_coverage"
        ],
        "body": [
            "sample_cpl(${1:cpl});"
        ],
        "description": "[Class:anvm_coverage]\n     virtual function void sample_cpl(\nanvm_cpl_entry cpl);    "
    },
    "anvm_coverage :: sample_ctrler_struct": {
        "prefix": [
            "sample_ctrler_struct",
            "function:sample_ctrler_struct -> anvm_coverage"
        ],
        "body": [
            "sample_ctrler_struct(${1:ct});"
        ],
        "description": "[Class:anvm_coverage]\n     virtual function void sample_ctrler_struct(\nanvm_istruct_ct ct);    "
    },
    "anvm_coverage :: sample_namespace_struct": {
        "prefix": [
            "sample_namespace_struct",
            "function:sample_namespace_struct -> anvm_coverage"
        ],
        "body": [
            "sample_namespace_struct(${1:ns});"
        ],
        "description": "[Class:anvm_coverage]\n     virtual function void sample_namespace_struct(\nanvm_istruct_ns ns);    "
    },
    "anvm_fabric_ctrler_adaptor_fake": {
        "prefix": "anvm_fabric_ctrler_adaptor_fake",
        "body": [
            "anvm_fabric_ctrler_adaptor_fake  ${0:name_class};"
        ],
        "description": "class anvm_fabric_ctrler_adaptor_fake extends anvm_fabric_ctrler_adaptor;\n"
    },
    "anvm_fabric_ctrler_adaptor_fake :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_fabric_ctrler_adaptor_fake"
        ],
        "body": [
            "new(${1:instance_name});"
        ],
        "description": "[Class:anvm_fabric_ctrler_adaptor_fake]\n     function new(\nstring instance_name);    "
    },
    "anvm_fabric_ctrler_adaptor_fake :: my_connect": {
        "prefix": [
            "my_connect",
            "function:my_connect -> anvm_fabric_ctrler_adaptor_fake"
        ],
        "body": [
            "my_connect(${1:fab}, ${2:ctrler}, ${3:ctrler_id}, ${4:sub_nqn}, ${5:is_discovery});"
        ],
        "description": "[Class:anvm_fabric_ctrler_adaptor_fake]\n     virtual function void my_connect(\n    anvm_fabric_fake fab,\n            anvm_controller  ctrler,\n    bit              ctrler_id,\n    anvm_nqn         sub_nqn,\n    bit              is_discovery);    "
    },
    "anvm_fabric_ctrler_adaptor_fake :: set_nvme_cap": {
        "prefix": [
            "set_nvme_cap",
            "function:set_nvme_cap -> anvm_fabric_ctrler_adaptor_fake"
        ],
        "body": [
            "set_nvme_cap(${1:nvme_cap});"
        ],
        "description": "[Class:anvm_fabric_ctrler_adaptor_fake]\n     virtual function void set_nvme_cap(\nanvm_ctrler_registers nvme_cap);    "
    },
    "anvm_fabric_ctrler_adaptor_fake :: post_capsule": {
        "prefix": [
            "post_capsule",
            "function:post_capsule -> anvm_fabric_ctrler_adaptor_fake"
        ],
        "body": [
            "post_capsule(${1:cs});"
        ],
        "description": "[Class:anvm_fabric_ctrler_adaptor_fake]\n     virtual function void post_capsule(\nanvm_capsule cs);    "
    },
    "anvm_fabric_ctrler_adaptor_fake :: wait_rx_capsule": {
        "prefix": [
            "wait_rx_capsule",
            "task:wait_rx_capsule -> anvm_fabric_ctrler_adaptor_fake"
        ],
        "body": [
            "wait_rx_capsule(${1:cs});"
        ],
        "description": "[Class:anvm_fabric_ctrler_adaptor_fake]\n     virtual task wait_rx_capsule(\noutput anvm_capsule cs);    "
    },
    "anvm_fabric_ctrler_adaptor_fake :: wait_pcie_event": {
        "prefix": [
            "wait_pcie_event",
            "task:wait_pcie_event -> anvm_fabric_ctrler_adaptor_fake"
        ],
        "body": [
            "wait_pcie_event(${1:entry});"
        ],
        "description": "[Class:anvm_fabric_ctrler_adaptor_fake]\n     virtual task wait_pcie_event(\nstring entry);                                                                                                                                                                        "
    },
    "anvm_fabric_ctrler_adaptor_fake :: write_mem": {
        "prefix": [
            "write_mem",
            "task:write_mem -> anvm_fabric_ctrler_adaptor_fake"
        ],
        "body": [
            "write_mem(${1:addr}, ${2:v}, ${3:be});"
        ],
        "description": "[Class:anvm_fabric_ctrler_adaptor_fake]\n     virtual task write_mem(\nbit       addr,\n bit       v,\n bit       be);    "
    },
    "anvm_fabric_ctrler_adaptor_fake :: read_mem": {
        "prefix": [
            "read_mem",
            "task:read_mem -> anvm_fabric_ctrler_adaptor_fake"
        ],
        "body": [
            "read_mem(${1:addr}, ${2:v}, ${3:err});"
        ],
        "description": "[Class:anvm_fabric_ctrler_adaptor_fake]\n     virtual task read_mem(\nbit       addr,\n output bit       v,\n output bit err);    "
    },
    "anvm_fabric_ctrler_adaptor_fake :: write_mem_array": {
        "prefix": [
            "write_mem_array",
            "task:write_mem_array -> anvm_fabric_ctrler_adaptor_fake"
        ],
        "body": [
            "write_mem_array(${1:addr}, ${2:va}, ${3:fbe}, ${4:lbe}, ${5:dbg});"
        ],
        "description": "[Class:anvm_fabric_ctrler_adaptor_fake]\n     virtual task write_mem_array(\nbit       addr,\n ref bit       va      ,\n input bit       fbe,\n bit       lbe,\n string dbg=\"\");    "
    },
    "anvm_fabric_ctrler_adaptor_fake :: read_mem_array": {
        "prefix": [
            "read_mem_array",
            "task:read_mem_array -> anvm_fabric_ctrler_adaptor_fake"
        ],
        "body": [
            "read_mem_array(${1:addr}, ${2:num_dwords}, ${3:va}, ${4:err});"
        ],
        "description": "[Class:anvm_fabric_ctrler_adaptor_fake]\n     virtual task read_mem_array(\nbit       addr,\n int num_dwords,\n output bit       va      ,\n output bit err);    "
    },
    "anvm_fabric_ctrler_adaptor_fake :: check_dword_aligned": {
        "prefix": [
            "check_dword_aligned",
            "function:check_dword_aligned -> anvm_fabric_ctrler_adaptor_fake"
        ],
        "body": [
            "check_dword_aligned(${1:s}, ${2:addr});"
        ],
        "description": "[Class:anvm_fabric_ctrler_adaptor_fake]\n     local function void check_dword_aligned(\nstring s,\n bit       addr);    "
    },
    "anvm_fabric_ctrler_adaptor_fake :: reset": {
        "prefix": [
            "reset",
            "task:reset -> anvm_fabric_ctrler_adaptor_fake"
        ],
        "body": [
            "reset(${0:});"
        ],
        "description": "[Class:anvm_fabric_ctrler_adaptor_fake]\n     virtual task reset(\n);    "
    },
    "anvm_ctrler_callbacks": {
        "prefix": "anvm_ctrler_callbacks",
        "body": [
            "anvm_ctrler_callbacks  ${0:name_class};"
        ],
        "description": "virtual class anvm_ctrler_callbacks;\n"
    },
    "anvm_ctrler_callbacks :: after_created_capability": {
        "prefix": [
            "after_created_capability",
            "function:after_created_capability -> anvm_ctrler_callbacks"
        ],
        "body": [
            "after_created_capability(${1:bfm}, ${2:nvme_cap});"
        ],
        "description": "[Class:anvm_ctrler_callbacks]\n     virtual function void after_created_capability(\n    anvm_controller       bfm,\n    anvm_ctrler_registers nvme_cap);return;    "
    },
    "anvm_ctrler_callbacks :: after_created_identify_ctrler": {
        "prefix": [
            "after_created_identify_ctrler",
            "function:after_created_identify_ctrler -> anvm_ctrler_callbacks"
        ],
        "body": [
            "after_created_identify_ctrler(${1:bfm}, ${2:ctrler_struct});"
        ],
        "description": "[Class:anvm_ctrler_callbacks]\n     virtual function void after_created_identify_ctrler(\n    anvm_controller     bfm,\n    anvm_istruct_ct     ctrler_struct);return;    "
    },
    "anvm_ctrler_callbacks :: after_created_identify_namespace": {
        "prefix": [
            "after_created_identify_namespace",
            "function:after_created_identify_namespace -> anvm_ctrler_callbacks"
        ],
        "body": [
            "after_created_identify_namespace(${1:bfm}, ${2:ns_structs});"
        ],
        "description": "[Class:anvm_ctrler_callbacks]\n     virtual function void after_created_identify_namespace(\n    anvm_controller     bfm,\n    ref anvm_istruct_ns ns_structs      );return;    "
    },
    "anvm_ctrler_callbacks :: after_created_identify_namespace_csi0": {
        "prefix": [
            "after_created_identify_namespace_csi0",
            "function:after_created_identify_namespace_csi0 -> anvm_ctrler_callbacks"
        ],
        "body": [
            "after_created_identify_namespace_csi0(${1:bfm}, ${2:ns_csi0_structs});"
        ],
        "description": "[Class:anvm_ctrler_callbacks]\n     virtual function void after_created_identify_namespace_csi0(\n    anvm_controller          bfm,\n    ref anvm_istruct_ns_csi0 ns_csi0_structs      );return;    "
    },
    "anvm_ctrler_callbacks :: after_created_identify_namespace_csi1": {
        "prefix": [
            "after_created_identify_namespace_csi1",
            "function:after_created_identify_namespace_csi1 -> anvm_ctrler_callbacks"
        ],
        "body": [
            "after_created_identify_namespace_csi1(${1:bfm}, ${2:ns_csi1_structs});"
        ],
        "description": "[Class:anvm_ctrler_callbacks]\n     virtual function void after_created_identify_namespace_csi1(\n    anvm_controller          bfm,\n    ref anvm_istruct_ns_csi1 ns_csi1_structs      );return;    "
    },
    "anvm_ctrler_callbacks :: after_created_identify_namespace_csi2": {
        "prefix": [
            "after_created_identify_namespace_csi2",
            "function:after_created_identify_namespace_csi2 -> anvm_ctrler_callbacks"
        ],
        "body": [
            "after_created_identify_namespace_csi2(${1:bfm}, ${2:ns_csi2_structs});"
        ],
        "description": "[Class:anvm_ctrler_callbacks]\n     virtual function void after_created_identify_namespace_csi2(\n    anvm_controller          bfm,\n    ref anvm_istruct_ns_csi2 ns_csi2_structs      );return;    "
    },
    "anvm_ctrler_callbacks :: after_created_zone_report": {
        "prefix": [
            "after_created_zone_report",
            "function:after_created_zone_report -> anvm_ctrler_callbacks"
        ],
        "body": [
            "after_created_zone_report(${1:bfm}, ${2:zone_report});"
        ],
        "description": "[Class:anvm_ctrler_callbacks]\n     virtual function void after_created_zone_report(\n    anvm_controller          bfm,\n    ref anvm_report_zone_data zone_report      );return;    "
    },
    "anvm_ctrler_callbacks :: after_created_oc_geo_st": {
        "prefix": [
            "after_created_oc_geo_st",
            "function:after_created_oc_geo_st -> anvm_ctrler_callbacks"
        ],
        "body": [
            "after_created_oc_geo_st(${1:bfm}, ${2:geo_st});"
        ],
        "description": "[Class:anvm_ctrler_callbacks]\n     virtual function void after_created_oc_geo_st(\n    anvm_controller          bfm,\n    ref anvm_oc_st_geometry geo_st      );return;    "
    },
    "anvm_ctrler_callbacks :: after_created_features": {
        "prefix": [
            "after_created_features",
            "function:after_created_features -> anvm_ctrler_callbacks"
        ],
        "body": [
            "after_created_features(${1:bfm}, ${2:features});"
        ],
        "description": "[Class:anvm_ctrler_callbacks]\n     virtual function void after_created_features(\n    anvm_controller     bfm,\n    ref anvm_ctrler_features features);return;    "
    },
    "anvm_ctrler_callbacks :: after_created_subsys_stream": {
        "prefix": [
            "after_created_subsys_stream",
            "function:after_created_subsys_stream -> anvm_ctrler_callbacks"
        ],
        "body": [
            "after_created_subsys_stream(${1:bfm}, ${2:subsys_stream_param});"
        ],
        "description": "[Class:anvm_ctrler_callbacks]\n     virtual function void after_created_subsys_stream(\n    anvm_controller     bfm,\n    ref anvm_directive_param_stream subsys_stream_param);return;    "
    },
    "anvm_ctrler_callbacks :: after_created_identify_pcc": {
        "prefix": [
            "after_created_identify_pcc",
            "function:after_created_identify_pcc -> anvm_ctrler_callbacks"
        ],
        "body": [
            "after_created_identify_pcc(${1:bfm}, ${2:pcc});"
        ],
        "description": "[Class:anvm_ctrler_callbacks]\n     virtual function void after_created_identify_pcc(\n    anvm_controller      bfm,\n    ref anvm_istruct_pcc pcc);    "
    },
    "anvm_ctrler_callbacks :: after_created_logpage_discovery": {
        "prefix": [
            "after_created_logpage_discovery",
            "function:after_created_logpage_discovery -> anvm_ctrler_callbacks"
        ],
        "body": [
            "after_created_logpage_discovery(${1:bfm}, ${2:logpage});"
        ],
        "description": "[Class:anvm_ctrler_callbacks]\n     virtual function void after_created_logpage_discovery(\n    anvm_controller              bfm,\n    ref anvm_logpage_discovery   logpage);return;    "
    },
    "anvm_ctrler_callbacks :: rx_cmd_fetched": {
        "prefix": [
            "rx_cmd_fetched",
            "function:rx_cmd_fetched -> anvm_ctrler_callbacks"
        ],
        "body": [
            "rx_cmd_fetched(${1:bfm}, ${2:cmd});"
        ],
        "description": "[Class:anvm_ctrler_callbacks]\n     virtual function void rx_cmd_fetched(\n    anvm_controller  bfm,\n    anvm_cmd_entry   cmd);return;    "
    },
    "anvm_ctrler_callbacks :: tx_cpl_before_sent": {
        "prefix": [
            "tx_cpl_before_sent",
            "function:tx_cpl_before_sent -> anvm_ctrler_callbacks"
        ],
        "body": [
            "tx_cpl_before_sent(${1:bfm}, ${2:cpl});"
        ],
        "description": "[Class:anvm_ctrler_callbacks]\n     virtual function void tx_cpl_before_sent(\n    anvm_controller  bfm,\n    anvm_cpl_entry   cpl );return;    "
    },
    "anvm_ctrler_callbacks :: rx_nvm_vendor_spec": {
        "prefix": [
            "rx_nvm_vendor_spec",
            "task:rx_nvm_vendor_spec -> anvm_ctrler_callbacks"
        ],
        "body": [
            "rx_nvm_vendor_spec(${1:bfm}, ${2:cmd}, ${3:cpl});"
        ],
        "description": "[Class:anvm_ctrler_callbacks]\n     virtual task rx_nvm_vendor_spec(\n    anvm_controller  bfm,\n    anvm_cmd_entry   cmd,\n    anvm_cpl_entry   cpl );return;    "
    },
    "anvm_ctrler_callbacks :: before_mem_access": {
        "prefix": [
            "before_mem_access",
            "function:before_mem_access -> anvm_ctrler_callbacks"
        ],
        "body": [
            "before_mem_access(${1:bfm}, ${2:mtr});"
        ],
        "description": "[Class:anvm_ctrler_callbacks]\n     virtual function void before_mem_access(\n    anvm_controller      bfm,\n    anvm_mem_access_tr   mtr); return;    "
    },
    "anvm_ctrler_callbacks :: sq_arbitration": {
        "prefix": [
            "sq_arbitration",
            "function:sq_arbitration -> anvm_ctrler_callbacks"
        ],
        "body": [
            "sq_arbitration(${1:bfm}, ${2:sq}, ${3:burst_size});"
        ],
        "description": "[Class:anvm_ctrler_callbacks]\n     virtual function void sq_arbitration(\n    anvm_controller  bfm,\n    anvm_subq        sq,\n    ref int          burst_size);  return;    "
    },
    "anvm_uvm_port": {
        "prefix": "anvm_uvm_port",
        "body": [
            "anvm_uvm_port  ${0:name_class};"
        ],
        "description": "virtual class anvm_uvm_port;\n"
    },
    "anvm_ap_pre_setup_controller_phase0": {
        "prefix": "anvm_ap_pre_setup_controller_phase0",
        "body": [
            "anvm_ap_pre_setup_controller_phase0  ${0:name_class};"
        ],
        "description": "class anvm_ap_pre_setup_controller_phase0 extends anvm_uvm_port;\n"
    },
    "anvm_ap_pre_setup_controller_phase0 :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_ap_pre_setup_controller_phase0"
        ],
        "body": [
            "new(${1:ctrler_id});"
        ],
        "description": "[Class:anvm_ap_pre_setup_controller_phase0]\n     function new(\nbit       ctrler_id);    "
    },
    "anvm_ap_pre_setup_controller_phase1": {
        "prefix": "anvm_ap_pre_setup_controller_phase1",
        "body": [
            "anvm_ap_pre_setup_controller_phase1  ${0:name_class};"
        ],
        "description": "class anvm_ap_pre_setup_controller_phase1 extends anvm_uvm_port;\n"
    },
    "anvm_ap_pre_setup_controller_phase2": {
        "prefix": "anvm_ap_pre_setup_controller_phase2",
        "body": [
            "anvm_ap_pre_setup_controller_phase2  ${0:name_class};"
        ],
        "description": "class anvm_ap_pre_setup_controller_phase2 extends anvm_uvm_port;\n"
    },
    "anvm_ap_tx_cmd_arbitrated": {
        "prefix": "anvm_ap_tx_cmd_arbitrated",
        "body": [
            "anvm_ap_tx_cmd_arbitrated  ${0:name_class};"
        ],
        "description": "class anvm_ap_tx_cmd_arbitrated extends anvm_uvm_port;\n"
    },
    "anvm_ap_tx_cmd_before_pack": {
        "prefix": "anvm_ap_tx_cmd_before_pack",
        "body": [
            "anvm_ap_tx_cmd_before_pack  ${0:name_class};"
        ],
        "description": "class anvm_ap_tx_cmd_before_pack extends anvm_uvm_port;\n"
    },
    "anvm_ap_tx_cmd_after_pack": {
        "prefix": "anvm_ap_tx_cmd_after_pack",
        "body": [
            "anvm_ap_tx_cmd_after_pack  ${0:name_class};"
        ],
        "description": "class anvm_ap_tx_cmd_after_pack extends anvm_uvm_port;\n"
    },
    "anvm_ap_rx_cpl_enter_hsw": {
        "prefix": "anvm_ap_rx_cpl_enter_hsw",
        "body": [
            "anvm_ap_rx_cpl_enter_hsw  ${0:name_class};"
        ],
        "description": "class anvm_ap_rx_cpl_enter_hsw extends anvm_uvm_port;\n"
    },
    "anvm_ap_tx_cmd_done": {
        "prefix": "anvm_ap_tx_cmd_done",
        "body": [
            "anvm_ap_tx_cmd_done  ${0:name_class};"
        ],
        "description": "class anvm_ap_tx_cmd_done extends anvm_uvm_port;\n"
    },
    "anvm_ap_pre_ring_sq_doorbell": {
        "prefix": "anvm_ap_pre_ring_sq_doorbell",
        "body": [
            "anvm_ap_pre_ring_sq_doorbell  ${0:name_class};"
        ],
        "description": "class anvm_ap_pre_ring_sq_doorbell extends anvm_uvm_port;\n"
    },
    "anvm_ap_pre_ring_cq_doorbell": {
        "prefix": "anvm_ap_pre_ring_cq_doorbell",
        "body": [
            "anvm_ap_pre_ring_cq_doorbell  ${0:name_class};"
        ],
        "description": "class anvm_ap_pre_ring_cq_doorbell extends anvm_uvm_port;\n"
    },
    "anvm_ap_after_ring_sq_doorbell": {
        "prefix": "anvm_ap_after_ring_sq_doorbell",
        "body": [
            "anvm_ap_after_ring_sq_doorbell  ${0:name_class};"
        ],
        "description": "class anvm_ap_after_ring_sq_doorbell extends anvm_uvm_port;\n"
    },
    "anvm_ap_after_ring_cq_doorbell": {
        "prefix": "anvm_ap_after_ring_cq_doorbell",
        "body": [
            "anvm_ap_after_ring_cq_doorbell  ${0:name_class};"
        ],
        "description": "class anvm_ap_after_ring_cq_doorbell extends anvm_uvm_port;\n"
    },
    "anvm_ap_post_read_nvme_cap": {
        "prefix": "anvm_ap_post_read_nvme_cap",
        "body": [
            "anvm_ap_post_read_nvme_cap  ${0:name_class};"
        ],
        "description": "class anvm_ap_post_read_nvme_cap extends anvm_uvm_port;\n"
    },
    "anvm_controller_agent": {
        "prefix": "anvm_controller_agent",
        "body": [
            "anvm_controller_agent  ${0:name_class};"
        ],
        "description": "class anvm_controller_agent extends uvm_agent;\n"
    },
    "anvm_controller_agent :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_controller_agent"
        ],
        "body": [
            "new(${1:name}, ${2:parent});"
        ],
        "description": "[Class:anvm_controller_agent]\n     function new(\nstring name = \"anvm_controller_agent\",\n uvm_component parent = null);    "
    },
    "anvm_controller_agent :: build_phase": {
        "prefix": [
            "build_phase",
            "function:build_phase -> anvm_controller_agent"
        ],
        "body": [
            "build_phase(${1:phase});"
        ],
        "description": "[Class:anvm_controller_agent]\n     virtual function void build_phase(\nuvm_phase phase);    "
    },
    "anvm_controller_agent :: connect_phase": {
        "prefix": [
            "connect_phase",
            "function:connect_phase -> anvm_controller_agent"
        ],
        "body": [
            "connect_phase(${1:phase});"
        ],
        "description": "[Class:anvm_controller_agent]\n     virtual function void connect_phase(\nuvm_phase phase);    "
    },
    "anvm_host_adaptor": {
        "prefix": "anvm_host_adaptor",
        "body": [
            "anvm_host_adaptor  ${0:name_class};"
        ],
        "description": "class anvm_host_adaptor extends anvm_host_adaptor_base;\n"
    },
    "anvm_host_adaptor :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_host_adaptor"
        ],
        "body": [
            "new(${1:instance_name});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     function new(\nstring instance_name);    "
    },
    "anvm_host_adaptor :: my_connect": {
        "prefix": [
            "my_connect",
            "function:my_connect -> anvm_host_adaptor"
        ],
        "body": [
            "my_connect(${1:fake_rc}, ${2:hsw});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     function void my_connect(\nanvm_pcie_fake fake_rc,\n anvm_host_software hsw);    "
    },
    "anvm_host_adaptor :: wait_host_ready": {
        "prefix": [
            "wait_host_ready",
            "task:wait_host_ready -> anvm_host_adaptor"
        ],
        "body": [
            "wait_host_ready(${1:ctrler_ids});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual task wait_host_ready(\noutput bit       ctrler_ids      );    "
    },
    "anvm_host_adaptor :: get_pcie_ranges": {
        "prefix": [
            "get_pcie_ranges",
            "function:get_pcie_ranges -> anvm_host_adaptor"
        ],
        "body": [
            "get_pcie_ranges(${1:base}, ${2:limit});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     function void get_pcie_ranges(\n output bit       base      ,\n    output bit       limit      );    "
    },
    "anvm_host_adaptor :: get_host_memory_size": {
        "prefix": [
            "get_host_memory_size",
            "function:get_host_memory_size -> anvm_host_adaptor"
        ],
        "body": [
            "get_host_memory_size(${0:});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     function bit       get_host_memory_size(\n);    "
    },
    "anvm_host_adaptor :: get_pcie_bar": {
        "prefix": [
            "get_pcie_bar",
            "function:get_pcie_bar -> anvm_host_adaptor"
        ],
        "body": [
            "get_pcie_bar(${1:ctrler_id}, ${2:bar_id}, ${3:base}, ${4:limit}, ${5:prefetchable});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual function void get_pcie_bar(\n input  int       ctrler_id   ,\n                                        input  int       bar_id      ,\n                                        output avery_u64 base        ,\n                                        output avery_u64 limit       ,\n                                        output bit       prefetchable );    "
    },
    "anvm_host_adaptor :: write_dword": {
        "prefix": [
            "write_dword",
            "task:write_dword -> anvm_host_adaptor"
        ],
        "body": [
            "write_dword(${1:addr}, ${2:v}, ${3:flag}, ${4:dbg});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual task write_dword(\n                  bit              addr,\n                  bit              v   ,\n  bit              flag = 0,\n                  avery_data_base  dbg  = null );    "
    },
    "anvm_host_adaptor :: read_dword": {
        "prefix": [
            "read_dword",
            "task:read_dword -> anvm_host_adaptor"
        ],
        "body": [
            "read_dword(${1:addr}, ${2:v}, ${3:err}, ${4:flag}, ${5:dbg});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual task read_dword(\n                   bit              addr,\n            output bit              v   ,\n            output bit              err ,\n            input  bit              flag = 0,\n            input  avery_data_base  dbg  = null );    "
    },
    "anvm_host_adaptor :: write_dword_array": {
        "prefix": [
            "write_dword_array",
            "task:write_dword_array -> anvm_host_adaptor"
        ],
        "body": [
            "write_dword_array(${1:addr}, ${2:va}, ${3:first_be}, ${4:last_be}, ${5:flag}, ${6:dbg});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual task write_dword_array(\n            bit             addr    ,\n            bit             va          ,\n            bit              first_be = 'hf,\n            bit              last_be  = 'hf,\n            bit             flag     = 0,\n            avery_data_base dbg      = null );    "
    },
    "anvm_host_adaptor :: read_dword_array": {
        "prefix": [
            "read_dword_array",
            "task:read_dword_array -> anvm_host_adaptor"
        ],
        "body": [
            "read_dword_array(${1:addr}, ${2:num_dwords}, ${3:va}, ${4:err}, ${5:first_be}, ${6:last_be}, ${7:flag}, ${8:dbg});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual task read_dword_array(\n            input  bit             addr      ,\n                   int             num_dwords,\n            output bit             va            ,\n            output bit             err       ,\n            input  bit              first_be   = 'hf,\n            input  bit              last_be    = 'hf,\n            input  bit             flag       = 0,\n            input  avery_data_base dbg        = null );    "
    },
    "anvm_host_adaptor :: get_pcie_cap": {
        "prefix": [
            "get_pcie_cap",
            "task:get_pcie_cap -> anvm_host_adaptor"
        ],
        "body": [
            "get_pcie_cap(${1:ctrler_id}, ${2:cid}, ${3:offset}, ${4:dword}, ${5:err});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual task get_pcie_cap(\n            input  bit       ctrler_id,\n                   bit        cid      ,\n                   bit        offset   ,\n            output bit       dword    ,\n                   bit       err       );    "
    },
    "anvm_host_adaptor :: get_nvme_cap_range": {
        "prefix": [
            "get_nvme_cap_range",
            "function:get_nvme_cap_range -> anvm_host_adaptor"
        ],
        "body": [
            "get_nvme_cap_range(${1:nvme_device_id}, ${2:base}, ${3:limit}, ${4:prefetchable});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual function void get_nvme_cap_range(\nint nvme_device_id = 0,\n output avery_u64 base,\n avery_u64 limit,\n bit prefetchable);    "
    },
    "anvm_host_adaptor :: check_dword_aligned": {
        "prefix": [
            "check_dword_aligned",
            "function:check_dword_aligned -> anvm_host_adaptor"
        ],
        "body": [
            "check_dword_aligned(${1:s}, ${2:addr});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     local function void check_dword_aligned(\nstring s,\n avery_u64 addr);    "
    },
    "anvm_host_adaptor :: wait_irq": {
        "prefix": [
            "wait_irq",
            "task:wait_irq -> anvm_host_adaptor"
        ],
        "body": [
            "wait_irq(${1:ctrler_id}, ${2:int_kind}, ${3:addr}, ${4:data});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual task wait_irq(\noutput int ctrler_id,\n anvm_interrupt_e int_kind,\n bit       addr,\n bit        data);    "
    },
    "anvm_host_adaptor :: check_interrupt_support": {
        "prefix": [
            "check_interrupt_support",
            "task:check_interrupt_support -> anvm_host_adaptor"
        ],
        "body": [
            "check_interrupt_support(${1:ctrler_id}, ${2:int_pin_reg}, ${3:msi_sup}, ${4:msix_sup});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual task check_interrupt_support(\n        bit       ctrler_id  ,\n                                          output byte      int_pin_reg,\n                                             output bit       msi_sup    ,\n                                          output bit       msix_sup    );    "
    },
    "anvm_host_adaptor :: msix_setup": {
        "prefix": [
            "msix_setup",
            "task:msix_setup -> anvm_host_adaptor"
        ],
        "body": [
            "msix_setup(${1:ctrler_id}, ${2:msg_address}, ${3:msg_data}, ${4:vector}, ${5:success});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual task msix_setup(\n            input  bit       ctrler_id   ,\n                   bit       msg_address ,\n                   bit       msg_data    ,\n                   bit       vector      ,\n            output bit       success      );    "
    },
    "anvm_host_adaptor :: msi_setup": {
        "prefix": [
            "msi_setup",
            "task:msi_setup -> anvm_host_adaptor"
        ],
        "body": [
            "msi_setup(${1:ctrler_id}, ${2:msg_address}, ${3:msg_data}, ${4:multi_msg_enable}, ${5:success});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual task msi_setup(\n            input  bit       ctrler_id        ,\n                   bit       msg_address      ,\n                   bit       msg_data         ,\n                   bit        multi_msg_enable ,\n            output bit       success           );    "
    },
    "anvm_host_adaptor :: enable_or_disable_interrupt": {
        "prefix": [
            "enable_or_disable_interrupt",
            "task:enable_or_disable_interrupt -> anvm_host_adaptor"
        ],
        "body": [
            "enable_or_disable_interrupt(${1:ctrler_id}, ${2:int_kind}, ${3:is_enable});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual task enable_or_disable_interrupt(\nbit       ctrler_id,\n anvm_interrupt_e int_kind,\n bit is_enable);    "
    },
    "anvm_host_adaptor :: mask_interrupt": {
        "prefix": [
            "mask_interrupt",
            "task:mask_interrupt -> anvm_host_adaptor"
        ],
        "body": [
            "mask_interrupt(${1:ctrler_id}, ${2:int_vector}, ${3:int_kind});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual task mask_interrupt(\nbit       ctrler_id,\n int int_vector,\n anvm_interrupt_e int_kind);    "
    },
    "anvm_host_adaptor :: unmask_interrupt": {
        "prefix": [
            "unmask_interrupt",
            "task:unmask_interrupt -> anvm_host_adaptor"
        ],
        "body": [
            "unmask_interrupt(${1:ctrler_id}, ${2:int_vector}, ${3:int_kind});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual task unmask_interrupt(\nbit       ctrler_id,\n int int_vector,\n anvm_interrupt_e int_kind);    "
    },
    "anvm_host_adaptor :: get_msix_mem_base": {
        "prefix": [
            "get_msix_mem_base",
            "function:get_msix_mem_base -> anvm_host_adaptor"
        ],
        "body": [
            "get_msix_mem_base(${1:ctrler_id});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual function bit       get_msix_mem_base(\nbit       ctrler_id);    "
    },
    "anvm_host_adaptor :: get_msi_mem_base": {
        "prefix": [
            "get_msi_mem_base",
            "function:get_msi_mem_base -> anvm_host_adaptor"
        ],
        "body": [
            "get_msi_mem_base(${1:ctrler_id});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual function bit       get_msi_mem_base(\nbit       ctrler_id);    "
    },
    "anvm_host_adaptor :: get_msi_multi_msg_en": {
        "prefix": [
            "get_msi_multi_msg_en",
            "task:get_msi_multi_msg_en -> anvm_host_adaptor"
        ],
        "body": [
            "get_msi_multi_msg_en(${1:ctrler_id}, ${2:mme});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual task get_msi_multi_msg_en(\nbit       ctrler_id,\n output bit       mme);    "
    },
    "anvm_host_adaptor :: get_msix_table_size": {
        "prefix": [
            "get_msix_table_size",
            "task:get_msix_table_size -> anvm_host_adaptor"
        ],
        "body": [
            "get_msix_table_size(${1:ctrler_id}, ${2:table_size});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual task get_msix_table_size(\nbit       ctrler_id,\n output bit       table_size);    "
    },
    "anvm_host_adaptor :: do_hot_reset": {
        "prefix": [
            "do_hot_reset",
            "task:do_hot_reset -> anvm_host_adaptor"
        ],
        "body": [
            "do_hot_reset(${1:ctrler_id});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual task do_hot_reset(\nbit        ctrler_id);    "
    },
    "anvm_host_adaptor :: do_warm_reset": {
        "prefix": [
            "do_warm_reset",
            "task:do_warm_reset -> anvm_host_adaptor"
        ],
        "body": [
            "do_warm_reset(${1:hold_time_in_ns});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual task do_warm_reset(\ntime hold_time_in_ns = 0);    "
    },
    "anvm_host_adaptor :: do_cold_reset": {
        "prefix": [
            "do_cold_reset",
            "task:do_cold_reset -> anvm_host_adaptor"
        ],
        "body": [
            "do_cold_reset(${1:hold_time_in_ns});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual task do_cold_reset(\ntime hold_time_in_ns = 0);    "
    },
    "anvm_host_adaptor :: do_function_reset": {
        "prefix": [
            "do_function_reset",
            "task:do_function_reset -> anvm_host_adaptor"
        ],
        "body": [
            "do_function_reset(${1:ctrler_id}, ${2:flr_support});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual task do_function_reset(\nbit       ctrler_id,\n output bit flr_support);    "
    },
    "anvm_host_adaptor :: do_subsystem_reset": {
        "prefix": [
            "do_subsystem_reset",
            "task:do_subsystem_reset -> anvm_host_adaptor"
        ],
        "body": [
            "do_subsystem_reset(${1:ctrler_id});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual task do_subsystem_reset(\nbit       ctrler_id);    "
    },
    "anvm_host_adaptor :: enable_pcie_function": {
        "prefix": [
            "enable_pcie_function",
            "task:enable_pcie_function -> anvm_host_adaptor"
        ],
        "body": [
            "enable_pcie_function(${1:ctrler_id});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual task enable_pcie_function(\nbit       ctrler_id);    "
    },
    "anvm_host_adaptor :: reset": {
        "prefix": [
            "reset",
            "task:reset -> anvm_host_adaptor"
        ],
        "body": [
            "reset(${0:});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual task reset(\n);    "
    },
    "anvm_host_adaptor :: get_port_number": {
        "prefix": [
            "get_port_number",
            "function:get_port_number -> anvm_host_adaptor"
        ],
        "body": [
            "get_port_number(${1:ctrler_id});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual function int get_port_number (\nbit       ctrler_id);    "
    },
    "anvm_host_adaptor :: pcie_operation": {
        "prefix": [
            "pcie_operation",
            "task:pcie_operation -> anvm_host_adaptor"
        ],
        "body": [
            "pcie_operation(${1:ctrler_id}, ${2:kind}, ${3:err}, ${4:extra}, ${5:blocking});"
        ],
        "description": "[Class:anvm_host_adaptor]\n     virtual task pcie_operation(\n            input  bit            ctrler_id,\n            input  string         kind     ,\n            output bit            err      ,\n            input  anvm_data_base extra     = null,\n            input  bit            blocking  = 1);    "
    },
    "anvm_host_adaptor_base": {
        "prefix": "anvm_host_adaptor_base",
        "body": [
            "anvm_host_adaptor_base  ${0:name_class};"
        ],
        "description": "class anvm_host_adaptor_base;\n"
    },
    "anvm_host_adaptor_base :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_host_adaptor_base"
        ],
        "body": [
            "new(${1:instance_name});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     function new(\nstring instance_name);    "
    },
    "anvm_host_adaptor_base :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_host_adaptor_base"
        ],
        "body": [
            "sprint(${1:verbosity});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     function string sprint(\nint verbosity = 0);    "
    },
    "anvm_host_adaptor_base :: wait_host_ready": {
        "prefix": [
            "wait_host_ready",
            "task:wait_host_ready -> anvm_host_adaptor_base"
        ],
        "body": [
            "wait_host_ready(${1:ctrler_ids});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task wait_host_ready(\noutput bit       ctrler_ids      );    "
    },
    "anvm_host_adaptor_base :: wait_ctrlers_resetted": {
        "prefix": [
            "wait_ctrlers_resetted",
            "task:wait_ctrlers_resetted -> anvm_host_adaptor_base"
        ],
        "body": [
            "wait_ctrlers_resetted(${1:ctrler_ids});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task wait_ctrlers_resetted(\noutput bit       ctrler_ids      );    "
    },
    "anvm_host_adaptor_base :: get_pcie_ranges": {
        "prefix": [
            "get_pcie_ranges",
            "function:get_pcie_ranges -> anvm_host_adaptor_base"
        ],
        "body": [
            "get_pcie_ranges(${1:base}, ${2:limit});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual function void get_pcie_ranges(\n output bit       base      ,\n limit      );    "
    },
    "anvm_host_adaptor_base :: get_host_memory_size": {
        "prefix": [
            "get_host_memory_size",
            "function:get_host_memory_size -> anvm_host_adaptor_base"
        ],
        "body": [
            "get_host_memory_size(${0:});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual function bit       get_host_memory_size(\n);    "
    },
    "anvm_host_adaptor_base :: write_dword": {
        "prefix": [
            "write_dword",
            "task:write_dword -> anvm_host_adaptor_base"
        ],
        "body": [
            "write_dword(${1:addr}, ${2:v}, ${3:flag}, ${4:dbg});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task write_dword(\n            input bit             addr,\n            input bit             v   ,\n            input bit             flag = 0,\n               input avery_data_base dbg  = null );    "
    },
    "anvm_host_adaptor_base :: read_dword": {
        "prefix": [
            "read_dword",
            "task:read_dword -> anvm_host_adaptor_base"
        ],
        "body": [
            "read_dword(${1:addr}, ${2:v}, ${3:err}, ${4:flag}, ${5:dbg});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task read_dword(\n                   bit              addr,\n            output bit              v   ,\n            output bit              err ,\n            input  bit              flag = 0,\n               input  avery_data_base  dbg  = null );    "
    },
    "anvm_host_adaptor_base :: write_dword_array": {
        "prefix": [
            "write_dword_array",
            "task:write_dword_array -> anvm_host_adaptor_base"
        ],
        "body": [
            "write_dword_array(${1:addr}, ${2:va}, ${3:first_be}, ${4:last_be}, ${5:flag}, ${6:dbg});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task write_dword_array(\n            bit             addr    ,\n            bit             va          ,\n            bit              first_be = 'hf,\n            bit              last_be  = 'hf,\n            bit             flag     = 0,\n                   avery_data_base dbg      = null );    "
    },
    "anvm_host_adaptor_base :: read_dword_array": {
        "prefix": [
            "read_dword_array",
            "task:read_dword_array -> anvm_host_adaptor_base"
        ],
        "body": [
            "read_dword_array(${1:addr}, ${2:num_dwords}, ${3:va}, ${4:err}, ${5:first_be}, ${6:last_be}, ${7:flag}, ${8:dbg});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task read_dword_array(\n            input  bit             addr      ,\n                   int             num_dwords,\n            output bit             va            ,\n            output bit             err       ,\n            input  bit              first_be   = 'hf,\n            input  bit              last_be    = 'hf,\n            input  bit             flag       = 0,\n               input  avery_data_base dbg        = null );    "
    },
    "anvm_host_adaptor_base :: get_pcie_cap": {
        "prefix": [
            "get_pcie_cap",
            "task:get_pcie_cap -> anvm_host_adaptor_base"
        ],
        "body": [
            "get_pcie_cap(${1:ctrler_id}, ${2:cid}, ${3:offset}, ${4:dword}, ${5:err});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task get_pcie_cap(\ninput  bit       ctrler_id,\n        bit       cid,\n        bit       offset,\n output bit       dword,\n        bit err);    "
    },
    "anvm_host_adaptor_base :: get_nvme_cap_range": {
        "prefix": [
            "get_nvme_cap_range",
            "function:get_nvme_cap_range -> anvm_host_adaptor_base"
        ],
        "body": [
            "get_nvme_cap_range(${1:nvme_device_id}, ${2:base}, ${3:limit}, ${4:prefetchable});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual function void get_nvme_cap_range(\nint nvme_device_id = 0,\n output avery_u64 base,\n avery_u64 limit,\n bit prefetchable);    "
    },
    "anvm_host_adaptor_base :: get_pcie_bar": {
        "prefix": [
            "get_pcie_bar",
            "function:get_pcie_bar -> anvm_host_adaptor_base"
        ],
        "body": [
            "get_pcie_bar(${1:ctrler_id}, ${2:bar_id}, ${3:base}, ${4:limit}, ${5:prefetchable});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual function void get_pcie_bar(\n input  int       ctrler_id   ,\n                                        input  int       bar_id      ,\n                                        output avery_u64 base        ,\n                                        output avery_u64 limit       ,\n                                        output bit       prefetchable );    "
    },
    "anvm_host_adaptor_base :: wait_irq": {
        "prefix": [
            "wait_irq",
            "task:wait_irq -> anvm_host_adaptor_base"
        ],
        "body": [
            "wait_irq(${1:ctrler_id}, ${2:int_kind}, ${3:addr}, ${4:data});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task wait_irq(\n output int              ctrler_id,\n          anvm_interrupt_e int_kind ,\n  bit              addr     ,\n                                  bit              data      );    "
    },
    "anvm_host_adaptor_base :: check_interrupt_support": {
        "prefix": [
            "check_interrupt_support",
            "task:check_interrupt_support -> anvm_host_adaptor_base"
        ],
        "body": [
            "check_interrupt_support(${1:ctrler_id}, ${2:int_pin_reg}, ${3:msi_sup}, ${4:msix_sup});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task check_interrupt_support(\n        bit       ctrler_id  ,\n                                          output byte      int_pin_reg,\n                                             output bit       msi_sup    ,\n                                          output bit       msix_sup    );    "
    },
    "anvm_host_adaptor_base :: enable_or_disable_interrupt": {
        "prefix": [
            "enable_or_disable_interrupt",
            "task:enable_or_disable_interrupt -> anvm_host_adaptor_base"
        ],
        "body": [
            "enable_or_disable_interrupt(${1:ctrler_id}, ${2:int_kind}, ${3:is_enable});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task enable_or_disable_interrupt(\n bit              ctrler_id,\n                                              anvm_interrupt_e int_kind ,\n                                              bit              is_enable );    "
    },
    "anvm_host_adaptor_base :: mask_interrupt": {
        "prefix": [
            "mask_interrupt",
            "task:mask_interrupt -> anvm_host_adaptor_base"
        ],
        "body": [
            "mask_interrupt(${1:ctrler_id}, ${2:int_vector}, ${3:int_kind});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task mask_interrupt(\nbit       ctrler_id,\n int int_vector,\n anvm_interrupt_e int_kind);    "
    },
    "anvm_host_adaptor_base :: unmask_interrupt": {
        "prefix": [
            "unmask_interrupt",
            "task:unmask_interrupt -> anvm_host_adaptor_base"
        ],
        "body": [
            "unmask_interrupt(${1:ctrler_id}, ${2:int_vector}, ${3:int_kind});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task unmask_interrupt(\nbit       ctrler_id,\n int int_vector,\n anvm_interrupt_e int_kind);    "
    },
    "anvm_host_adaptor_base :: msix_setup": {
        "prefix": [
            "msix_setup",
            "task:msix_setup -> anvm_host_adaptor_base"
        ],
        "body": [
            "msix_setup(${1:ctrler_id}, ${2:msg_address}, ${3:msg_data}, ${4:vector}, ${5:success});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task msix_setup(\n            input  bit       ctrler_id,\n                   bit       msg_address,\n                   bit       msg_data   ,\n                   bit       vector     ,\n            output bit       success      );    "
    },
    "anvm_host_adaptor_base :: msi_setup": {
        "prefix": [
            "msi_setup",
            "task:msi_setup -> anvm_host_adaptor_base"
        ],
        "body": [
            "msi_setup(${1:ctrler_id}, ${2:msg_address}, ${3:msg_data}, ${4:multi_msg_enable}, ${5:success});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task msi_setup(\n            input  bit       ctrler_id,\n                   bit       msg_address     ,\n                   bit       msg_data        ,\n                   bit        multi_msg_enable,\n            output bit       success           );    "
    },
    "anvm_host_adaptor_base :: get_msi_mem_base": {
        "prefix": [
            "get_msi_mem_base",
            "function:get_msi_mem_base -> anvm_host_adaptor_base"
        ],
        "body": [
            "get_msi_mem_base(${1:ctrler_id});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual function bit       get_msi_mem_base(\nbit       ctrler_id);    "
    },
    "anvm_host_adaptor_base :: get_msix_mem_base": {
        "prefix": [
            "get_msix_mem_base",
            "function:get_msix_mem_base -> anvm_host_adaptor_base"
        ],
        "body": [
            "get_msix_mem_base(${1:ctrler_id});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual function bit       get_msix_mem_base(\nbit       ctrler_id);    "
    },
    "anvm_host_adaptor_base :: get_msi_multi_msg_en": {
        "prefix": [
            "get_msi_multi_msg_en",
            "task:get_msi_multi_msg_en -> anvm_host_adaptor_base"
        ],
        "body": [
            "get_msi_multi_msg_en(${1:ctrler_id}, ${2:mme});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task get_msi_multi_msg_en(\nbit       ctrler_id,\n output bit       mme);    "
    },
    "anvm_host_adaptor_base :: get_msix_table_size": {
        "prefix": [
            "get_msix_table_size",
            "task:get_msix_table_size -> anvm_host_adaptor_base"
        ],
        "body": [
            "get_msix_table_size(${1:ctrler_id}, ${2:table_size});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task get_msix_table_size(\nbit       ctrler_id,\n output bit       table_size);    "
    },
    "anvm_host_adaptor_base :: do_hot_reset": {
        "prefix": [
            "do_hot_reset",
            "task:do_hot_reset -> anvm_host_adaptor_base"
        ],
        "body": [
            "do_hot_reset(${1:ctrler_id});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task do_hot_reset(\nbit       ctrler_id);    "
    },
    "anvm_host_adaptor_base :: do_warm_reset": {
        "prefix": [
            "do_warm_reset",
            "task:do_warm_reset -> anvm_host_adaptor_base"
        ],
        "body": [
            "do_warm_reset(${1:hold_time_in_ns});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task do_warm_reset(\ntime hold_time_in_ns = 0);    "
    },
    "anvm_host_adaptor_base :: do_cold_reset": {
        "prefix": [
            "do_cold_reset",
            "task:do_cold_reset -> anvm_host_adaptor_base"
        ],
        "body": [
            "do_cold_reset(${1:hold_time_in_ns});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task do_cold_reset(\ntime hold_time_in_ns = 0);    "
    },
    "anvm_host_adaptor_base :: do_subsystem_reset": {
        "prefix": [
            "do_subsystem_reset",
            "task:do_subsystem_reset -> anvm_host_adaptor_base"
        ],
        "body": [
            "do_subsystem_reset(${1:ctrler_id});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task do_subsystem_reset(\nbit       ctrler_id);    "
    },
    "anvm_host_adaptor_base :: do_function_reset": {
        "prefix": [
            "do_function_reset",
            "task:do_function_reset -> anvm_host_adaptor_base"
        ],
        "body": [
            "do_function_reset(${1:ctrler_id}, ${2:flr_support});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task do_function_reset(\nbit       ctrler_id,\n output bit flr_support);    "
    },
    "anvm_host_adaptor_base :: enable_pcie_function": {
        "prefix": [
            "enable_pcie_function",
            "task:enable_pcie_function -> anvm_host_adaptor_base"
        ],
        "body": [
            "enable_pcie_function(${1:ctrler_id});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task enable_pcie_function(\nbit       ctrler_id);    "
    },
    "anvm_host_adaptor_base :: reset": {
        "prefix": [
            "reset",
            "task:reset -> anvm_host_adaptor_base"
        ],
        "body": [
            "reset(${0:});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task reset(\n);    "
    },
    "anvm_host_adaptor_base :: get_port_number": {
        "prefix": [
            "get_port_number",
            "function:get_port_number -> anvm_host_adaptor_base"
        ],
        "body": [
            "get_port_number(${1:ctrler_id});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual function int get_port_number (\nbit       ctrler_id);    "
    },
    "anvm_host_adaptor_base :: free_host_mem": {
        "prefix": [
            "free_host_mem",
            "function:free_host_mem -> anvm_host_adaptor_base"
        ],
        "body": [
            "free_host_mem(${1:addr}, ${2:len}, ${3:src});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual function void free_host_mem(\nbit       addr,\n bit       len,\n anvm_data_base src);    "
    },
    "anvm_host_adaptor_base :: dump_pcie_lecroy": {
        "prefix": [
            "dump_pcie_lecroy",
            "task:dump_pcie_lecroy -> anvm_host_adaptor_base"
        ],
        "body": [
            "dump_pcie_lecroy(${0:});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task dump_pcie_lecroy(\n);    "
    },
    "anvm_host_adaptor_base :: print_pcie_lecroy": {
        "prefix": [
            "print_pcie_lecroy",
            "function:print_pcie_lecroy -> anvm_host_adaptor_base"
        ],
        "body": [
            "print_pcie_lecroy(${1:s});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual function void print_pcie_lecroy(\nstring s);    "
    },
    "anvm_host_adaptor_base :: print_lecroy_wait_tlp": {
        "prefix": [
            "print_lecroy_wait_tlp",
            "function:print_lecroy_wait_tlp -> anvm_host_adaptor_base"
        ],
        "body": [
            "print_lecroy_wait_tlp(${0:});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual function void print_lecroy_wait_tlp(\n);    "
    },
    "anvm_host_adaptor_base :: pcie_operation": {
        "prefix": [
            "pcie_operation",
            "task:pcie_operation -> anvm_host_adaptor_base"
        ],
        "body": [
            "pcie_operation(${1:ctrler_id}, ${2:kind}, ${3:err}, ${4:extra}, ${5:blocking});"
        ],
        "description": "[Class:anvm_host_adaptor_base]\n     virtual task pcie_operation(\n            input  bit            ctrler_id,\n            input  string         kind     ,\n            output bit            err      ,\n            input  anvm_data_base extra     = null,\n            input  bit            blocking  = 1);    "
    },
    "anvm_driver_base": {
        "prefix": "anvm_driver_base",
        "body": [
            "anvm_driver_base  ${0:name_class};"
        ],
        "description": "class anvm_driver_base\n    `ifdef ANVM_UVM\n\textends uvm_driver #(anvm_data_base)\n    `endif\n    ;\n"
    },
    "anvm_driver_base :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_driver_base"
        ],
        "body": [
            "new(${1:name}, ${2:stream_id});"
        ],
        "description": "[Class:anvm_driver_base]\n     function new(\n string name,\n int stream_id );    "
    },
    "anvm_driver_base :: build": {
        "prefix": [
            "build",
            "function:build -> anvm_driver_base"
        ],
        "body": [
            "build(${0:});"
        ],
        "description": "[Class:anvm_driver_base]\n     virtual function void build(\n);    "
    },
    "anvm_driver_base :: run": {
        "prefix": [
            "run",
            "task:run -> anvm_driver_base"
        ],
        "body": [
            "run(${0:});"
        ],
        "description": "[Class:anvm_driver_base]\n     virtual task run(\n);    "
    },
    "anvm_driver_base :: send_item": {
        "prefix": [
            "send_item",
            "task:send_item -> anvm_driver_base"
        ],
        "body": [
            "send_item(${1:pbase}, ${2:isw});"
        ],
        "description": "[Class:anvm_driver_base]\n     local task send_item(\n anvm_data_base pbase,\n int isw = 0);    "
    },
    "anvm_driver_base :: wait_event": {
        "prefix": [
            "wait_event",
            "task:wait_event -> anvm_driver_base"
        ],
        "body": [
            "wait_event(${1:entry}, ${2:timer}, ${3:timeout_msg});"
        ],
        "description": "[Class:anvm_driver_base]\n     virtual task wait_event(\n string entry,\n time   timer = 0,\n string timeout_msg = \"\");    "
    },
    "anvm_driver_base :: post_command": {
        "prefix": [
            "post_command",
            "function:post_command -> anvm_driver_base"
        ],
        "body": [
            "post_command(${1:cmd}, ${2:mgr});"
        ],
        "description": "[Class:anvm_driver_base]\n     virtual function void post_command(\nanvm_cmd_entry cmd,\n anvm_controller_mgr mgr = null);    "
    },
    "anvm_driver_base :: get": {
        "prefix": [
            "get",
            "function:get -> anvm_driver_base"
        ],
        "body": [
            "get(${1:entry}, ${2:sub_entry});"
        ],
        "description": "[Class:anvm_driver_base]\n     virtual function bit       get(\ninput string entry,\n input string sub_entry = \"\");    "
    },
    "anvm_driver_base :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_driver_base"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_driver_base]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_kv_pair": {
        "prefix": "anvm_kv_pair",
        "body": [
            "anvm_kv_pair  ${0:name_class};"
        ],
        "description": "class anvm_kv_pair;\n"
    },
    "anvm_kv_pair :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_kv_pair"
        ],
        "body": [
            "new(${1:value_size}, ${2:key_length}, ${3:log});"
        ],
        "description": "[Class:anvm_kv_pair]\n     function new(\nint value_size = 0,\n int key_length,\n anvm_log log = null);    "
    },
    "anvm_kv_pair :: fill_data": {
        "prefix": [
            "fill_data",
            "function:fill_data -> anvm_kv_pair"
        ],
        "body": [
            "fill_data(${1:pattern}, ${2:exp_value});"
        ],
        "description": "[Class:anvm_kv_pair]\n     virtual function void fill_data(\nint pattern = 0,\n int exp_value = 0);    "
    },
    "anvm_kv_pair :: pack_to": {
        "prefix": [
            "pack_to",
            "function:pack_to -> anvm_kv_pair"
        ],
        "body": [
            "pack_to(${1:cmd});"
        ],
        "description": "[Class:anvm_kv_pair]\n     virtual function void pack_to(\nanvm_cmd_entry cmd);     "
    },
    "anvm_kv_pair :: unpack_from": {
        "prefix": [
            "unpack_from",
            "function:unpack_from -> anvm_kv_pair"
        ],
        "body": [
            "unpack_from(${1:cmd});"
        ],
        "description": "[Class:anvm_kv_pair]\n     virtual function void unpack_from(\nanvm_cmd_entry cmd);    "
    },
    "anvm_kv_pair :: get_key_size": {
        "prefix": [
            "get_key_size",
            "function:get_key_size -> anvm_kv_pair"
        ],
        "body": [
            "get_key_size(${0:});"
        ],
        "description": "[Class:anvm_kv_pair]\n     function int get_key_size(\n);    "
    },
    "anvm_seq_base": {
        "prefix": "anvm_seq_base",
        "body": [
            "anvm_seq_base  ${0:name_class};"
        ],
        "description": "class anvm_seq_base extends anvm_data_base;\n"
    },
    "anvm_seq_base :: run": {
        "prefix": [
            "run",
            "task:run -> anvm_seq_base"
        ],
        "body": [
            "run(${0:});"
        ],
        "description": "[Class:anvm_seq_base]\n     virtual task run(\n);    "
    },
    "anvm_callbacks": {
        "prefix": "anvm_callbacks",
        "body": [
            "anvm_callbacks  ${0:name_class};"
        ],
        "description": "virtual class anvm_callbacks; \n"
    },
    "anvm_callbacks :: pre_setup_controller_phase0": {
        "prefix": [
            "pre_setup_controller_phase0",
            "function:pre_setup_controller_phase0 -> anvm_callbacks"
        ],
        "body": [
            "pre_setup_controller_phase0(${1:hsw}, ${2:mgr}, ${3:skip_setup});"
        ],
        "description": "[Class:anvm_callbacks]\n     virtual function void pre_setup_controller_phase0(\n        input anvm_host_software  hsw,\ninput anvm_controller_mgr mgr,\n        inout bit                 skip_setup);return;    "
    },
    "anvm_callbacks :: pre_setup_controller_phase1": {
        "prefix": [
            "pre_setup_controller_phase1",
            "function:pre_setup_controller_phase1 -> anvm_callbacks"
        ],
        "body": [
            "pre_setup_controller_phase1(${1:hsw}, ${2:mgr});"
        ],
        "description": "[Class:anvm_callbacks]\n     virtual function void pre_setup_controller_phase1(\n    anvm_host_software hsw,\n    anvm_controller_mgr mgr);return;    "
    },
    "anvm_callbacks :: pre_setup_controller_phase2": {
        "prefix": [
            "pre_setup_controller_phase2",
            "function:pre_setup_controller_phase2 -> anvm_callbacks"
        ],
        "body": [
            "pre_setup_controller_phase2(${1:hsw}, ${2:mgr});"
        ],
        "description": "[Class:anvm_callbacks]\n     virtual function void pre_setup_controller_phase2(\n    anvm_host_software hsw,\n    anvm_controller_mgr mgr);return;    "
    },
    "anvm_callbacks :: pre_allocate_msix_vector": {
        "prefix": [
            "pre_allocate_msix_vector",
            "function:pre_allocate_msix_vector -> anvm_callbacks"
        ],
        "body": [
            "pre_allocate_msix_vector(${1:hsw}, ${2:mgr}, ${3:vector}, ${4:msg_addr}, ${5:msg_data});"
        ],
        "description": "[Class:anvm_callbacks]\n     virtual function void pre_allocate_msix_vector(\n    anvm_host_software   hsw,\n    anvm_controller_mgr  mgr,\n    input int            vector,\n    inout bit            msg_addr,\n        inout bit            msg_data);return;    "
    },
    "anvm_callbacks :: tx_cmd_arbitrated": {
        "prefix": [
            "tx_cmd_arbitrated",
            "function:tx_cmd_arbitrated -> anvm_callbacks"
        ],
        "body": [
            "tx_cmd_arbitrated(${1:hsw}, ${2:cmd});"
        ],
        "description": "[Class:anvm_callbacks]\n     virtual function void tx_cmd_arbitrated(\n    anvm_host_software hsw,\n    anvm_cmd_entry     cmd);return;    "
    },
    "anvm_callbacks :: pre_allocate_sgl": {
        "prefix": [
            "pre_allocate_sgl",
            "function:pre_allocate_sgl -> anvm_callbacks"
        ],
        "body": [
            "pre_allocate_sgl(${1:hsw}, ${2:cmd}, ${3:sgl});"
        ],
        "description": "[Class:anvm_callbacks]\n     virtual function void pre_allocate_sgl(\n    anvm_host_software hsw,\n    anvm_cmd_entry     cmd,\n    ref anvm_sgl       sgl);return;    "
    },
    "anvm_callbacks :: tx_cmd_before_pack": {
        "prefix": [
            "tx_cmd_before_pack",
            "function:tx_cmd_before_pack -> anvm_callbacks"
        ],
        "body": [
            "tx_cmd_before_pack(${1:hsw}, ${2:cmd});"
        ],
        "description": "[Class:anvm_callbacks]\n     virtual function void tx_cmd_before_pack(\n    anvm_host_software hsw,\n    anvm_cmd_entry     cmd);return;    "
    },
    "anvm_callbacks :: tx_cmd_after_pack": {
        "prefix": [
            "tx_cmd_after_pack",
            "function:tx_cmd_after_pack -> anvm_callbacks"
        ],
        "body": [
            "tx_cmd_after_pack(${1:hsw}, ${2:cmd});"
        ],
        "description": "[Class:anvm_callbacks]\n     virtual function void tx_cmd_after_pack(\n    anvm_host_software hsw,\n    anvm_cmd_entry     cmd);return;    "
    },
    "anvm_callbacks :: rx_cpl_enter_hsw": {
        "prefix": [
            "rx_cpl_enter_hsw",
            "function:rx_cpl_enter_hsw -> anvm_callbacks"
        ],
        "body": [
            "rx_cpl_enter_hsw(${1:hsw}, ${2:cpl});"
        ],
        "description": "[Class:anvm_callbacks]\n     virtual function void rx_cpl_enter_hsw(\n    anvm_host_software hsw,\n    anvm_cpl_entry     cpl );return;    "
    },
    "anvm_callbacks :: rx_mpbqe_enter_hsw": {
        "prefix": [
            "rx_mpbqe_enter_hsw",
            "function:rx_mpbqe_enter_hsw -> anvm_callbacks"
        ],
        "body": [
            "rx_mpbqe_enter_hsw(${1:hsw}, ${2:bqe});"
        ],
        "description": "[Class:anvm_callbacks]\n     virtual function void rx_mpbqe_enter_hsw(\n    anvm_host_software hsw,\n    anvm_cpl_entry     bqe );return;    "
    },
    "anvm_callbacks :: rx_data_fetched": {
        "prefix": [
            "rx_data_fetched",
            "function:rx_data_fetched -> anvm_callbacks"
        ],
        "body": [
            "rx_data_fetched(${1:hsw}, ${2:cmd});"
        ],
        "description": "[Class:anvm_callbacks]\n     virtual function void rx_data_fetched(\n    anvm_host_software hsw,\n    anvm_cmd_entry     cmd);return;    "
    },
    "anvm_callbacks :: tx_cmd_done": {
        "prefix": [
            "tx_cmd_done",
            "function:tx_cmd_done -> anvm_callbacks"
        ],
        "body": [
            "tx_cmd_done(${1:hsw}, ${2:cmd});"
        ],
        "description": "[Class:anvm_callbacks]\n     virtual function void tx_cmd_done(\n    anvm_host_software hsw,\n    anvm_cmd_entry     cmd);return;    "
    },
    "anvm_callbacks :: pre_ring_sq_doorbell": {
        "prefix": [
            "pre_ring_sq_doorbell",
            "function:pre_ring_sq_doorbell -> anvm_callbacks"
        ],
        "body": [
            "pre_ring_sq_doorbell(${1:hsw}, ${2:mgr}, ${3:qid}, ${4:tail}, ${5:is_skip});"
        ],
        "description": "[Class:anvm_callbacks]\n     virtual function void pre_ring_sq_doorbell(\n    anvm_host_software  hsw,\n    anvm_controller_mgr mgr,\n    int                 qid,\n     inout bit           tail,\n      inout bit           is_skip);return;    "
    },
    "anvm_callbacks :: pre_ring_cq_doorbell": {
        "prefix": [
            "pre_ring_cq_doorbell",
            "function:pre_ring_cq_doorbell -> anvm_callbacks"
        ],
        "body": [
            "pre_ring_cq_doorbell(${1:hsw}, ${2:mgr}, ${3:qid}, ${4:head}, ${5:is_skip});"
        ],
        "description": "[Class:anvm_callbacks]\n     virtual function void pre_ring_cq_doorbell(\n    anvm_host_software  hsw,\n    anvm_controller_mgr mgr,\n    int                 qid,\n    inout bit           head,\n    inout bit           is_skip);return;    "
    },
    "anvm_callbacks :: after_ring_sq_doorbell": {
        "prefix": [
            "after_ring_sq_doorbell",
            "function:after_ring_sq_doorbell -> anvm_callbacks"
        ],
        "body": [
            "after_ring_sq_doorbell(${1:hsw}, ${2:mgr}, ${3:qid}, ${4:tail});"
        ],
        "description": "[Class:anvm_callbacks]\n     virtual function void after_ring_sq_doorbell(\n    anvm_host_software  hsw,\n    anvm_controller_mgr mgr,\n    int                 qid,\n    bit                 tail);return;    "
    },
    "anvm_callbacks :: after_ring_cq_doorbell": {
        "prefix": [
            "after_ring_cq_doorbell",
            "function:after_ring_cq_doorbell -> anvm_callbacks"
        ],
        "body": [
            "after_ring_cq_doorbell(${1:hsw}, ${2:mgr}, ${3:qid}, ${4:head});"
        ],
        "description": "[Class:anvm_callbacks]\n     virtual function void after_ring_cq_doorbell(\n    anvm_host_software  hsw,\n    anvm_controller_mgr mgr,\n    int                 qid,\n     bit                 head );return;    "
    },
    "anvm_callbacks :: before_write_nvme_cap": {
        "prefix": [
            "before_write_nvme_cap",
            "function:before_write_nvme_cap -> anvm_callbacks"
        ],
        "body": [
            "before_write_nvme_cap(${1:hsw}, ${2:mgr}, ${3:byte_offset}, ${4:data_array});"
        ],
        "description": "[Class:anvm_callbacks]\n     virtual function void before_write_nvme_cap(\n    anvm_host_software  hsw,\n    anvm_controller_mgr mgr,\n    avery_u32           byte_offset,\n     ref avery_u32       data_array      );    "
    },
    "anvm_callbacks :: post_read_nvme_cap": {
        "prefix": [
            "post_read_nvme_cap",
            "function:post_read_nvme_cap -> anvm_callbacks"
        ],
        "body": [
            "post_read_nvme_cap(${1:hsw}, ${2:mgr}, ${3:byte_offset}, ${4:data_array});"
        ],
        "description": "[Class:anvm_callbacks]\n     virtual function void post_read_nvme_cap(\n    anvm_host_software  hsw,\n    anvm_controller_mgr mgr,\n    avery_u32           byte_offset,\n    ref   avery_u32     data_array      );return;    "
    },
    "anvm_callbacks :: before_setup_cmb": {
        "prefix": [
            "before_setup_cmb",
            "function:before_setup_cmb -> anvm_callbacks"
        ],
        "body": [
            "before_setup_cmb(${1:hsw}, ${2:mgr}, ${3:cba});"
        ],
        "description": "[Class:anvm_callbacks]\n     virtual function void before_setup_cmb(\n    anvm_host_software  hsw,\n    anvm_controller_mgr mgr,\n    ref  avery_u64      cba     );    "
    },
    "anvm_callbacks :: before_setup_pmr": {
        "prefix": [
            "before_setup_pmr",
            "function:before_setup_pmr -> anvm_callbacks"
        ],
        "body": [
            "before_setup_pmr(${1:hsw}, ${2:mgr}, ${3:cba});"
        ],
        "description": "[Class:anvm_callbacks]\n     virtual function void before_setup_pmr(\n    anvm_host_software  hsw,\n    anvm_controller_mgr mgr,\n    ref  avery_u64      cba     );    "
    },
    "anvm_host_software_agent": {
        "prefix": "anvm_host_software_agent",
        "body": [
            "anvm_host_software_agent  ${0:name_class};"
        ],
        "description": "class anvm_host_software_agent extends uvm_agent;\n"
    },
    "anvm_host_software_agent :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_host_software_agent"
        ],
        "body": [
            "new(${1:name}, ${2:parent});"
        ],
        "description": "[Class:anvm_host_software_agent]\n     function new(\nstring name = \"anvm_host_software_agent\",\n uvm_component parent = null);    "
    },
    "anvm_host_software_agent :: build": {
        "prefix": [
            "build",
            "function:build -> anvm_host_software_agent"
        ],
        "body": [
            "build(${0:});"
        ],
        "description": "[Class:anvm_host_software_agent]\n     virtual function void build(\n);    "
    },
    "anvm_host_software_agent :: connect": {
        "prefix": [
            "connect",
            "function:connect -> anvm_host_software_agent"
        ],
        "body": [
            "connect(${0:});"
        ],
        "description": "[Class:anvm_host_software_agent]\n     virtual function void connect(\n);    "
    },
    "anvm_ctrler_adaptor_base": {
        "prefix": "anvm_ctrler_adaptor_base",
        "body": [
            "anvm_ctrler_adaptor_base  ${0:name_class};"
        ],
        "description": "class anvm_ctrler_adaptor_base;\n"
    },
    "anvm_ctrler_adaptor_base :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_ctrler_adaptor_base"
        ],
        "body": [
            "new(${1:instance_name});"
        ],
        "description": "[Class:anvm_ctrler_adaptor_base]\n     function new(\nstring instance_name);    "
    },
    "anvm_ctrler_adaptor_base :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_ctrler_adaptor_base"
        ],
        "body": [
            "sprint(${1:verbosity});"
        ],
        "description": "[Class:anvm_ctrler_adaptor_base]\n     function string sprint(\nint verbosity = 0);    "
    },
    "anvm_ctrler_adaptor_base :: write_mem": {
        "prefix": [
            "write_mem",
            "task:write_mem -> anvm_ctrler_adaptor_base"
        ],
        "body": [
            "write_mem(${1:addr}, ${2:v}, ${3:be});"
        ],
        "description": "[Class:anvm_ctrler_adaptor_base]\n     virtual task write_mem(\nbit       addr,\n bit       v,\n bit       be);    "
    },
    "anvm_ctrler_adaptor_base :: read_mem": {
        "prefix": [
            "read_mem",
            "task:read_mem -> anvm_ctrler_adaptor_base"
        ],
        "body": [
            "read_mem(${1:addr}, ${2:v}, ${3:err});"
        ],
        "description": "[Class:anvm_ctrler_adaptor_base]\n     virtual task read_mem(\nbit       addr,\n output bit       v,\n output bit err);    "
    },
    "anvm_ctrler_adaptor_base :: write_mem_array": {
        "prefix": [
            "write_mem_array",
            "task:write_mem_array -> anvm_ctrler_adaptor_base"
        ],
        "body": [
            "write_mem_array(${1:addr}, ${2:va}, ${3:fbe}, ${4:lbe}, ${5:dbg});"
        ],
        "description": "[Class:anvm_ctrler_adaptor_base]\n     virtual task write_mem_array(\nbit       addr,\n ref bit       va      ,\n input bit       fbe,\n bit       lbe,\n string dbg=\"\");    "
    },
    "anvm_ctrler_adaptor_base :: read_mem_array": {
        "prefix": [
            "read_mem_array",
            "task:read_mem_array -> anvm_ctrler_adaptor_base"
        ],
        "body": [
            "read_mem_array(${1:addr}, ${2:num_dwords}, ${3:va}, ${4:err});"
        ],
        "description": "[Class:anvm_ctrler_adaptor_base]\n     virtual task read_mem_array(\nbit       addr,\n int num_dwords,\n output bit       va      ,\n output bit err);    "
    },
    "anvm_ctrler_adaptor_base :: do_warm_reset": {
        "prefix": [
            "do_warm_reset",
            "task:do_warm_reset -> anvm_ctrler_adaptor_base"
        ],
        "body": [
            "do_warm_reset(${1:hold_time_in_ns});"
        ],
        "description": "[Class:anvm_ctrler_adaptor_base]\n     virtual task do_warm_reset(\ntime hold_time_in_ns = 0);    "
    },
    "anvm_ctrler_adaptor_base :: do_cold_reset": {
        "prefix": [
            "do_cold_reset",
            "task:do_cold_reset -> anvm_ctrler_adaptor_base"
        ],
        "body": [
            "do_cold_reset(${1:hold_time_in_ns});"
        ],
        "description": "[Class:anvm_ctrler_adaptor_base]\n     virtual task do_cold_reset(\ntime hold_time_in_ns = 0);    "
    },
    "anvm_ctrler_adaptor_base :: reset": {
        "prefix": [
            "reset",
            "task:reset -> anvm_ctrler_adaptor_base"
        ],
        "body": [
            "reset(${0:});"
        ],
        "description": "[Class:anvm_ctrler_adaptor_base]\n     virtual task reset(\n);    "
    },
    "anvm_ctrler_adaptor_base :: check_interrupt": {
        "prefix": [
            "check_interrupt",
            "task:check_interrupt -> anvm_ctrler_adaptor_base"
        ],
        "body": [
            "check_interrupt(${1:func}, ${2:pin_enabled}, ${3:msi_enabled}, ${4:msix_enabled});"
        ],
        "description": "[Class:anvm_ctrler_adaptor_base]\n     virtual task check_interrupt(\n input  int func        ,\n                                  output bit pin_enabled ,\n                                  output bit msi_enabled ,\n                                  output bit msix_enabled );    "
    },
    "anvm_ctrler_adaptor_base :: signal_interrupt": {
        "prefix": [
            "signal_interrupt",
            "task:signal_interrupt -> anvm_ctrler_adaptor_base"
        ],
        "body": [
            "signal_interrupt(${1:func}, ${2:int_vector}, ${3:int_status});"
        ],
        "description": "[Class:anvm_ctrler_adaptor_base]\n     virtual task signal_interrupt(\n    input  int  func,\n    input  int  int_vector,\n    output int  int_status    );    "
    },
    "anvm_ctrler_adaptor_base :: clear_interrupt": {
        "prefix": [
            "clear_interrupt",
            "task:clear_interrupt -> anvm_ctrler_adaptor_base"
        ],
        "body": [
            "clear_interrupt(${1:func}, ${2:int_vector});"
        ],
        "description": "[Class:anvm_ctrler_adaptor_base]\n     virtual task clear_interrupt(\nint func,\n int int_vector);    "
    },
    "anvm_ctrler_adaptor_base :: set_nvme_cap": {
        "prefix": [
            "set_nvme_cap",
            "function:set_nvme_cap -> anvm_ctrler_adaptor_base"
        ],
        "body": [
            "set_nvme_cap(${1:nvme_cap});"
        ],
        "description": "[Class:anvm_ctrler_adaptor_base]\n     virtual function void set_nvme_cap(\nanvm_ctrler_registers nvme_cap);    "
    },
    "anvm_ctrler_adaptor_base :: get_port_id": {
        "prefix": [
            "get_port_id",
            "function:get_port_id -> anvm_ctrler_adaptor_base"
        ],
        "body": [
            "get_port_id(${0:});"
        ],
        "description": "[Class:anvm_ctrler_adaptor_base]\n     virtual function int get_port_id(\n);    "
    },
    "anvm_ctrler_adaptor_base :: sync_bus_num": {
        "prefix": [
            "sync_bus_num",
            "task:sync_bus_num -> anvm_ctrler_adaptor_base"
        ],
        "body": [
            "sync_bus_num(${1:bus_num});"
        ],
        "description": "[Class:anvm_ctrler_adaptor_base]\n     virtual task sync_bus_num(\ninout bit       bus_num);    "
    },
    "anvm_ctrler_adaptor_base :: get_bus_num": {
        "prefix": [
            "get_bus_num",
            "function:get_bus_num -> anvm_ctrler_adaptor_base"
        ],
        "body": [
            "get_bus_num(${0:});"
        ],
        "description": "[Class:anvm_ctrler_adaptor_base]\n     virtual function bit       get_bus_num(\n);    "
    },
    "anvm_ctrler_adaptor_base :: wait_pcie_event": {
        "prefix": [
            "wait_pcie_event",
            "task:wait_pcie_event -> anvm_ctrler_adaptor_base"
        ],
        "body": [
            "wait_pcie_event(${1:entry});"
        ],
        "description": "[Class:anvm_ctrler_adaptor_base]\n     virtual task wait_pcie_event(\nstring entry);                                                                                                                  "
    },
    "anvm_ctrler_adaptor_base :: get_msi_multi_msg_en": {
        "prefix": [
            "get_msi_multi_msg_en",
            "function:get_msi_multi_msg_en -> anvm_ctrler_adaptor_base"
        ],
        "body": [
            "get_msi_multi_msg_en(${0:});"
        ],
        "description": "[Class:anvm_ctrler_adaptor_base]\n     virtual function int get_msi_multi_msg_en(\n);    "
    },
    "anvm_ctrler_adaptor_base :: set_msix_table_size": {
        "prefix": [
            "set_msix_table_size",
            "function:set_msix_table_size -> anvm_ctrler_adaptor_base"
        ],
        "body": [
            "set_msix_table_size(${1:n_vector});"
        ],
        "description": "[Class:anvm_ctrler_adaptor_base]\n     virtual function void set_msix_table_size(\nint n_vector);    "
    },
    "anvm_ctrler_adaptor_base :: get_msix_table_size": {
        "prefix": [
            "get_msix_table_size",
            "function:get_msix_table_size -> anvm_ctrler_adaptor_base"
        ],
        "body": [
            "get_msix_table_size(${0:});"
        ],
        "description": "[Class:anvm_ctrler_adaptor_base]\n     virtual function int get_msix_table_size(\n);    "
    },
    "anvm_ctrler_adaptor_base :: get_bar": {
        "prefix": [
            "get_bar",
            "function:get_bar -> anvm_ctrler_adaptor_base"
        ],
        "body": [
            "get_bar(${1:bar_id}, ${2:base}, ${3:len}, ${4:bar_kind});"
        ],
        "description": "[Class:anvm_ctrler_adaptor_base]\n     virtual function bit get_bar(\n input  int       bar_id  ,\n                                  output bit       base    ,\n                                  output bit       len     ,\n                                  output int       bar_kind );    "
    },
    "anvm_ctrler_adaptor": {
        "prefix": "anvm_ctrler_adaptor",
        "body": [
            "anvm_ctrler_adaptor  ${0:name_class};"
        ],
        "description": "class anvm_ctrler_adaptor extends anvm_ctrler_adaptor_base;\n"
    },
    "anvm_ctrler_adaptor :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_ctrler_adaptor"
        ],
        "body": [
            "new(${1:instance_name});"
        ],
        "description": "[Class:anvm_ctrler_adaptor]\n     function new(\nstring instance_name);    "
    },
    "anvm_ctrler_adaptor :: my_connect": {
        "prefix": [
            "my_connect",
            "function:my_connect -> anvm_ctrler_adaptor"
        ],
        "body": [
            "my_connect(${1:fake_ep}, ${2:ctrler}, ${3:func_num});"
        ],
        "description": "[Class:anvm_ctrler_adaptor]\n     function void my_connect(\n            anvm_pcie_fake  fake_ep,\n            anvm_controller ctrler,\n            bit              func_num);    "
    },
    "anvm_ctrler_adaptor :: write_mem": {
        "prefix": [
            "write_mem",
            "task:write_mem -> anvm_ctrler_adaptor"
        ],
        "body": [
            "write_mem(${1:addr}, ${2:v}, ${3:be});"
        ],
        "description": "[Class:anvm_ctrler_adaptor]\n     virtual task write_mem(\nbit       addr,\n bit       v,\n bit       be);    "
    },
    "anvm_ctrler_adaptor :: read_mem": {
        "prefix": [
            "read_mem",
            "task:read_mem -> anvm_ctrler_adaptor"
        ],
        "body": [
            "read_mem(${1:addr}, ${2:v}, ${3:err});"
        ],
        "description": "[Class:anvm_ctrler_adaptor]\n     virtual task read_mem(\nbit       addr,\n output bit       v,\n output bit err);    "
    },
    "anvm_ctrler_adaptor :: write_mem_array": {
        "prefix": [
            "write_mem_array",
            "task:write_mem_array -> anvm_ctrler_adaptor"
        ],
        "body": [
            "write_mem_array(${1:addr}, ${2:va}, ${3:fbe}, ${4:lbe}, ${5:dbg});"
        ],
        "description": "[Class:anvm_ctrler_adaptor]\n     virtual task write_mem_array(\nbit       addr,\n ref bit       va      ,\n input bit       fbe,\n bit       lbe,\n string dbg=\"\");    "
    },
    "anvm_ctrler_adaptor :: read_mem_array": {
        "prefix": [
            "read_mem_array",
            "task:read_mem_array -> anvm_ctrler_adaptor"
        ],
        "body": [
            "read_mem_array(${1:addr}, ${2:num_dwords}, ${3:va}, ${4:err});"
        ],
        "description": "[Class:anvm_ctrler_adaptor]\n     virtual task read_mem_array(\nbit       addr,\n int num_dwords,\n output bit       va      ,\n output bit err);    "
    },
    "anvm_ctrler_adaptor :: set_nvme_cap": {
        "prefix": [
            "set_nvme_cap",
            "function:set_nvme_cap -> anvm_ctrler_adaptor"
        ],
        "body": [
            "set_nvme_cap(${1:nvme_cap});"
        ],
        "description": "[Class:anvm_ctrler_adaptor]\n     virtual function void set_nvme_cap(\nanvm_ctrler_registers nvme_cap);    "
    },
    "anvm_ctrler_adaptor :: write_nvme_cap": {
        "prefix": [
            "write_nvme_cap",
            "task:write_nvme_cap -> anvm_ctrler_adaptor"
        ],
        "body": [
            "write_nvme_cap(${1:offset}, ${2:v});"
        ],
        "description": "[Class:anvm_ctrler_adaptor]\n     task write_nvme_cap(\nbit       offset,\n  bit       v);    "
    },
    "anvm_ctrler_adaptor :: read_nvme_cap": {
        "prefix": [
            "read_nvme_cap",
            "task:read_nvme_cap -> anvm_ctrler_adaptor"
        ],
        "body": [
            "read_nvme_cap(${1:offset}, ${2:v});"
        ],
        "description": "[Class:anvm_ctrler_adaptor]\n     task read_nvme_cap(\nbit       offset,\n output bit       v);    "
    },
    "anvm_ctrler_adaptor :: check_dword_aligned": {
        "prefix": [
            "check_dword_aligned",
            "function:check_dword_aligned -> anvm_ctrler_adaptor"
        ],
        "body": [
            "check_dword_aligned(${1:s}, ${2:addr});"
        ],
        "description": "[Class:anvm_ctrler_adaptor]\n     local function void check_dword_aligned(\nstring s,\n bit       addr);    "
    },
    "anvm_ctrler_adaptor :: check_interrupt": {
        "prefix": [
            "check_interrupt",
            "task:check_interrupt -> anvm_ctrler_adaptor"
        ],
        "body": [
            "check_interrupt(${1:func}, ${2:pin_enabled}, ${3:msi_enabled}, ${4:msix_enabled});"
        ],
        "description": "[Class:anvm_ctrler_adaptor]\n     virtual task check_interrupt(\n input  int func        ,\n                                  output bit pin_enabled ,\n                                  output bit msi_enabled ,\n                                  output bit msix_enabled );    "
    },
    "anvm_ctrler_adaptor :: signal_interrupt": {
        "prefix": [
            "signal_interrupt",
            "task:signal_interrupt -> anvm_ctrler_adaptor"
        ],
        "body": [
            "signal_interrupt(${1:func}, ${2:int_vector}, ${3:int_status});"
        ],
        "description": "[Class:anvm_ctrler_adaptor]\n     virtual task signal_interrupt(\nint func,\n int int_vector,\n output int int_status);    "
    },
    "anvm_ctrler_adaptor :: do_warm_reset": {
        "prefix": [
            "do_warm_reset",
            "task:do_warm_reset -> anvm_ctrler_adaptor"
        ],
        "body": [
            "do_warm_reset(${1:hold_time_in_ns});"
        ],
        "description": "[Class:anvm_ctrler_adaptor]\n     virtual task do_warm_reset(\ntime hold_time_in_ns = 0);    "
    },
    "anvm_ctrler_adaptor :: do_cold_reset": {
        "prefix": [
            "do_cold_reset",
            "task:do_cold_reset -> anvm_ctrler_adaptor"
        ],
        "body": [
            "do_cold_reset(${1:hold_time_in_ns});"
        ],
        "description": "[Class:anvm_ctrler_adaptor]\n     virtual task do_cold_reset(\ntime hold_time_in_ns = 0);    "
    },
    "anvm_ctrler_adaptor :: reset": {
        "prefix": [
            "reset",
            "task:reset -> anvm_ctrler_adaptor"
        ],
        "body": [
            "reset(${0:});"
        ],
        "description": "[Class:anvm_ctrler_adaptor]\n     virtual task reset(\n);    "
    },
    "anvm_ctrler_adaptor :: wait_pcie_event": {
        "prefix": [
            "wait_pcie_event",
            "task:wait_pcie_event -> anvm_ctrler_adaptor"
        ],
        "body": [
            "wait_pcie_event(${1:entry});"
        ],
        "description": "[Class:anvm_ctrler_adaptor]\n     virtual task wait_pcie_event(\nstring entry);    "
    },
    "anvm_ctrler_adaptor :: sync_bus_num": {
        "prefix": [
            "sync_bus_num",
            "task:sync_bus_num -> anvm_ctrler_adaptor"
        ],
        "body": [
            "sync_bus_num(${1:bus_num});"
        ],
        "description": "[Class:anvm_ctrler_adaptor]\n     virtual task sync_bus_num(\ninout bit       bus_num);    "
    },
    "anvm_ctrler_adaptor :: get_bus_num": {
        "prefix": [
            "get_bus_num",
            "function:get_bus_num -> anvm_ctrler_adaptor"
        ],
        "body": [
            "get_bus_num(${0:});"
        ],
        "description": "[Class:anvm_ctrler_adaptor]\n     virtual function bit       get_bus_num(\n);    "
    },
    "anvm_ctrler_adaptor :: get_msi_multi_msg_en": {
        "prefix": [
            "get_msi_multi_msg_en",
            "function:get_msi_multi_msg_en -> anvm_ctrler_adaptor"
        ],
        "body": [
            "get_msi_multi_msg_en(${0:});"
        ],
        "description": "[Class:anvm_ctrler_adaptor]\n     virtual function int get_msi_multi_msg_en(\n);    "
    },
    "anvm_ctrler_adaptor :: set_msix_table_size": {
        "prefix": [
            "set_msix_table_size",
            "function:set_msix_table_size -> anvm_ctrler_adaptor"
        ],
        "body": [
            "set_msix_table_size(${1:n_vector});"
        ],
        "description": "[Class:anvm_ctrler_adaptor]\n     virtual function void set_msix_table_size(\nint n_vector);    "
    },
    "anvm_ctrler_adaptor :: get_msix_table_size": {
        "prefix": [
            "get_msix_table_size",
            "function:get_msix_table_size -> anvm_ctrler_adaptor"
        ],
        "body": [
            "get_msix_table_size(${0:});"
        ],
        "description": "[Class:anvm_ctrler_adaptor]\n     virtual function int get_msix_table_size(\n);    "
    },
    "anvm_ctrler_adaptor :: get_bar": {
        "prefix": [
            "get_bar",
            "function:get_bar -> anvm_ctrler_adaptor"
        ],
        "body": [
            "get_bar(${1:bar_id}, ${2:base}, ${3:len}, ${4:bar_kind});"
        ],
        "description": "[Class:anvm_ctrler_adaptor]\n     virtual function bit get_bar(\n input  int       bar_id  ,\n                                  output bit       base    ,\n                                  output bit       len     ,\n                                  output int       bar_kind );    "
    },
    "anvm_fabric_host_adaptor_fake": {
        "prefix": "anvm_fabric_host_adaptor_fake",
        "body": [
            "anvm_fabric_host_adaptor_fake  ${0:name_class};"
        ],
        "description": "class anvm_fabric_host_adaptor_fake extends anvm_fabric_host_adaptor;\n"
    },
    "anvm_fabric_host_adaptor_fake :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_fabric_host_adaptor_fake"
        ],
        "body": [
            "new(${1:instance_name});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor_fake]\n     function new(\nstring instance_name);    "
    },
    "anvm_fabric_host_adaptor_fake :: my_connect": {
        "prefix": [
            "my_connect",
            "function:my_connect -> anvm_fabric_host_adaptor_fake"
        ],
        "body": [
            "my_connect(${1:fab}, ${2:sw}, ${3:host_nqn});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor_fake]\n     function void my_connect(\nanvm_fabric_fake fab,\n anvm_host_software sw,\n anvm_nqn host_nqn);    "
    },
    "anvm_fabric_host_adaptor_fake :: get_nqn": {
        "prefix": [
            "get_nqn",
            "function:get_nqn -> anvm_fabric_host_adaptor_fake"
        ],
        "body": [
            "get_nqn(${0:});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor_fake]\n     virtual function anvm_nqn get_nqn(\n);    "
    },
    "anvm_fabric_host_adaptor_fake :: wait_discovery_ctrlers": {
        "prefix": [
            "wait_discovery_ctrlers",
            "task:wait_discovery_ctrlers -> anvm_fabric_host_adaptor_fake"
        ],
        "body": [
            "wait_discovery_ctrlers(${1:ctrler_ids});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor_fake]\n     virtual task wait_discovery_ctrlers(\nref anvm_fab_ctrler_id ctrler_ids      );    "
    },
    "anvm_fabric_host_adaptor_fake :: get_admin_sq_capsule_size": {
        "prefix": [
            "get_admin_sq_capsule_size",
            "function:get_admin_sq_capsule_size -> anvm_fabric_host_adaptor_fake"
        ],
        "body": [
            "get_admin_sq_capsule_size(${0:});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor_fake]\n     virtual function int get_admin_sq_capsule_size(\n);    "
    },
    "anvm_fabric_host_adaptor_fake :: get_amdin_rsp_capsule_size": {
        "prefix": [
            "get_amdin_rsp_capsule_size",
            "function:get_amdin_rsp_capsule_size -> anvm_fabric_host_adaptor_fake"
        ],
        "body": [
            "get_amdin_rsp_capsule_size(${0:});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor_fake]\n     virtual function int get_amdin_rsp_capsule_size(\n);    "
    },
    "anvm_fabric_host_adaptor_fake :: post_capsule": {
        "prefix": [
            "post_capsule",
            "function:post_capsule -> anvm_fabric_host_adaptor_fake"
        ],
        "body": [
            "post_capsule(${1:cs});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor_fake]\n     virtual function void post_capsule(\nanvm_capsule cs);    "
    },
    "anvm_fabric_host_adaptor_fake :: wait_rx_capsule": {
        "prefix": [
            "wait_rx_capsule",
            "task:wait_rx_capsule -> anvm_fabric_host_adaptor_fake"
        ],
        "body": [
            "wait_rx_capsule(${1:cs});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor_fake]\n     virtual task wait_rx_capsule(\noutput anvm_capsule cs);    "
    },
    "anvm_fabric_host_adaptor_fake :: get_host_memory_size": {
        "prefix": [
            "get_host_memory_size",
            "function:get_host_memory_size -> anvm_fabric_host_adaptor_fake"
        ],
        "body": [
            "get_host_memory_size(${0:});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor_fake]\n     virtual function bit       get_host_memory_size(\n);    "
    },
    "anvm_fabric_host_adaptor_fake :: write_dword_array": {
        "prefix": [
            "write_dword_array",
            "task:write_dword_array -> anvm_fabric_host_adaptor_fake"
        ],
        "body": [
            "write_dword_array(${1:addr}, ${2:va}, ${3:first_be}, ${4:last_be}, ${5:flag}, ${6:dbg});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor_fake]\n     virtual task write_dword_array(\n            bit             addr    ,\n            bit             va          ,\n            bit              first_be = 'hf,\n            bit              last_be  = 'hf,\n            bit             flag     = 0,\n                   avery_data_base dbg      = null );    "
    },
    "anvm_fabric_host_adaptor_fake :: read_dword_array": {
        "prefix": [
            "read_dword_array",
            "task:read_dword_array -> anvm_fabric_host_adaptor_fake"
        ],
        "body": [
            "read_dword_array(${1:addr}, ${2:num_dwords}, ${3:va}, ${4:err}, ${5:first_be}, ${6:last_be}, ${7:flag}, ${8:dbg});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor_fake]\n     virtual task read_dword_array(\n            input  bit             addr      ,\n                   int             num_dwords,\n            output bit             va            ,\n            output bit             err       ,\n            input  bit              first_be   = 'hf,\n            input  bit              last_be    = 'hf,\n            input  bit             flag       = 0,\n               input  avery_data_base dbg        = null );    "
    },
    "anvm_fabric_host_adaptor_fake :: wait_irq": {
        "prefix": [
            "wait_irq",
            "task:wait_irq -> anvm_fabric_host_adaptor_fake"
        ],
        "body": [
            "wait_irq(${1:ctrler_id}, ${2:int_kind}, ${3:addr}, ${4:data});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor_fake]\n     virtual task wait_irq(\n output int              ctrler_id,\n          anvm_interrupt_e int_kind ,\n  bit              addr     ,\n                                  bit              data      );    "
    },
    "anvm_fabric_host_adaptor_fake :: do_subsystem_reset": {
        "prefix": [
            "do_subsystem_reset",
            "task:do_subsystem_reset -> anvm_fabric_host_adaptor_fake"
        ],
        "body": [
            "do_subsystem_reset(${1:ctrler_id});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor_fake]\n     virtual task do_subsystem_reset(\nbit       ctrler_id);    "
    },
    "anvm_fabric_host_adaptor_fake :: do_function_reset": {
        "prefix": [
            "do_function_reset",
            "task:do_function_reset -> anvm_fabric_host_adaptor_fake"
        ],
        "body": [
            "do_function_reset(${1:ctrler_id}, ${2:flr_support});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor_fake]\n     virtual task do_function_reset(\nbit       ctrler_id,\n output bit flr_support);    "
    },
    "anvm_fabric_host_adaptor_fake :: get_port_number": {
        "prefix": [
            "get_port_number",
            "function:get_port_number -> anvm_fabric_host_adaptor_fake"
        ],
        "body": [
            "get_port_number(${1:ctrler_id});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor_fake]\n     virtual function int get_port_number (\nbit       ctrler_id);    "
    },
    "anvm_fabric_host_adaptor_fake :: free_host_mem": {
        "prefix": [
            "free_host_mem",
            "function:free_host_mem -> anvm_fabric_host_adaptor_fake"
        ],
        "body": [
            "free_host_mem(${1:addr}, ${2:len}, ${3:src});"
        ],
        "description": "[Class:anvm_fabric_host_adaptor_fake]\n     virtual function void free_host_mem(\nbit       addr,\n bit       len,\n anvm_data_base src);    "
    },
    "anvm_get_device_id": {
        "prefix": [
            "anvm_get_device_id",
            "function:anvm_get_device_id"
        ],
        "body": [
            "anvm_get_device_id(${0:});"
        ],
        "description": "function int anvm_get_device_id(\n);    "
    },
    "anvm_get_nvm_id": {
        "prefix": [
            "anvm_get_nvm_id",
            "function:anvm_get_nvm_id"
        ],
        "body": [
            "anvm_get_nvm_id(${0:});"
        ],
        "description": "function int anvm_get_nvm_id(\n);    "
    },
    "anvm_power_of_two": {
        "prefix": [
            "anvm_power_of_two",
            "function:anvm_power_of_two"
        ],
        "body": [
            "anvm_power_of_two(${1:v});"
        ],
        "description": "function int anvm_power_of_two(\nbit       v);    "
    },
    "anvm_offset_mask": {
        "prefix": [
            "anvm_offset_mask",
            "function:anvm_offset_mask"
        ],
        "body": [
            "anvm_offset_mask(${1:page_size});"
        ],
        "description": "function bit       anvm_offset_mask(\nbit       page_size);    "
    },
    "anvm_page_offset": {
        "prefix": [
            "anvm_page_offset",
            "function:anvm_page_offset"
        ],
        "body": [
            "anvm_page_offset(${1:page_size}, ${2:addr});"
        ],
        "description": "function bit       anvm_page_offset(\nbit       page_size,\n bit       addr);    "
    },
    "anvm_page_mask": {
        "prefix": [
            "anvm_page_mask",
            "function:anvm_page_mask"
        ],
        "body": [
            "anvm_page_mask(${1:page_size});"
        ],
        "description": "function bit       anvm_page_mask(\nbit       page_size);    "
    },
    "anvm_bytes_2_dwords": {
        "prefix": [
            "anvm_bytes_2_dwords",
            "function:anvm_bytes_2_dwords"
        ],
        "body": [
            "anvm_bytes_2_dwords(${1:ba}, ${2:da});"
        ],
        "description": "function automatic void anvm_bytes_2_dwords(\nref byte ba      ,\n ref bit       da      );    "
    },
    "anvm_page_dwords": {
        "prefix": [
            "anvm_page_dwords",
            "function:anvm_page_dwords"
        ],
        "body": [
            "anvm_page_dwords(${1:offset}, ${2:page_size});"
        ],
        "description": "function bit       anvm_page_dwords(\nbit       offset,\n bit       page_size);    "
    },
    "anvm_page_qwords": {
        "prefix": [
            "anvm_page_qwords",
            "function:anvm_page_qwords"
        ],
        "body": [
            "anvm_page_qwords(${1:offset}, ${2:page_size});"
        ],
        "description": "function bit       anvm_page_qwords(\nbit       offset,\n bit       page_size);    "
    },
    "anvm_get_byte_enable": {
        "prefix": [
            "anvm_get_byte_enable",
            "function:anvm_get_byte_enable"
        ],
        "body": [
            "anvm_get_byte_enable(${1:addr}, ${2:n_bytes}, ${3:fbe}, ${4:lbe});"
        ],
        "description": "function void anvm_get_byte_enable(\nbit       addr,\n bit       n_bytes,\n output bit       fbe,\n output bit       lbe);    "
    },
    "anvm_data_base": {
        "prefix": "anvm_data_base",
        "body": [
            "anvm_data_base  ${0:name_class};"
        ],
        "description": "class anvm_data_base extends avery_data_base;\n"
    },
    "anvm_data_base :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_data_base"
        ],
        "body": [
            "new(${1:name});"
        ],
        "description": "[Class:anvm_data_base]\n     function new(\nstring name = \"anvm_data_base\");     "
    },
    "anvm_data_base :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_data_base"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_data_base]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_data_base :: copy": {
        "prefix": [
            "copy",
            "function:copy -> anvm_data_base"
        ],
        "body": [
            "copy(${1:to});"
        ],
        "description": "[Class:anvm_data_base]\n     function anvm_data_base copy(\nanvm_data_base to = null);    "
    },
    "anvm_seq_util": {
        "prefix": "anvm_seq_util",
        "body": [
            "anvm_seq_util  ${0:name_class};"
        ],
        "description": "class anvm_seq_util extends anvm_seq_common;\n"
    },
    "anvm_seq_util :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_seq_util"
        ],
        "body": [
            "new(${1:hsw});"
        ],
        "description": "[Class:anvm_seq_util]\n     function new(\nanvm_host_software hsw);    "
    },
    "anvm_seq_util :: wait_cpl": {
        "prefix": [
            "wait_cpl",
            "task:wait_cpl -> anvm_seq_util"
        ],
        "body": [
            "wait_cpl(${1:entry}, ${2:cpl}, ${3:timer}, ${4:timeout_msg});"
        ],
        "description": "[Class:anvm_seq_util]\n     virtual task wait_cpl(\nstring entry,\n output anvm_cpl_entry cpl,\n input time timer = 0,\n string timeout_msg=\"\");    "
    },
    "anvm_seq_util :: cmd_not_supported": {
        "prefix": [
            "cmd_not_supported",
            "function:cmd_not_supported -> anvm_seq_util"
        ],
        "body": [
            "cmd_not_supported(${1:mgr}, ${2:kind});"
        ],
        "description": "[Class:anvm_seq_util]\n     static function bit cmd_not_supported(\nanvm_controller_mgr mgr,\n anvm_cmd_e kind);    "
    },
    "anvm_seq_util :: feature_is_ns_specific": {
        "prefix": [
            "feature_is_ns_specific",
            "function:feature_is_ns_specific -> anvm_seq_util"
        ],
        "body": [
            "feature_is_ns_specific(${1:feat_kinds});"
        ],
        "description": "[Class:anvm_seq_util]\n     function bit feature_is_ns_specific(\nanvm_feature_e feat_kinds);    "
    },
    "anvm_seq_util :: create_nvm_write_reaq_pair": {
        "prefix": [
            "create_nvm_write_reaq_pair",
            "function:create_nvm_write_reaq_pair -> anvm_seq_util"
        ],
        "body": [
            "create_nvm_write_reaq_pair(${1:mgr}, ${2:ns}, ${3:num_lba}, ${4:no_lba_overlap}, ${5:wr}, ${6:rd});"
        ],
        "description": "[Class:anvm_seq_util]\n     function void create_nvm_write_reaq_pair(\n                   anvm_controller_mgr mgr           ,\n                   anvm_istruct_ns     ns            ,\n                   avery_u16           num_lba       ,\n                   bit                 no_lba_overlap = 0,\n            output anvm_cmd_entry      wr            ,\n            output anvm_cmd_entry      rd             );    "
    },
    "anvm_seq_util :: create_nvm_write": {
        "prefix": [
            "create_nvm_write",
            "function:create_nvm_write -> anvm_seq_util"
        ],
        "body": [
            "create_nvm_write(${1:mgr}, ${2:ns}, ${3:num_lba}, ${4:no_lba_overlap}, ${5:over_mdts});"
        ],
        "description": "[Class:anvm_seq_util]\n     static function anvm_cmd_entry create_nvm_write(\n            anvm_controller_mgr mgr               ,\n            anvm_istruct_ns     ns                ,\n               avery_u16           num_lba        = 0,\n               bit                 no_lba_overlap = 0,\n               bit                 over_mdts      = 0    );    "
    },
    "anvm_seq_util :: create_nvm_verify": {
        "prefix": [
            "create_nvm_verify",
            "function:create_nvm_verify -> anvm_seq_util"
        ],
        "body": [
            "create_nvm_verify(${1:mgr}, ${2:ns}, ${3:num_lba}, ${4:no_lba_overlap}, ${5:over_mdts}, ${6:starting_lba});"
        ],
        "description": "[Class:anvm_seq_util]\n     static function anvm_cmd_entry create_nvm_verify(\n    anvm_controller_mgr mgr,\n    anvm_istruct_ns     ns,\n                avery_u16           num_lba = 0,\n       bit                 no_lba_overlap = 0,\n                                           bit                 over_mdts  = 0,\n          avery_u64           starting_lba = -1);    "
    },
    "anvm_seq_util :: create_nvm_read": {
        "prefix": [
            "create_nvm_read",
            "function:create_nvm_read -> anvm_seq_util"
        ],
        "body": [
            "create_nvm_read(${1:mgr}, ${2:ns}, ${3:num_lba}, ${4:no_lba_overlap}, ${5:over_mdts}, ${6:starting_lba});"
        ],
        "description": "[Class:anvm_seq_util]\n     static function anvm_cmd_entry create_nvm_read(\n    anvm_controller_mgr mgr,\n    anvm_istruct_ns     ns,\n                avery_u16           num_lba = 0,\n       bit                 no_lba_overlap = 0,\n                                           bit                 over_mdts  = 0,\n          avery_u64           starting_lba = -1);    "
    },
    "anvm_seq_util :: create_nvm_compare": {
        "prefix": [
            "create_nvm_compare",
            "function:create_nvm_compare -> anvm_seq_util"
        ],
        "body": [
            "create_nvm_compare(${1:mgr}, ${2:ns}, ${3:num_lba}, ${4:starting_lba}, ${5:over_mdts});"
        ],
        "description": "[Class:anvm_seq_util]\n     static function anvm_cmd_entry create_nvm_compare(\n    anvm_controller_mgr mgr,\n    anvm_istruct_nsns,\n          avery_u16num_lba = 0,\n      avery_u64           starting_lba = 0,\n            bit                 over_mdts    = 0    );    "
    },
    "anvm_seq_util :: create_download_fw": {
        "prefix": [
            "create_download_fw",
            "function:create_download_fw -> anvm_seq_util"
        ],
        "body": [
            "create_download_fw(${1:mgr}, ${2:image});"
        ],
        "description": "[Class:anvm_seq_util]\n     static function anvm_cmd_entry create_download_fw(\n    anvm_controller_mgr mgr,\n    avery_u32           image      );    "
    },
    "anvm_seq_util :: create_security_send": {
        "prefix": [
            "create_security_send",
            "function:create_security_send -> anvm_seq_util"
        ],
        "body": [
            "create_security_send(${1:mgr}, ${2:protocol});"
        ],
        "description": "[Class:anvm_seq_util]\n     static function anvm_cmd_entry create_security_send(\n    anvm_controller_mgr mgr,\n    int                 protocol = -1);    "
    },
    "anvm_seq_util :: create_security_receive": {
        "prefix": [
            "create_security_receive",
            "function:create_security_receive -> anvm_seq_util"
        ],
        "body": [
            "create_security_receive(${1:mgr}, ${2:protocol});"
        ],
        "description": "[Class:anvm_seq_util]\n     static function anvm_cmd_entry create_security_receive(\n    anvm_controller_mgr mgr,\n    int                 protocol = -1);    "
    },
    "anvm_seq_util :: create_dataset_mng": {
        "prefix": [
            "create_dataset_mng",
            "function:create_dataset_mng -> anvm_seq_util"
        ],
        "body": [
            "create_dataset_mng(${1:mgr}, ${2:tgt_nsid}, ${3:num_ranges});"
        ],
        "description": "[Class:anvm_seq_util]\n     static function anvm_cmd_entry create_dataset_mng(\n    anvm_controller_mgr mgr,\n    int                 tgt_nsid = 1,\n    int                 num_ranges = -1);    "
    },
    "anvm_seq_util :: create_rsvt_register": {
        "prefix": [
            "create_rsvt_register",
            "function:create_rsvt_register -> anvm_seq_util"
        ],
        "body": [
            "create_rsvt_register(${1:mgr}, ${2:tgt_nsid}, ${3:rreg_action}, ${4:local_cur_key}, ${5:local_new_key});"
        ],
        "description": "[Class:anvm_seq_util]\n     static function anvm_cmd_entry create_rsvt_register(\nanvm_controller_mgr mgr,\nint                 tgt_nsid    = 1,\nanvm_rrega_e    rreg_action    = ANVM_RREGA_register_key,\navery_u64    local_cur_key   = -1,\navery_u64    local_new_key   = -1);    "
    },
    "anvm_seq_util :: create_rsvt_acquire": {
        "prefix": [
            "create_rsvt_acquire",
            "function:create_rsvt_acquire -> anvm_seq_util"
        ],
        "body": [
            "create_rsvt_acquire(${1:mgr}, ${2:tgt_nsid}, ${3:racq_type}, ${4:racq_action}, ${5:local_cur_key}, ${6:local_pre_key});"
        ],
        "description": "[Class:anvm_seq_util]\n     static function anvm_cmd_entry create_rsvt_acquire(\nanvm_controller_mgr mgr,\nint                 tgt_nsid    = 1,\nanvm_rsvt_type_e    racq_type    = ANVM_RSVT_TYPE_write_ex,\nanvm_racqa_e    racq_action    = ANVM_RACQA_acquire,\navery_u64    local_cur_key   = -1,\navery_u64    local_pre_key   = -1);    "
    },
    "anvm_seq_util :: create_rsvt_release": {
        "prefix": [
            "create_rsvt_release",
            "function:create_rsvt_release -> anvm_seq_util"
        ],
        "body": [
            "create_rsvt_release(${1:mgr}, ${2:tgt_nsid}, ${3:rrel_type}, ${4:rrel_action}, ${5:local_cur_key});"
        ],
        "description": "[Class:anvm_seq_util]\n     static function anvm_cmd_entry create_rsvt_release(\nanvm_controller_mgr mgr,\nint                 tgt_nsid    = 1,\nanvm_rsvt_type_e    rrel_type    = ANVM_RSVT_TYPE_write_ex,\nanvm_rrela_e    rrel_action    = ANVM_RRELA_release,\navery_u64    local_cur_key   = -1);    "
    },
    "anvm_seq_util :: create_rsvt_report": {
        "prefix": [
            "create_rsvt_report",
            "function:create_rsvt_report -> anvm_seq_util"
        ],
        "body": [
            "create_rsvt_report(${1:mgr}, ${2:tgt_nsid}, ${3:num_ctrl});"
        ],
        "description": "[Class:anvm_seq_util]\n     static function anvm_cmd_entry create_rsvt_report(\nanvm_controller_mgr mgr,\nint                 tgt_nsid = 1,\nint    num_ctrl);    "
    },
    "anvm_seq_util :: check_mdts": {
        "prefix": [
            "check_mdts",
            "function:check_mdts -> anvm_seq_util"
        ],
        "body": [
            "check_mdts(${1:mgr}, ${2:nsid});"
        ],
        "description": "[Class:anvm_seq_util]\n     static function void check_mdts(\nanvm_controller_mgr mgr,\n int nsid);    "
    },
    "anvm_seq_util :: rand_cmd": {
        "prefix": [
            "rand_cmd",
            "function:rand_cmd -> anvm_seq_util"
        ],
        "body": [
            "rand_cmd(${1:mgr}, ${2:nsid}, ${3:use_data_sgl});"
        ],
        "description": "[Class:anvm_seq_util]\n     static function anvm_cmd_entry rand_cmd(\nanvm_controller_mgr mgr,\nint        nsid,\nint                 use_data_sgl = -1        );    "
    },
    "anvm_seq_util :: insert_bit_buckets": {
        "prefix": [
            "insert_bit_buckets",
            "function:insert_bit_buckets -> anvm_seq_util"
        ],
        "body": [
            "insert_bit_buckets(${1:sgl}, ${2:mm}, ${3:num_bit_buckets});"
        ],
        "description": "[Class:anvm_seq_util]\n     static function void insert_bit_buckets(\nanvm_sgl sgl,\n anvm_memory_mgr mm,\n int num_bit_buckets);    "
    },
    "anvm_seq_util :: malloc_in_pmr_cmb": {
        "prefix": [
            "malloc_in_pmr_cmb",
            "function:malloc_in_pmr_cmb -> anvm_seq_util"
        ],
        "body": [
            "malloc_in_pmr_cmb(${1:hsw}, ${2:mgr}, ${3:use_pcie_buf}, ${4:page_size}, ${5:num_bytes}, ${6:base}, ${7:in_pcie_buf}, ${8:fatal_oom}, ${9:dbg_cmd});"
        ],
        "description": "[Class:anvm_seq_util]\n     function bit malloc_in_pmr_cmb(\nanvm_host_software  hsw,\n                        anvm_controller_mgr     mgr      ,\n                        bit                      use_pcie_buf,\n                           avery_u64               page_size,\n                        avery_u64               num_bytes,\n                        output avery_u64        base     ,\n                    output bit               in_pcie_buf,\n                        input  bit              fatal_oom=1,\n                        input  anvm_cmd_entry   dbg_cmd = null              );    "
    },
    "anvm_seq_util :: attach_detach_namespace": {
        "prefix": [
            "attach_detach_namespace",
            "task:attach_detach_namespace -> anvm_seq_util"
        ],
        "body": [
            "attach_detach_namespace(${1:is_detach}, ${2:target_nsid}, ${3:mgr}, ${4:err}, ${5:is_ei});"
        ],
        "description": "[Class:anvm_seq_util]\n     virtual task attach_detach_namespace(\n                   bit                 is_detach  ,\n                   bit                 target_nsid,\n                   anvm_controller_mgr mgr        ,\n            output bit                 err        ,\n    input  bit                 is_ei = 0);    "
    },
    "anvm_seq_util :: create_one_namespace": {
        "prefix": [
            "create_one_namespace",
            "task:create_one_namespace -> anvm_seq_util"
        ],
        "body": [
            "create_one_namespace(${1:mgr}, ${2:ns});"
        ],
        "description": "[Class:anvm_seq_util]\n     virtual task create_one_namespace(\n            input  anvm_controller_mgr mgr,\n            output anvm_istruct_ns     ns  );    "
    },
    "anvm_seq_util :: fetch_active_namespaces": {
        "prefix": [
            "fetch_active_namespaces",
            "task:fetch_active_namespaces -> anvm_seq_util"
        ],
        "body": [
            "fetch_active_namespaces(${1:mgr}, ${2:above_nsid}, ${3:nsid_q});"
        ],
        "description": "[Class:anvm_seq_util]\n     virtual task fetch_active_namespaces (\n            input anvm_controller_mgr mgr       ,\n            input bit                 above_nsid,\n            ref   bit                 nsid_q       );    "
    },
    "anvm_seq_util :: identify_ns_or_create": {
        "prefix": [
            "identify_ns_or_create",
            "task:identify_ns_or_create -> anvm_seq_util"
        ],
        "body": [
            "identify_ns_or_create(${1:mgr}, ${2:nsid}, ${3:ok});"
        ],
        "description": "[Class:anvm_seq_util]\n     virtual task identify_ns_or_create(\n            input  anvm_controller_mgr mgr ,\n            inout  bit                 nsid,\n            output bit                 ok   );    "
    },
    "anvm_seq_util :: fetch_all_active_nsid": {
        "prefix": [
            "fetch_all_active_nsid",
            "task:fetch_all_active_nsid -> anvm_seq_util"
        ],
        "body": [
            "fetch_all_active_nsid(${1:mgr}, ${2:all_ids});"
        ],
        "description": "[Class:anvm_seq_util]\n     virtual task fetch_all_active_nsid (\n    input anvm_controller_mgr mgr,\n    ref   bit all_ids       );       "
    },
    "anvm_seq_util :: prepare_secondary_ctrlers": {
        "prefix": [
            "prepare_secondary_ctrlers",
            "task:prepare_secondary_ctrlers -> anvm_seq_util"
        ],
        "body": [
            "prepare_secondary_ctrlers(${1:mgr}, ${2:skip_identify}, ${3:err});"
        ],
        "description": "[Class:anvm_seq_util]\n     virtual task prepare_secondary_ctrlers (\nanvm_controller_mgr mgr,\n bit skip_identify,\n output bit err);    "
    },
    "anvm_seq_util :: reset_secondary_ctrlers": {
        "prefix": [
            "reset_secondary_ctrlers",
            "task:reset_secondary_ctrlers -> anvm_seq_util"
        ],
        "body": [
            "reset_secondary_ctrlers(${1:mgr}, ${2:err});"
        ],
        "description": "[Class:anvm_seq_util]\n     virtual task reset_secondary_ctrlers (\nanvm_controller_mgr mgr,\n output bit err);    "
    },
    "anvm_seq_util :: identify_PCC": {
        "prefix": [
            "identify_PCC",
            "task:identify_PCC -> anvm_seq_util"
        ],
        "body": [
            "identify_PCC(${1:mgr}, ${2:err});"
        ],
        "description": "[Class:anvm_seq_util]\n     virtual task identify_PCC (\nanvm_controller_mgr mgr,\n output bit err);    "
    },
    "anvm_seq_util :: identify_SCL": {
        "prefix": [
            "identify_SCL",
            "task:identify_SCL -> anvm_seq_util"
        ],
        "body": [
            "identify_SCL(${1:mgr}, ${2:err});"
        ],
        "description": "[Class:anvm_seq_util]\n     virtual task identify_SCL (\nanvm_controller_mgr mgr,\n output bit err);    "
    },
    "anvm_seq_util :: change_sec_ctrler_state": {
        "prefix": [
            "change_sec_ctrler_state",
            "task:change_sec_ctrler_state -> anvm_seq_util"
        ],
        "body": [
            "change_sec_ctrler_state(${1:mgr}, ${2:is_online}, ${3:err});"
        ],
        "description": "[Class:anvm_seq_util]\n     virtual task change_sec_ctrler_state(\nanvm_controller_mgr mgr,\n bit is_online,\n output bit err);    "
    },
    "anvm_seq_util :: assign_sec_resource": {
        "prefix": [
            "assign_sec_resource",
            "task:assign_sec_resource -> anvm_seq_util"
        ],
        "body": [
            "assign_sec_resource(${1:mgr}, ${2:is_vq}, ${3:err});"
        ],
        "description": "[Class:anvm_seq_util]\n     virtual task assign_sec_resource(\n anvm_controller_mgr mgr,\n bit is_vq,\n output bit err);    "
    },
    "anvm_seq_util :: identify_csi_controller": {
        "prefix": [
            "identify_csi_controller",
            "task:identify_csi_controller -> anvm_seq_util"
        ],
        "body": [
            "identify_csi_controller(${1:mgr}, ${2:csi}, ${3:err});"
        ],
        "description": "[Class:anvm_seq_util]\n     virtual task identify_csi_controller(\n    anvm_controller_mgr mgr,\n    bit      csi,\n    output  biterr);    "
    },
    "anvm_seq_util :: collect_shared_ns_used_lbas": {
        "prefix": [
            "collect_shared_ns_used_lbas",
            "function:collect_shared_ns_used_lbas -> anvm_seq_util"
        ],
        "body": [
            "collect_shared_ns_used_lbas(${1:mgrs}, ${2:shared_nsid}, ${3:cmd});"
        ],
        "description": "[Class:anvm_seq_util]\n     virtual function void collect_shared_ns_used_lbas(\nanvm_controller_mgr mgrs      ,\n int shared_nsid,\n ref anvm_cmd_entry cmd);    "
    },
    "anvm_seq_util :: create_no_overlap_nvm_write": {
        "prefix": [
            "create_no_overlap_nvm_write",
            "function:create_no_overlap_nvm_write -> anvm_seq_util"
        ],
        "body": [
            "create_no_overlap_nvm_write(${1:mgr}, ${2:ns}, ${3:num_lba}, ${4:over_mdts});"
        ],
        "description": "[Class:anvm_seq_util]\n     function anvm_cmd_entry create_no_overlap_nvm_write(\n            anvm_controller_mgr mgr               ,\n            anvm_istruct_ns     ns                ,\n               avery_u16           num_lba        = 0,\n               bit                 over_mdts      = 0    );    "
    },
    "anvm_seq_del_q": {
        "prefix": "anvm_seq_del_q",
        "body": [
            "anvm_seq_del_q  ${0:name_class};"
        ],
        "description": "class anvm_seq_del_q extends anvm_seq_common;\n"
    },
    "anvm_seq_del_q :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_seq_del_q"
        ],
        "body": [
            "new(${1:hsw});"
        ],
        "description": "[Class:anvm_seq_del_q]\n     function new(\nanvm_host_software hsw);    "
    },
    "anvm_seq_del_q :: run_body": {
        "prefix": [
            "run_body",
            "task:run_body -> anvm_seq_del_q"
        ],
        "body": [
            "run_body(${0:});"
        ],
        "description": "[Class:anvm_seq_del_q]\n     task run_body(\n);    "
    },
    "anvm_seq_reset": {
        "prefix": "anvm_seq_reset",
        "body": [
            "anvm_seq_reset  ${0:name_class};"
        ],
        "description": "class anvm_seq_reset extends anvm_seq_common;\n"
    },
    "anvm_seq_reset :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_seq_reset"
        ],
        "body": [
            "new(${1:hsw});"
        ],
        "description": "[Class:anvm_seq_reset]\n     function new(\nanvm_host_software hsw);    "
    },
    "anvm_seq_reset :: run_body": {
        "prefix": [
            "run_body",
            "task:run_body -> anvm_seq_reset"
        ],
        "body": [
            "run_body(${0:});"
        ],
        "description": "[Class:anvm_seq_reset]\n     task run_body(\n);    "
    },
    "anvm_seq_reset :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_seq_reset"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_seq_reset]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_seq_async_err": {
        "prefix": "anvm_seq_async_err",
        "body": [
            "anvm_seq_async_err  ${0:name_class};"
        ],
        "description": "class anvm_seq_async_err extends anvm_seq_common;\n"
    },
    "anvm_seq_async_err :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_seq_async_err"
        ],
        "body": [
            "new(${1:hsw});"
        ],
        "description": "[Class:anvm_seq_async_err]\n     function new(\nanvm_host_software hsw);    "
    },
    "anvm_seq_async_err :: run_body": {
        "prefix": [
            "run_body",
            "task:run_body -> anvm_seq_async_err"
        ],
        "body": [
            "run_body(${0:});"
        ],
        "description": "[Class:anvm_seq_async_err]\n     task run_body(\n);    "
    },
    "anvm_seq_phase_bit": {
        "prefix": "anvm_seq_phase_bit",
        "body": [
            "anvm_seq_phase_bit  ${0:name_class};"
        ],
        "description": "class anvm_seq_phase_bit extends anvm_seq_common;\n"
    },
    "anvm_seq_phase_bit :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_seq_phase_bit"
        ],
        "body": [
            "new(${1:hsw});"
        ],
        "description": "[Class:anvm_seq_phase_bit]\n     function new(\nanvm_host_software hsw);    "
    },
    "anvm_seq_phase_bit :: run_body": {
        "prefix": [
            "run_body",
            "task:run_body -> anvm_seq_phase_bit"
        ],
        "body": [
            "run_body(${0:});"
        ],
        "description": "[Class:anvm_seq_phase_bit]\n     task run_body(\n);    "
    },
    "anvm_seq_coherent_access": {
        "prefix": "anvm_seq_coherent_access",
        "body": [
            "anvm_seq_coherent_access  ${0:name_class};"
        ],
        "description": "class anvm_seq_coherent_access extends anvm_seq_common;\n"
    },
    "anvm_seq_coherent_access :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_seq_coherent_access"
        ],
        "body": [
            "new(${1:hsw});"
        ],
        "description": "[Class:anvm_seq_coherent_access]\n     function new(\nanvm_host_software hsw);    "
    },
    "anvm_seq_coherent_access :: run_body": {
        "prefix": [
            "run_body",
            "task:run_body -> anvm_seq_coherent_access"
        ],
        "body": [
            "run_body(${0:});"
        ],
        "description": "[Class:anvm_seq_coherent_access]\n     task run_body(\n);    "
    },
    "anvm_seq_coherent_access :: pick_region": {
        "prefix": [
            "pick_region",
            "task:pick_region -> anvm_seq_coherent_access"
        ],
        "body": [
            "pick_region(${1:all_cmds}, ${2:r_});"
        ],
        "description": "[Class:anvm_seq_coherent_access]\n     local task pick_region(\ninput anvm_cmd_entry all_cmds      ,\n output lba_region_t r_);    "
    },
    "anvm_seq_coherent_access :: insert_merge": {
        "prefix": [
            "insert_merge",
            "function:insert_merge -> anvm_seq_coherent_access"
        ],
        "body": [
            "insert_merge(${1:region});"
        ],
        "description": "[Class:anvm_seq_coherent_access]\n     local function void insert_merge(\nlba_region_t  region);    "
    },
    "anvm_seq_coherent_access :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_seq_coherent_access"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_seq_coherent_access]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_seq_read_after_write_zeros": {
        "prefix": "anvm_seq_read_after_write_zeros",
        "body": [
            "anvm_seq_read_after_write_zeros  ${0:name_class};"
        ],
        "description": "class anvm_seq_read_after_write_zeros extends anvm_seq_common;\n"
    },
    "anvm_seq_read_after_write_zeros :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_seq_read_after_write_zeros"
        ],
        "body": [
            "new(${1:hsw}, ${2:mgr});"
        ],
        "description": "[Class:anvm_seq_read_after_write_zeros]\n     function new(\nanvm_host_software hsw,\n anvm_controller_mgr mgr);    "
    },
    "anvm_seq_read_after_write_zeros :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_seq_read_after_write_zeros"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_seq_read_after_write_zeros]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_seq_read_after_write_zeros :: run_body": {
        "prefix": [
            "run_body",
            "task:run_body -> anvm_seq_read_after_write_zeros"
        ],
        "body": [
            "run_body(${0:});"
        ],
        "description": "[Class:anvm_seq_read_after_write_zeros]\n     task run_body(\n);    "
    },
    "anvm_seq_rsvt_register": {
        "prefix": "anvm_seq_rsvt_register",
        "body": [
            "anvm_seq_rsvt_register  ${0:name_class};"
        ],
        "description": "class anvm_seq_rsvt_register extends anvm_seq_common;\n"
    },
    "anvm_seq_rsvt_register :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_seq_rsvt_register"
        ],
        "body": [
            "new(${1:hsw}, ${2:mgr});"
        ],
        "description": "[Class:anvm_seq_rsvt_register]\n     function new(\nanvm_host_software hsw,\n anvm_controller_mgr mgr);    "
    },
    "anvm_seq_rsvt_register :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_seq_rsvt_register"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_seq_rsvt_register]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_seq_rsvt_register :: run_body": {
        "prefix": [
            "run_body",
            "task:run_body -> anvm_seq_rsvt_register"
        ],
        "body": [
            "run_body(${0:});"
        ],
        "description": "[Class:anvm_seq_rsvt_register]\n     task run_body(\n);    "
    },
    "anvm_seq_sgl": {
        "prefix": "anvm_seq_sgl",
        "body": [
            "anvm_seq_sgl  ${0:name_class};"
        ],
        "description": "class anvm_seq_sgl extends anvm_seq_common;\n"
    },
    "anvm_seq_sgl :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_seq_sgl"
        ],
        "body": [
            "new(${1:hsw});"
        ],
        "description": "[Class:anvm_seq_sgl]\n     function new(\nanvm_host_software hsw);    "
    },
    "anvm_seq_sgl :: re_allocate_sgl": {
        "prefix": [
            "re_allocate_sgl",
            "function:re_allocate_sgl -> anvm_seq_sgl"
        ],
        "body": [
            "re_allocate_sgl(${1:mgr}, ${2:cmd}, ${3:max_seg_size}, ${4:max_data_blk_size}, ${5:max_seg_size_meta}, ${6:max_data_blk_size_meta}, ${7:use_mptr_one_sgl});"
        ],
        "description": "[Class:anvm_seq_sgl]\n     function void re_allocate_sgl (\nanvm_controller_mgr mgr,\nanvm_cmd_entry      cmd,\navery_u32           max_seg_size = -1,\navery_u32           max_data_blk_size = -1,\navery_u32           max_seg_size_meta = -1,\navery_u32           max_data_blk_size_meta = -1,\nbit                 use_mptr_one_sgl = 1    );    "
    },
    "anvm_seq_sgl :: generate_sgl": {
        "prefix": [
            "generate_sgl",
            "function:generate_sgl -> anvm_seq_sgl"
        ],
        "body": [
            "generate_sgl(${1:mgr}, ${2:ndw}, ${3:max_seg_size}, ${4:max_data_blk_size}, ${5:use_cmb}, ${6:is_destination_buf}, ${7:use_1_data_block}, ${8:dw_align});"
        ],
        "description": "[Class:anvm_seq_sgl]\n     function anvm_sgl generate_sgl (\nanvm_controller_mgr mgr,\navery_u32    ndw,\navery_u32           max_seg_size = -1,\navery_u32           max_data_blk_size = -1,\nbit          use_cmb = 0,\n   bit                 is_destination_buf = 1,\nbit                 use_1_data_block = 0,\n        bit                 dw_align = 1     );    "
    },
    "anvm_seq_sgl :: restore_sgl": {
        "prefix": [
            "restore_sgl",
            "function:restore_sgl -> anvm_seq_sgl"
        ],
        "body": [
            "restore_sgl(${1:sgl}, ${2:cmd}, ${3:is_ei});"
        ],
        "description": "[Class:anvm_seq_sgl]\n     static function void restore_sgl (\nanvm_sgl sgl,\n anvm_cmd_entry cmd,\n bit is_ei);    "
    },
    "anvm_seq_sgl :: restore_meta_sgl": {
        "prefix": [
            "restore_meta_sgl",
            "function:restore_meta_sgl -> anvm_seq_sgl"
        ],
        "body": [
            "restore_meta_sgl(${1:meta_sgl}, ${2:cmd}, ${3:is_ei});"
        ],
        "description": "[Class:anvm_seq_sgl]\n     static function void restore_meta_sgl (\nanvm_sgl meta_sgl,\n anvm_cmd_entry cmd,\n bit is_ei);    "
    },
    "anvm_seq_write_read": {
        "prefix": "anvm_seq_write_read",
        "body": [
            "anvm_seq_write_read  ${0:name_class};"
        ],
        "description": "class anvm_seq_write_read extends anvm_seq_common;\n"
    },
    "anvm_seq_write_read :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_seq_write_read"
        ],
        "body": [
            "new(${1:hsw}, ${2:mgr});"
        ],
        "description": "[Class:anvm_seq_write_read]\n     function new(\nanvm_host_software hsw,\n anvm_controller_mgr mgr);    "
    },
    "anvm_seq_write_read :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_seq_write_read"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_seq_write_read]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_seq_write_read :: run_body": {
        "prefix": [
            "run_body",
            "task:run_body -> anvm_seq_write_read"
        ],
        "body": [
            "run_body(${0:});"
        ],
        "description": "[Class:anvm_seq_write_read]\n     task run_body(\n);    "
    },
    "post_command": {
        "prefix": [
            "post_command",
            "function:post_command"
        ],
        "body": [
            "post_command(${1:cmd}, ${2:mgr});"
        ],
        "description": "extern function void post_command(\nanvm_cmd_entry cmd,\n anvm_controller_mgr mgr = null);    "
    },
    "set": {
        "prefix": [
            "set",
            "function:set"
        ],
        "body": [
            "set(${1:entry}, ${2:value}, ${3:sub_entry});"
        ],
        "description": "extern virtual function void set(\ninput string    entry,\ninput bit       value = 0,\ninput string    sub_entry = \"\");    "
    },
    "get": {
        "prefix": [
            "get",
            "function:get"
        ],
        "body": [
            "get(${1:entry}, ${2:sub_entry});"
        ],
        "description": "extern virtual function bit       get(\ninput string entry,\ninput string sub_entry = \"\");    "
    },
    "malloc": {
        "prefix": [
            "malloc",
            "function:malloc"
        ],
        "body": [
            "malloc(${1:page_size}, ${2:num_bytes}, ${3:address});"
        ],
        "description": "extern virtual function bit malloc(\navery_u64  page_size = 0,\navery_u64  num_bytes,\n   output avery_u64 address     );    "
    },
    "mfree": {
        "prefix": [
            "mfree",
            "function:mfree"
        ],
        "body": [
            "mfree(${1:address}, ${2:num_bytes});"
        ],
        "description": "extern virtual function bit mfree(\navery_u64  address,\navery_u64  num_bytes      );    "
    },
    "find_controller_by_id": {
        "prefix": [
            "find_controller_by_id",
            "function:find_controller_by_id"
        ],
        "body": [
            "find_controller_by_id(${1:ctrler_id}, ${2:fatal_if_not_found}, ${3:sub_nqn});"
        ],
        "description": "extern virtual function anvm_controller_mgr find_controller_by_id(\n        input int         ctrler_id          = -1,\n        input bit         fatal_if_not_found = 1,\n        input anvm_nqn  sub_nqn            = 0 );    "
    },
    "collect_controllers": {
        "prefix": [
            "collect_controllers",
            "task:collect_controllers"
        ],
        "body": [
            "collect_controllers(${1:num}, ${2:mgrs}, ${3:timer}, ${4:timeout_msg}, ${5:collect_discovery_ctrler});"
        ],
        "description": "extern task collect_controllers(\ninput  int                 num,\noutput anvm_controller_mgr mgrs      ,\ninput  time                timer = 0,\ninput  string              timeout_msg = \"\",\ninput  bit                 collect_discovery_ctrler = 0    );    "
    },
    "preload_lba": {
        "prefix": [
            "preload_lba",
            "function:preload_lba"
        ],
        "body": [
            "preload_lba(${1:ctrler_id}, ${2:nsid}, ${3:starting_lba}, ${4:value_array}, ${5:meta_value_array});"
        ],
        "description": "extern virtual function void preload_lba(\n    int        ctrler_id,\n     int        nsid,\n             avery_u64  starting_lba,\n ref avery_u32  value_array      ,\nref avery_u32  meta_value_array          );    "
    },
    "get_memory_mgr": {
        "prefix": [
            "get_memory_mgr",
            "function:get_memory_mgr"
        ],
        "body": [
            "get_memory_mgr(${0:});"
        ],
        "description": "extern virtual function anvm_memory_mgr get_memory_mgr(\n);    "
    },
    "replace_coverage_handle": {
        "prefix": [
            "replace_coverage_handle",
            "function:replace_coverage_handle"
        ],
        "body": [
            "replace_coverage_handle(${1:c});"
        ],
        "description": "extern virtual function void replace_coverage_handle (\nanvm_coverage c);    "
    },
    "share_namespace": {
        "prefix": [
            "share_namespace",
            "function:share_namespace"
        ],
        "body": [
            "share_namespace(${1:ctrler_id1}, ${2:nsid1}, ${3:ctrler_id2}, ${4:nsid2});"
        ],
        "description": "extern virtual function void share_namespace(\ninput int  ctrler_id1,\ninput int  nsid1,\ninput int  ctrler_id2,\ninput int  nsid2    );    "
    },
    "share_shadow_namespace": {
        "prefix": [
            "share_shadow_namespace",
            "function:share_shadow_namespace"
        ],
        "body": [
            "share_shadow_namespace(${1:nvm}, ${2:ctrler_id}, ${3:nsid});"
        ],
        "description": "extern virtual function void share_shadow_namespace(\n        anvm_ns_memory nvm,\n         int ctrler_id,\n         int nsid    );    "
    },
    "get_shadow_namespace": {
        "prefix": [
            "get_shadow_namespace",
            "function:get_shadow_namespace"
        ],
        "body": [
            "get_shadow_namespace(${1:ctrler_id}, ${2:nsid});"
        ],
        "description": "extern virtual function anvm_ns_memory get_shadow_namespace(\nint ctrler_id,\n int nsid );    "
    },
    "set_tracker": {
        "prefix": [
            "set_tracker",
            "function:set_tracker"
        ],
        "body": [
            "set_tracker(${1:entry}, ${2:enable}, ${3:file_name}, ${4:file_handle});"
        ],
        "description": "extern virtual function void set_tracker(\n         input string  entry,\n              input bit     enable,\n           input string  file_name = \"\",\n        input int     file_handle = 0);     "
    },
    "trace_addr": {
        "prefix": [
            "trace_addr",
            "function:trace_addr"
        ],
        "body": [
            "trace_addr(${1:s}, ${2:addr}, ${3:len}, ${4:flag});"
        ],
        "description": "extern function bit trace_addr(\n        ref   string    s   ,\n        input bit       addr,\n        input bit       len ,\n        input int       flag = 0 );    "
    },
    "get_adaptor": {
        "prefix": [
            "get_adaptor",
            "function:get_adaptor"
        ],
        "body": [
            "get_adaptor(${0:});"
        ],
        "description": "extern function anvm_host_adaptor_base get_adaptor(\n);    "
    },
    "anvm_logic_blk": {
        "prefix": "anvm_logic_blk",
        "body": [
            "anvm_logic_blk  ${0:name_class};"
        ],
        "description": "class anvm_logic_blk;\n"
    },
    "anvm_logic_blk :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_logic_blk"
        ],
        "body": [
            "new(${1:data_size}, ${2:meta_size});"
        ],
        "description": "[Class:anvm_logic_blk]\n     function new(\nint data_size = 0,\n int meta_size = 0);    "
    },
    "anvm_logic_blk :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_logic_blk"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_logic_blk]\n     function string sprint(\nint verbosity = 0,\n string prefix =\"\\t\");    "
    },
    "anvm_logic_blk :: gen_guard": {
        "prefix": [
            "gen_guard",
            "function:gen_guard -> anvm_logic_blk"
        ],
        "body": [
            "gen_guard(${1:pi_at_first}, ${2:protect_info_fmt});"
        ],
        "description": "[Class:anvm_logic_blk]\n     virtual function bit       gen_guard(\nbit pi_at_first,\n bit       protect_info_fmt = ANVM_PIF_16b);    "
    },
    "anvm_logic_blk :: insert_pi": {
        "prefix": [
            "insert_pi",
            "function:insert_pi -> anvm_logic_blk"
        ],
        "body": [
            "insert_pi(${1:pi_at_first}, ${2:app_tag_mask}, ${3:app_tag}, ${4:storage_and_ref_space}, ${5:protect_info_fmt});"
        ],
        "description": "[Class:anvm_logic_blk]\n     virtual function void insert_pi(\n    bit                    pi_at_first,\n       avery_u16              app_tag_mask         ,\n    avery_u16              app_tag              ,\n    anvm_storage_ref_tag_t storage_and_ref_space,\n    bit                     protect_info_fmt      = ANVM_PIF_16b);    "
    },
    "anvm_logic_blk :: gen_crc16": {
        "prefix": [
            "gen_crc16",
            "function:gen_crc16 -> anvm_logic_blk"
        ],
        "body": [
            "gen_crc16(${1:va});"
        ],
        "description": "[Class:anvm_logic_blk]\n     virtual function bit       gen_crc16(\nref bit       va      );    "
    },
    "anvm_logic_blk :: gen_crc32": {
        "prefix": [
            "gen_crc32",
            "function:gen_crc32 -> anvm_logic_blk"
        ],
        "body": [
            "gen_crc32(${1:va}, ${2:invert});"
        ],
        "description": "[Class:anvm_logic_blk]\n     virtual function bit       gen_crc32(\nref bit       va      ,\n bit invert);    "
    },
    "anvm_logic_blk :: gen_crc64": {
        "prefix": [
            "gen_crc64",
            "function:gen_crc64 -> anvm_logic_blk"
        ],
        "body": [
            "gen_crc64(${1:va}, ${2:invert});"
        ],
        "description": "[Class:anvm_logic_blk]\n     virtual function bit       gen_crc64(\nref bit       va      ,\n input bit invert = 0);    "
    },
    "anvm_logic_blk :: gen_crc16_dw": {
        "prefix": [
            "gen_crc16_dw",
            "function:gen_crc16_dw -> anvm_logic_blk"
        ],
        "body": [
            "gen_crc16_dw(${1:v}, ${2:crc});"
        ],
        "description": "[Class:anvm_logic_blk]\n     virtual function bit       gen_crc16_dw(\nbit             v,\n input bit       crc = 0);    "
    },
    "anvm_logic_blk :: gen_crc32_dw": {
        "prefix": [
            "gen_crc32_dw",
            "function:gen_crc32_dw -> anvm_logic_blk"
        ],
        "body": [
            "gen_crc32_dw(${1:v}, ${2:crc}, ${3:invert});"
        ],
        "description": "[Class:anvm_logic_blk]\n     virtual function bit       gen_crc32_dw(\nbit             v,\n input bit       crc = 0,\n invert = 0);    "
    },
    "anvm_logic_blk :: gen_crc64_dw": {
        "prefix": [
            "gen_crc64_dw",
            "function:gen_crc64_dw -> anvm_logic_blk"
        ],
        "body": [
            "gen_crc64_dw(${1:v}, ${2:crc}, ${3:invert});"
        ],
        "description": "[Class:anvm_logic_blk]\n     virtual function bit       gen_crc64_dw(\nbit             v,\n input bit       crc = 0,\n invert = 0);    "
    },
    "anvm_logic_blk :: debug_crc16": {
        "prefix": [
            "debug_crc16",
            "function:debug_crc16 -> anvm_logic_blk"
        ],
        "body": [
            "debug_crc16(${0:});"
        ],
        "description": "[Class:anvm_logic_blk]\n     function void debug_crc16(\n);    "
    },
    "anvm_logic_blk :: debug_crc32": {
        "prefix": [
            "debug_crc32",
            "function:debug_crc32 -> anvm_logic_blk"
        ],
        "body": [
            "debug_crc32(${0:});"
        ],
        "description": "[Class:anvm_logic_blk]\n     function void debug_crc32(\n);    "
    },
    "anvm_logic_blk :: debug_crc64": {
        "prefix": [
            "debug_crc64",
            "function:debug_crc64 -> anvm_logic_blk"
        ],
        "body": [
            "debug_crc64(${0:});"
        ],
        "description": "[Class:anvm_logic_blk]\n     function void debug_crc64(\n);    "
    },
    "anvm_logic_blks": {
        "prefix": "anvm_logic_blks",
        "body": [
            "anvm_logic_blks  ${0:name_class};"
        ],
        "description": "class anvm_logic_blks extends anvm_data_base;\n"
    },
    "anvm_logic_blks :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_logic_blks"
        ],
        "body": [
            "new(${1:n_blks}, ${2:data_size}, ${3:meta_size}, ${4:log});"
        ],
        "description": "[Class:anvm_logic_blks]\n     function new(\nint n_blks,\n int data_size,\n int meta_size,\n anvm_log log = null);    "
    },
    "anvm_logic_blks :: fill_data": {
        "prefix": [
            "fill_data",
            "function:fill_data -> anvm_logic_blks"
        ],
        "body": [
            "fill_data(${1:pattern}, ${2:value});"
        ],
        "description": "[Class:anvm_logic_blks]\n     virtual function void fill_data(\nint pattern = 0,\n int value = 0);    "
    },
    "anvm_logic_blks :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_logic_blks"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_logic_blks]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix =\"\");    "
    },
    "anvm_logic_blks :: pack_to": {
        "prefix": [
            "pack_to",
            "function:pack_to -> anvm_logic_blks"
        ],
        "body": [
            "pack_to(${1:cmd});"
        ],
        "description": "[Class:anvm_logic_blks]\n     virtual function void pack_to(\nanvm_cmd_entry cmd);    "
    },
    "anvm_logic_blks :: unpack_from": {
        "prefix": [
            "unpack_from",
            "function:unpack_from -> anvm_logic_blks"
        ],
        "body": [
            "unpack_from(${1:cmd});"
        ],
        "description": "[Class:anvm_logic_blks]\n     virtual function bit unpack_from(\nanvm_cmd_entry cmd);    "
    },
    "anvm_logic_blks :: aoc_unpack_from": {
        "prefix": [
            "aoc_unpack_from",
            "function:aoc_unpack_from -> anvm_logic_blks"
        ],
        "body": [
            "aoc_unpack_from(${1:cmd});"
        ],
        "description": "[Class:anvm_logic_blks]\n     virtual function bit aoc_unpack_from(\nanvm_cmd_entry cmd);    "
    },
    "anvm_logic_blks :: insert_protect_info": {
        "prefix": [
            "insert_protect_info",
            "function:insert_protect_info -> anvm_logic_blks"
        ],
        "body": [
            "insert_protect_info(${1:pi_at_first}, ${2:pi_type}, ${3:app_tag_mask}, ${4:app_tag}, ${5:ini_ref_tag}, ${6:storage_and_ref_space}, ${7:csi0});"
        ],
        "description": "[Class:anvm_logic_blks]\n     virtual function void insert_protect_info(\n    bit                    pi_at_first,\n       byte                   pi_type,\n       avery_u16              app_tag_mask         ,\n    avery_u16              app_tag              ,\n    bit                    ini_ref_tag,\n       anvm_storage_ref_tag_t storage_and_ref_space = 0,\n    anvm_istruct_ns_csi0   csi0                  = null );    "
    },
    "anvm_logic_blks :: replace_meta": {
        "prefix": [
            "replace_meta",
            "function:replace_meta -> anvm_logic_blks"
        ],
        "body": [
            "replace_meta(${1:cmd});"
        ],
        "description": "[Class:anvm_logic_blks]\n     virtual function void replace_meta(\nanvm_cmd_entry cmd);    "
    },
    "anvm_logic_blks :: check_protect_info": {
        "prefix": [
            "check_protect_info",
            "function:check_protect_info -> anvm_logic_blks"
        ],
        "body": [
            "check_protect_info(${1:pi_at_first}, ${2:pi_type}, ${3:check_enable}, ${4:exp_app_tag_mask}, ${5:exp_app_tag}, ${6:exp_ini_ref_tag}, ${7:err_str}, ${8:exp_storage_tag}, ${9:csi0});"
        ],
        "description": "[Class:anvm_logic_blks]\n     virtual function int check_protect_info(\n              bit                  pi_at_first,\n                 byte                 pi_type,\n                 bit                   check_enable,\n                 avery_u16            exp_app_tag_mask,\n              avery_u16            exp_app_tag     ,\n              bit                  exp_ini_ref_tag ,\n        ref   string               err_str         ,\n        input bit                  exp_storage_tag  = 0,\n        input anvm_istruct_ns_csi0 csi0             = null );    "
    },
    "anvm_istruct_ct": {
        "prefix": "anvm_istruct_ct",
        "body": [
            "anvm_istruct_ct  ${0:name_class};"
        ],
        "description": "class anvm_istruct_ct extends anvm_istruct_base;\n"
    },
    "anvm_istruct_ct :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_istruct_ct"
        ],
        "body": [
            "new(${1:log}, ${2:spec_revision}, ${3:over_fabrics});"
        ],
        "description": "[Class:anvm_istruct_ct]\n     extern function new(\nanvm_log log = null,\n int spec_revision=12,\n bit over_fabrics = 0);    "
    },
    "anvm_istruct_ct :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_istruct_ct"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_istruct_ct]\n     extern virtual function void pack(\n);    "
    },
    "anvm_istruct_ct :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_istruct_ct"
        ],
        "body": [
            "unpack(${1:va});"
        ],
        "description": "[Class:anvm_istruct_ct]\n     extern virtual function void unpack(\nbit       va      );    "
    },
    "anvm_istruct_ct :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_istruct_ct"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_istruct_ct]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_istruct_ct :: has_nops": {
        "prefix": [
            "has_nops",
            "function:has_nops -> anvm_istruct_ct"
        ],
        "body": [
            "has_nops(${0:});"
        ],
        "description": "[Class:anvm_istruct_ct]\n     extern function bit  has_nops(\n);    "
    },
    "anvm_istruct_ct :: get_nops": {
        "prefix": [
            "get_nops",
            "function:get_nops -> anvm_istruct_ct"
        ],
        "body": [
            "get_nops(${1:nops});"
        ],
        "description": "[Class:anvm_istruct_ct]\n     extern function void get_nops(\nref bit       nops      );    "
    },
    "anvm_istruct_ct :: check_rsvd_fields": {
        "prefix": [
            "check_rsvd_fields",
            "function:check_rsvd_fields -> anvm_istruct_ct"
        ],
        "body": [
            "check_rsvd_fields(${1:cmd});"
        ],
        "description": "[Class:anvm_istruct_ct]\n     extern function bit  check_rsvd_fields(\nanvm_cmd_entry cmd = null);    "
    },
    "anvm_istruct_ct :: unallocated_nvm_capacity_in_lb": {
        "prefix": [
            "unallocated_nvm_capacity_in_lb",
            "function:unallocated_nvm_capacity_in_lb -> anvm_istruct_ct"
        ],
        "body": [
            "unallocated_nvm_capacity_in_lb(${1:lb_bytes});"
        ],
        "description": "[Class:anvm_istruct_ct]\n     extern function bit             unallocated_nvm_capacity_in_lb(\nbit       lb_bytes);    "
    },
    "anvm_host_mem_buf": {
        "prefix": "anvm_host_mem_buf",
        "body": [
            "anvm_host_mem_buf  ${0:name_class};"
        ],
        "description": "class anvm_host_mem_buf extends anvm_data_base;\n"
    },
    "anvm_host_mem_buf :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_host_mem_buf"
        ],
        "body": [
            "new(${1:name}, ${2:log});"
        ],
        "description": "[Class:anvm_host_mem_buf]\n     extern function new(\nstring name = \"anvm_host_mem_buf\",\n anvm_log log = null);    "
    },
    "anvm_host_mem_buf :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_host_mem_buf"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_host_mem_buf]\n     extern function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_rpmb_structure": {
        "prefix": "anvm_rpmb_structure",
        "body": [
            "anvm_rpmb_structure  ${0:name_class};"
        ],
        "description": "class anvm_rpmb_structure extends anvm_data_base;\n"
    },
    "anvm_rpmb_structure :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_rpmb_structure"
        ],
        "body": [
            "new(${1:name}, ${2:log}, ${3:cfg_info});"
        ],
        "description": "[Class:anvm_rpmb_structure]\n     extern function new(\nstring name=\"\",\n anvm_log log = null,\n anvm_cfg_info cfg_info = null);    "
    },
    "anvm_rpmb_structure :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_rpmb_structure"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_rpmb_structure]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_cmd_entry": {
        "prefix": "anvm_cmd_entry",
        "body": [
            "anvm_cmd_entry  ${0:name_class};"
        ],
        "description": "class anvm_cmd_entry extends anvm_q_entry;\n"
    },
    "anvm_cmd_entry :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_cmd_entry"
        ],
        "body": [
            "new(${1:mgr}, ${2:kind}, ${3:entry_in_dw});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern function new(\n`avery_strname  anvm_controller_mgr mgr = null,\n anvm_cmd_e kind = ANVM_CMD_unknown,\n int entry_in_dw = 16);    "
    },
    "anvm_cmd_entry :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_cmd_entry"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function string sprint      (\nint verbosity = 0,\n string prefix=\"\");    "
    },
    "anvm_cmd_entry :: sprint_track": {
        "prefix": [
            "sprint_track",
            "function:sprint_track -> anvm_cmd_entry"
        ],
        "body": [
            "sprint_track(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function string sprint_track(\nint verbosity = 0,\n string prefix=\"\");    "
    },
    "anvm_cmd_entry :: sprint_payload": {
        "prefix": [
            "sprint_payload",
            "function:sprint_payload -> anvm_cmd_entry"
        ],
        "body": [
            "sprint_payload(${1:len}, ${2:prefix}, ${3:print_header}, ${4:lba_size}, ${5:offset});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function string sprint_payload(\nint    len       = 16,\nstring prefix    = \"\",\nbit print_header = 1,\nint    lba_size  = 0,\navery_u32 offset = 0);    "
    },
    "anvm_cmd_entry :: sprint_sgl": {
        "prefix": [
            "sprint_sgl",
            "function:sprint_sgl -> anvm_cmd_entry"
        ],
        "body": [
            "sprint_sgl(${1:verbosity}, ${2:prefix}, ${3:print_cmd});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function string sprint_sgl(\nint verbosity = 0,\n string prefix=\"\",\n bit print_cmd=1);    "
    },
    "anvm_cmd_entry :: sprint_dataset_mng_range": {
        "prefix": [
            "sprint_dataset_mng_range",
            "function:sprint_dataset_mng_range -> anvm_cmd_entry"
        ],
        "body": [
            "sprint_dataset_mng_range(${1:i}, ${2:range});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual  function string sprint_dataset_mng_range(\nint i = -1,\n anvm_dataset_mng_range_t range = 0);    "
    },
    "anvm_cmd_entry :: sprint_copy_range": {
        "prefix": [
            "sprint_copy_range",
            "function:sprint_copy_range -> anvm_cmd_entry"
        ],
        "body": [
            "sprint_copy_range(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual  function string sprint_copy_range(\n);    "
    },
    "anvm_cmd_entry :: gen_sudo_reads": {
        "prefix": [
            "gen_sudo_reads",
            "function:gen_sudo_reads -> anvm_cmd_entry"
        ],
        "body": [
            "gen_sudo_reads(${1:sudo_reads});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual  function void gen_sudo_reads(\nref anvm_cmd_entry sudo_reads      );    "
    },
    "anvm_cmd_entry :: get_zone_id_list_logpage": {
        "prefix": [
            "get_zone_id_list_logpage",
            "function:get_zone_id_list_logpage -> anvm_cmd_entry"
        ],
        "body": [
            "get_zone_id_list_logpage(${1:dwords}, ${2:logpages});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function void   get_zone_id_list_logpage(\nref avery_u32 dwords      ,\n output anvm_logpage_change_zone_list logpages      );    "
    },
    "anvm_cmd_entry :: get_err_logpage": {
        "prefix": [
            "get_err_logpage",
            "function:get_err_logpage -> anvm_cmd_entry"
        ],
        "body": [
            "get_err_logpage(${1:dwords}, ${2:logpages});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function void   get_err_logpage(\nref avery_u32 dwords      ,\n output anvm_logpage_err logpages      );    "
    },
    "anvm_cmd_entry :: get_smart_logpage": {
        "prefix": [
            "get_smart_logpage",
            "function:get_smart_logpage -> anvm_cmd_entry"
        ],
        "body": [
            "get_smart_logpage(${1:dwords}, ${2:logpages});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function void   get_smart_logpage(\nref avery_u32 dwords      ,\n output anvm_logpage_smart_health logpages      );    "
    },
    "anvm_cmd_entry :: get_fw_slot_logpage": {
        "prefix": [
            "get_fw_slot_logpage",
            "function:get_fw_slot_logpage -> anvm_cmd_entry"
        ],
        "body": [
            "get_fw_slot_logpage(${1:dwords}, ${2:logpage});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function void   get_fw_slot_logpage(\nref avery_u32 dwords      ,\n output anvm_logpage_fw_slot logpage);    "
    },
    "anvm_cmd_entry :: get_dev_selftest_logpage": {
        "prefix": [
            "get_dev_selftest_logpage",
            "function:get_dev_selftest_logpage -> anvm_cmd_entry"
        ],
        "body": [
            "get_dev_selftest_logpage(${1:dwords}, ${2:logpage});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function void   get_dev_selftest_logpage(\nref avery_u32 dwords      ,\n output anvm_logpage_dev_selftest logpage);    "
    },
    "anvm_cmd_entry :: get_rsvt_notif_logpage": {
        "prefix": [
            "get_rsvt_notif_logpage",
            "function:get_rsvt_notif_logpage -> anvm_cmd_entry"
        ],
        "body": [
            "get_rsvt_notif_logpage(${1:dwords}, ${2:logpage});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function void   get_rsvt_notif_logpage(\nref avery_u32 dwords      ,\n output anvm_logpage_rsvt_notif logpage);    "
    },
    "anvm_cmd_entry :: get_sanitize_status_logpage": {
        "prefix": [
            "get_sanitize_status_logpage",
            "function:get_sanitize_status_logpage -> anvm_cmd_entry"
        ],
        "body": [
            "get_sanitize_status_logpage(${1:dwords}, ${2:logpage});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function void   get_sanitize_status_logpage(\nref avery_u32 dwords      ,\n output anvm_logpage_sanitize_status logpage);    "
    },
    "anvm_cmd_entry :: get_chuck_information_logpage": {
        "prefix": [
            "get_chuck_information_logpage",
            "function:get_chuck_information_logpage -> anvm_cmd_entry"
        ],
        "body": [
            "get_chuck_information_logpage(${1:dwords}, ${2:logpage});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function void   get_chuck_information_logpage(\nref avery_u32 dwords      ,\n output anvm_logpage_chuck_information logpage);    "
    },
    "anvm_cmd_entry :: get_persist_event_logpage": {
        "prefix": [
            "get_persist_event_logpage",
            "function:get_persist_event_logpage -> anvm_cmd_entry"
        ],
        "body": [
            "get_persist_event_logpage(${1:dwords}, ${2:logpage});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function void   get_persist_event_logpage(\nref avery_u32 dwords      ,\n output anvm_logpage_persist_event_log logpage);    "
    },
    "anvm_cmd_entry :: get_endurance_grp_logpage": {
        "prefix": [
            "get_endurance_grp_logpage",
            "function:get_endurance_grp_logpage -> anvm_cmd_entry"
        ],
        "body": [
            "get_endurance_grp_logpage(${1:dwords}, ${2:logpage});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function void   get_endurance_grp_logpage(\nref avery_u32 dwords      ,\n output anvm_logpage_endur_grp_logpg logpage);    "
    },
    "anvm_cmd_entry :: get_data_len_dw": {
        "prefix": [
            "get_data_len_dw",
            "function:get_data_len_dw -> anvm_cmd_entry"
        ],
        "body": [
            "get_data_len_dw(${1:lb_size_dw}, ${2:logpage_extended_data});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function avery_u64 get_data_len_dw(\navery_u32 lb_size_dw = -1,\n bit logpage_extended_data = 0);    "
    },
    "anvm_cmd_entry :: get_metadata_len_dw": {
        "prefix": [
            "get_metadata_len_dw",
            "function:get_metadata_len_dw -> anvm_cmd_entry"
        ],
        "body": [
            "get_metadata_len_dw(${1:lb_metadata_size_dw});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function avery_u64 get_metadata_len_dw(\navery_u32  lb_metadata_size_dw = -1);    "
    },
    "anvm_cmd_entry :: copy": {
        "prefix": [
            "copy",
            "function:copy -> anvm_cmd_entry"
        ],
        "body": [
            "copy(${1:to}, ${2:level});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern function anvm_cmd_entry copy(\nanvm_cmd_entry to = null,\n int level = 1);    "
    },
    "anvm_cmd_entry :: get_aoc_record_id": {
        "prefix": [
            "get_aoc_record_id",
            "function:get_aoc_record_id -> anvm_cmd_entry"
        ],
        "body": [
            "get_aoc_record_id(${1:record_id});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern function void get_aoc_record_id(\noutput bit      record_id);    "
    },
    "anvm_cmd_entry :: set_aoc_record_id": {
        "prefix": [
            "set_aoc_record_id",
            "function:set_aoc_record_id -> anvm_cmd_entry"
        ],
        "body": [
            "set_aoc_record_id(${1:record_id});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern function void set_aoc_record_id(\nbit      record_id);    "
    },
    "anvm_cmd_entry :: get_aoc_flags": {
        "prefix": [
            "get_aoc_flags",
            "function:get_aoc_flags -> anvm_cmd_entry"
        ],
        "body": [
            "get_aoc_flags(${1:flags});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern function void get_aoc_flags(\noutput bit      flags);    "
    },
    "anvm_cmd_entry :: set_aoc_flags": {
        "prefix": [
            "set_aoc_flags",
            "function:set_aoc_flags -> anvm_cmd_entry"
        ],
        "body": [
            "set_aoc_flags(${1:flags});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern function void set_aoc_flags(\nbit      flags);    "
    },
    "anvm_cmd_entry :: is_admin": {
        "prefix": [
            "is_admin",
            "function:is_admin -> anvm_cmd_entry"
        ],
        "body": [
            "is_admin(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_admin(\n);                   "
    },
    "anvm_cmd_entry :: is_io": {
        "prefix": [
            "is_io",
            "function:is_io -> anvm_cmd_entry"
        ],
        "body": [
            "is_io(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_io(\n);                      "
    },
    "anvm_cmd_entry :: is_kpio": {
        "prefix": [
            "is_kpio",
            "function:is_kpio -> anvm_cmd_entry"
        ],
        "body": [
            "is_kpio(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_kpio(\n);                    "
    },
    "anvm_cmd_entry :: is_delete_sq": {
        "prefix": [
            "is_delete_sq",
            "function:is_delete_sq -> anvm_cmd_entry"
        ],
        "body": [
            "is_delete_sq(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_delete_sq(\n);                "
    },
    "anvm_cmd_entry :: is_create_sq": {
        "prefix": [
            "is_create_sq",
            "function:is_create_sq -> anvm_cmd_entry"
        ],
        "body": [
            "is_create_sq(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_create_sq(\n);               "
    },
    "anvm_cmd_entry :: is_get_logpage": {
        "prefix": [
            "is_get_logpage",
            "function:is_get_logpage -> anvm_cmd_entry"
        ],
        "body": [
            "is_get_logpage(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_get_logpage(\n);             "
    },
    "anvm_cmd_entry :: is_delete_cq": {
        "prefix": [
            "is_delete_cq",
            "function:is_delete_cq -> anvm_cmd_entry"
        ],
        "body": [
            "is_delete_cq(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_delete_cq(\n);                "
    },
    "anvm_cmd_entry :: is_create_cq": {
        "prefix": [
            "is_create_cq",
            "function:is_create_cq -> anvm_cmd_entry"
        ],
        "body": [
            "is_create_cq(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_create_cq(\n);               "
    },
    "anvm_cmd_entry :: is_create_mapq": {
        "prefix": [
            "is_create_mapq",
            "function:is_create_mapq -> anvm_cmd_entry"
        ],
        "body": [
            "is_create_mapq(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_create_mapq(\n);               "
    },
    "anvm_cmd_entry :: is_delete_mapq": {
        "prefix": [
            "is_delete_mapq",
            "function:is_delete_mapq -> anvm_cmd_entry"
        ],
        "body": [
            "is_delete_mapq(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_delete_mapq(\n);                "
    },
    "anvm_cmd_entry :: is_aoc_err_inj": {
        "prefix": [
            "is_aoc_err_inj",
            "function:is_aoc_err_inj -> anvm_cmd_entry"
        ],
        "body": [
            "is_aoc_err_inj(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_aoc_err_inj(\n);                "
    },
    "anvm_cmd_entry :: is_identify": {
        "prefix": [
            "is_identify",
            "function:is_identify -> anvm_cmd_entry"
        ],
        "body": [
            "is_identify(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_identify(\n);                 "
    },
    "anvm_cmd_entry :: is_abort": {
        "prefix": [
            "is_abort",
            "function:is_abort -> anvm_cmd_entry"
        ],
        "body": [
            "is_abort(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_abort(\n);                   "
    },
    "anvm_cmd_entry :: is_set_features": {
        "prefix": [
            "is_set_features",
            "function:is_set_features -> anvm_cmd_entry"
        ],
        "body": [
            "is_set_features(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_set_features(\n);            "
    },
    "anvm_cmd_entry :: is_get_features": {
        "prefix": [
            "is_get_features",
            "function:is_get_features -> anvm_cmd_entry"
        ],
        "body": [
            "is_get_features(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_get_features(\n);            "
    },
    "anvm_cmd_entry :: is_async_event": {
        "prefix": [
            "is_async_event",
            "function:is_async_event -> anvm_cmd_entry"
        ],
        "body": [
            "is_async_event(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_async_event(\n);             "
    },
    "anvm_cmd_entry :: is_ns_attach": {
        "prefix": [
            "is_ns_attach",
            "function:is_ns_attach -> anvm_cmd_entry"
        ],
        "body": [
            "is_ns_attach(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_ns_attach(\n);               "
    },
    "anvm_cmd_entry :: is_activate_fw": {
        "prefix": [
            "is_activate_fw",
            "function:is_activate_fw -> anvm_cmd_entry"
        ],
        "body": [
            "is_activate_fw(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_activate_fw(\n);             "
    },
    "anvm_cmd_entry :: is_download_fw": {
        "prefix": [
            "is_download_fw",
            "function:is_download_fw -> anvm_cmd_entry"
        ],
        "body": [
            "is_download_fw(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_download_fw(\n);             "
    },
    "anvm_cmd_entry :: is_device_selftest": {
        "prefix": [
            "is_device_selftest",
            "function:is_device_selftest -> anvm_cmd_entry"
        ],
        "body": [
            "is_device_selftest(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_device_selftest(\n);         "
    },
    "anvm_cmd_entry :: is_ns_management": {
        "prefix": [
            "is_ns_management",
            "function:is_ns_management -> anvm_cmd_entry"
        ],
        "body": [
            "is_ns_management(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_ns_management(\n);           "
    },
    "anvm_cmd_entry :: is_keep_alive": {
        "prefix": [
            "is_keep_alive",
            "function:is_keep_alive -> anvm_cmd_entry"
        ],
        "body": [
            "is_keep_alive(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_keep_alive(\n);               "
    },
    "anvm_cmd_entry :: is_directive": {
        "prefix": [
            "is_directive",
            "function:is_directive -> anvm_cmd_entry"
        ],
        "body": [
            "is_directive(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_directive(\n);           "
    },
    "anvm_cmd_entry :: is_directive_send": {
        "prefix": [
            "is_directive_send",
            "function:is_directive_send -> anvm_cmd_entry"
        ],
        "body": [
            "is_directive_send(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_directive_send(\n);           "
    },
    "anvm_cmd_entry :: is_directive_receive": {
        "prefix": [
            "is_directive_receive",
            "function:is_directive_receive -> anvm_cmd_entry"
        ],
        "body": [
            "is_directive_receive(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_directive_receive(\n);        "
    },
    "anvm_cmd_entry :: is_virtual_mng": {
        "prefix": [
            "is_virtual_mng",
            "function:is_virtual_mng -> anvm_cmd_entry"
        ],
        "body": [
            "is_virtual_mng(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_virtual_mng(\n);              "
    },
    "anvm_cmd_entry :: is_mi_send": {
        "prefix": [
            "is_mi_send",
            "function:is_mi_send -> anvm_cmd_entry"
        ],
        "body": [
            "is_mi_send(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_mi_send(\n);                  "
    },
    "anvm_cmd_entry :: is_mi_receive": {
        "prefix": [
            "is_mi_receive",
            "function:is_mi_receive -> anvm_cmd_entry"
        ],
        "body": [
            "is_mi_receive(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_mi_receive(\n);               "
    },
    "anvm_cmd_entry :: is_format_nvm": {
        "prefix": [
            "is_format_nvm",
            "function:is_format_nvm -> anvm_cmd_entry"
        ],
        "body": [
            "is_format_nvm(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_format_nvm(\n);              "
    },
    "anvm_cmd_entry :: is_security_send": {
        "prefix": [
            "is_security_send",
            "function:is_security_send -> anvm_cmd_entry"
        ],
        "body": [
            "is_security_send(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_security_send(\n);           "
    },
    "anvm_cmd_entry :: is_security_receive": {
        "prefix": [
            "is_security_receive",
            "function:is_security_receive -> anvm_cmd_entry"
        ],
        "body": [
            "is_security_receive(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_security_receive(\n);        "
    },
    "anvm_cmd_entry :: is_sanitize": {
        "prefix": [
            "is_sanitize",
            "function:is_sanitize -> anvm_cmd_entry"
        ],
        "body": [
            "is_sanitize(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_sanitize(\n);                "
    },
    "anvm_cmd_entry :: is_get_lba_status": {
        "prefix": [
            "is_get_lba_status",
            "function:is_get_lba_status -> anvm_cmd_entry"
        ],
        "body": [
            "is_get_lba_status(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_get_lba_status(\n);          "
    },
    "anvm_cmd_entry :: is_admin_vendor_spec": {
        "prefix": [
            "is_admin_vendor_spec",
            "function:is_admin_vendor_spec -> anvm_cmd_entry"
        ],
        "body": [
            "is_admin_vendor_spec(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_admin_vendor_spec(\n);        "
    },
    "anvm_cmd_entry :: is_namespace": {
        "prefix": [
            "is_namespace",
            "function:is_namespace -> anvm_cmd_entry"
        ],
        "body": [
            "is_namespace(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_namespace(\n);               "
    },
    "anvm_cmd_entry :: is_firmware": {
        "prefix": [
            "is_firmware",
            "function:is_firmware -> anvm_cmd_entry"
        ],
        "body": [
            "is_firmware(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_firmware(\n);                "
    },
    "anvm_cmd_entry :: is_security": {
        "prefix": [
            "is_security",
            "function:is_security -> anvm_cmd_entry"
        ],
        "body": [
            "is_security(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_security(\n);                "
    },
    "anvm_cmd_entry :: is_zone_append": {
        "prefix": [
            "is_zone_append",
            "function:is_zone_append -> anvm_cmd_entry"
        ],
        "body": [
            "is_zone_append(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_zone_append(\n);                  "
    },
    "anvm_cmd_entry :: is_zone_mng_send": {
        "prefix": [
            "is_zone_mng_send",
            "function:is_zone_mng_send -> anvm_cmd_entry"
        ],
        "body": [
            "is_zone_mng_send(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_zone_mng_send(\n);                  "
    },
    "anvm_cmd_entry :: is_flush": {
        "prefix": [
            "is_flush",
            "function:is_flush -> anvm_cmd_entry"
        ],
        "body": [
            "is_flush(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_flush(\n);                    "
    },
    "anvm_cmd_entry :: is_write": {
        "prefix": [
            "is_write",
            "function:is_write -> anvm_cmd_entry"
        ],
        "body": [
            "is_write(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_write(\n);                  "
    },
    "anvm_cmd_entry :: is_read": {
        "prefix": [
            "is_read",
            "function:is_read -> anvm_cmd_entry"
        ],
        "body": [
            "is_read(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_read(\n);                   "
    },
    "anvm_cmd_entry :: is_store": {
        "prefix": [
            "is_store",
            "function:is_store -> anvm_cmd_entry"
        ],
        "body": [
            "is_store(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_store(\n);                  "
    },
    "anvm_cmd_entry :: is_retrieve": {
        "prefix": [
            "is_retrieve",
            "function:is_retrieve -> anvm_cmd_entry"
        ],
        "body": [
            "is_retrieve(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_retrieve(\n);               "
    },
    "anvm_cmd_entry :: is_verify": {
        "prefix": [
            "is_verify",
            "function:is_verify -> anvm_cmd_entry"
        ],
        "body": [
            "is_verify(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_verify(\n);                 "
    },
    "anvm_cmd_entry :: is_write_uncor": {
        "prefix": [
            "is_write_uncor",
            "function:is_write_uncor -> anvm_cmd_entry"
        ],
        "body": [
            "is_write_uncor(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_write_uncor(\n);            "
    },
    "anvm_cmd_entry :: is_compare": {
        "prefix": [
            "is_compare",
            "function:is_compare -> anvm_cmd_entry"
        ],
        "body": [
            "is_compare(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_compare(\n);                "
    },
    "anvm_cmd_entry :: is_write_zeros": {
        "prefix": [
            "is_write_zeros",
            "function:is_write_zeros -> anvm_cmd_entry"
        ],
        "body": [
            "is_write_zeros(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_write_zeros(\n);            "
    },
    "anvm_cmd_entry :: is_dataset_mng": {
        "prefix": [
            "is_dataset_mng",
            "function:is_dataset_mng -> anvm_cmd_entry"
        ],
        "body": [
            "is_dataset_mng(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_dataset_mng(\n);            "
    },
    "anvm_cmd_entry :: is_copy": {
        "prefix": [
            "is_copy",
            "function:is_copy -> anvm_cmd_entry"
        ],
        "body": [
            "is_copy(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_copy(\n);                   "
    },
    "anvm_cmd_entry :: is_rsvt_register": {
        "prefix": [
            "is_rsvt_register",
            "function:is_rsvt_register -> anvm_cmd_entry"
        ],
        "body": [
            "is_rsvt_register(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_rsvt_register(\n);          "
    },
    "anvm_cmd_entry :: is_rsvt_report": {
        "prefix": [
            "is_rsvt_report",
            "function:is_rsvt_report -> anvm_cmd_entry"
        ],
        "body": [
            "is_rsvt_report(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_rsvt_report(\n);            "
    },
    "anvm_cmd_entry :: is_rsvt_acquire": {
        "prefix": [
            "is_rsvt_acquire",
            "function:is_rsvt_acquire -> anvm_cmd_entry"
        ],
        "body": [
            "is_rsvt_acquire(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_rsvt_acquire(\n);           "
    },
    "anvm_cmd_entry :: is_rsvt_release": {
        "prefix": [
            "is_rsvt_release",
            "function:is_rsvt_release -> anvm_cmd_entry"
        ],
        "body": [
            "is_rsvt_release(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_rsvt_release(\n);           "
    },
    "anvm_cmd_entry :: is_nvm_vendor_spec": {
        "prefix": [
            "is_nvm_vendor_spec",
            "function:is_nvm_vendor_spec -> anvm_cmd_entry"
        ],
        "body": [
            "is_nvm_vendor_spec(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_nvm_vendor_spec(\n);        "
    },
    "anvm_cmd_entry :: is_reservation": {
        "prefix": [
            "is_reservation",
            "function:is_reservation -> anvm_cmd_entry"
        ],
        "body": [
            "is_reservation(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_reservation(\n);            "
    },
    "anvm_cmd_entry :: is_write_group": {
        "prefix": [
            "is_write_group",
            "function:is_write_group -> anvm_cmd_entry"
        ],
        "body": [
            "is_write_group(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_write_group(\n);            "
    },
    "anvm_cmd_entry :: is_read_group": {
        "prefix": [
            "is_read_group",
            "function:is_read_group -> anvm_cmd_entry"
        ],
        "body": [
            "is_read_group(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_read_group(\n);             "
    },
    "anvm_cmd_entry :: has_nvm_data": {
        "prefix": [
            "has_nvm_data",
            "function:has_nvm_data -> anvm_cmd_entry"
        ],
        "body": [
            "has_nvm_data(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit has_nvm_data(\n);              "
    },
    "anvm_cmd_entry :: is_modify": {
        "prefix": [
            "is_modify",
            "function:is_modify -> anvm_cmd_entry"
        ],
        "body": [
            "is_modify(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_modify(\n);                 "
    },
    "anvm_cmd_entry :: can_use_sgl": {
        "prefix": [
            "can_use_sgl",
            "function:can_use_sgl -> anvm_cmd_entry"
        ],
        "body": [
            "can_use_sgl(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit can_use_sgl(\n);               "
    },
    "anvm_cmd_entry :: can_use_cmb": {
        "prefix": [
            "can_use_cmb",
            "function:can_use_cmb -> anvm_cmd_entry"
        ],
        "body": [
            "can_use_cmb(${1:use_lists});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function void can_use_cmb(\nbit use_lists);      "
    },
    "anvm_cmd_entry :: can_use_cmb_for_data": {
        "prefix": [
            "can_use_cmb_for_data",
            "function:can_use_cmb_for_data -> anvm_cmd_entry"
        ],
        "body": [
            "can_use_cmb_for_data(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit can_use_cmb_for_data(\n);      "
    },
    "anvm_cmd_entry :: can_use_cmb_for_list": {
        "prefix": [
            "can_use_cmb_for_list",
            "function:can_use_cmb_for_list -> anvm_cmd_entry"
        ],
        "body": [
            "can_use_cmb_for_list(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit can_use_cmb_for_list(\n);      "
    },
    "anvm_cmd_entry :: can_use_pmr": {
        "prefix": [
            "can_use_pmr",
            "function:can_use_pmr -> anvm_cmd_entry"
        ],
        "body": [
            "can_use_pmr(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit can_use_pmr(\n)          ;      "
    },
    "anvm_cmd_entry :: is_write_data": {
        "prefix": [
            "is_write_data",
            "function:is_write_data -> anvm_cmd_entry"
        ],
        "body": [
            "is_write_data(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_write_data(\n);             "
    },
    "anvm_cmd_entry :: is_read_data": {
        "prefix": [
            "is_read_data",
            "function:is_read_data -> anvm_cmd_entry"
        ],
        "body": [
            "is_read_data(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_read_data(\n);              "
    },
    "anvm_cmd_entry :: is_vendor_write": {
        "prefix": [
            "is_vendor_write",
            "function:is_vendor_write -> anvm_cmd_entry"
        ],
        "body": [
            "is_vendor_write(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_vendor_write(\n);           "
    },
    "anvm_cmd_entry :: is_strip_meta": {
        "prefix": [
            "is_strip_meta",
            "function:is_strip_meta -> anvm_cmd_entry"
        ],
        "body": [
            "is_strip_meta(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_strip_meta(\n);             "
    },
    "anvm_cmd_entry :: is_fabric": {
        "prefix": [
            "is_fabric",
            "function:is_fabric -> anvm_cmd_entry"
        ],
        "body": [
            "is_fabric(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_fabric(\n);                 "
    },
    "anvm_cmd_entry :: is_fabric_or_admin": {
        "prefix": [
            "is_fabric_or_admin",
            "function:is_fabric_or_admin -> anvm_cmd_entry"
        ],
        "body": [
            "is_fabric_or_admin(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_fabric_or_admin(\n);        "
    },
    "anvm_cmd_entry :: is_fab_connect": {
        "prefix": [
            "is_fab_connect",
            "function:is_fab_connect -> anvm_cmd_entry"
        ],
        "body": [
            "is_fab_connect(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_fab_connect(\n);            "
    },
    "anvm_cmd_entry :: use_reference_tag": {
        "prefix": [
            "use_reference_tag",
            "function:use_reference_tag -> anvm_cmd_entry"
        ],
        "body": [
            "use_reference_tag(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit use_reference_tag(\n);         "
    },
    "anvm_cmd_entry :: is_aoc_write": {
        "prefix": [
            "is_aoc_write",
            "function:is_aoc_write -> anvm_cmd_entry"
        ],
        "body": [
            "is_aoc_write(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_aoc_write(\n);              "
    },
    "anvm_cmd_entry :: is_aoc_read": {
        "prefix": [
            "is_aoc_read",
            "function:is_aoc_read -> anvm_cmd_entry"
        ],
        "body": [
            "is_aoc_read(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_aoc_read(\n);               "
    },
    "anvm_cmd_entry :: has_aoc_ppa_pointer": {
        "prefix": [
            "has_aoc_ppa_pointer",
            "function:has_aoc_ppa_pointer -> anvm_cmd_entry"
        ],
        "body": [
            "has_aoc_ppa_pointer(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit has_aoc_ppa_pointer(\n);       "
    },
    "anvm_cmd_entry :: is_aoc_ctrler_mem": {
        "prefix": [
            "is_aoc_ctrler_mem",
            "function:is_aoc_ctrler_mem -> anvm_cmd_entry"
        ],
        "body": [
            "is_aoc_ctrler_mem(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function bit is_aoc_ctrler_mem(\n);         "
    },
    "anvm_cmd_entry :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_cmd_entry"
        ],
        "body": [
            "pack(${1:log});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function void pack(\nanvm_log log);    "
    },
    "anvm_cmd_entry :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_cmd_entry"
        ],
        "body": [
            "unpack(${1:is_admin}, ${2:over_fabrics}, ${3:is_kv_cmd});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function void unpack(\nbit is_admin,\n bit over_fabrics = 0,\n bit is_kv_cmd);    "
    },
    "anvm_cmd_entry :: collect_data_blks": {
        "prefix": [
            "collect_data_blks",
            "function:collect_data_blks -> anvm_cmd_entry"
        ],
        "body": [
            "collect_data_blks(${1:blks}, ${2:page_size});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function void collect_data_blks(\n ref    anvm_addr_range_t blks        ,\n                                                    input  int               page_size = 0);    "
    },
    "anvm_cmd_entry :: collect_metadata_blks": {
        "prefix": [
            "collect_metadata_blks",
            "function:collect_metadata_blks -> anvm_cmd_entry"
        ],
        "body": [
            "collect_metadata_blks(${1:blks}, ${2:n_dwords});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function void collect_metadata_blks(\n ref   anvm_addr_range_t blks            ,\n                                                        input avery_u32         n_dwords);    "
    },
    "anvm_cmd_entry :: get_marked_data": {
        "prefix": [
            "get_marked_data",
            "function:get_marked_data -> anvm_cmd_entry"
        ],
        "body": [
            "get_marked_data(${1:bytes}, ${2:meta_bytes});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function void get_marked_data(\nref bit       bytes      ,\n ref bit       meta_bytes      );    "
    },
    "anvm_cmd_entry :: gen_rand_data": {
        "prefix": [
            "gen_rand_data",
            "function:gen_rand_data -> anvm_cmd_entry"
        ],
        "body": [
            "gen_rand_data(${1:NS});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function void gen_rand_data(\nanvm_istruct_ns NS);    "
    },
    "anvm_cmd_entry :: get_features": {
        "prefix": [
            "get_features",
            "function:get_features -> anvm_cmd_entry"
        ],
        "body": [
            "get_features(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function anvm_feature get_features(\n);    "
    },
    "anvm_cmd_entry :: set_features": {
        "prefix": [
            "set_features",
            "function:set_features -> anvm_cmd_entry"
        ],
        "body": [
            "set_features(${1:feat});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function void set_features(\nanvm_feature feat);    "
    },
    "anvm_cmd_entry :: convert_to_virtual": {
        "prefix": [
            "convert_to_virtual",
            "function:convert_to_virtual -> anvm_cmd_entry"
        ],
        "body": [
            "convert_to_virtual(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function void convert_to_virtual(\n);    "
    },
    "anvm_cmd_entry :: pack_copy_range_fmt0": {
        "prefix": [
            "pack_copy_range_fmt0",
            "function:pack_copy_range_fmt0 -> anvm_cmd_entry"
        ],
        "body": [
            "pack_copy_range_fmt0(${1:ranges});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function void pack_copy_range_fmt0(\nref anvm_source_range_entry_fmt0_t ranges      );    "
    },
    "anvm_cmd_entry :: pack_copy_range_fmt1": {
        "prefix": [
            "pack_copy_range_fmt1",
            "function:pack_copy_range_fmt1 -> anvm_cmd_entry"
        ],
        "body": [
            "pack_copy_range_fmt1(${1:ranges});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function void pack_copy_range_fmt1(\nref anvm_source_range_entry_fmt1_t ranges      );    "
    },
    "anvm_cmd_entry :: unpack_key_list": {
        "prefix": [
            "unpack_key_list",
            "function:unpack_key_list -> anvm_cmd_entry"
        ],
        "body": [
            "unpack_key_list(${1:keys});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     extern virtual function void unpack_key_list(\nref anvm_kv_key keys      );    "
    },
    "anvm_cmd_entry :: cpl_failed": {
        "prefix": [
            "cpl_failed",
            "function:cpl_failed -> anvm_cmd_entry"
        ],
        "body": [
            "cpl_failed(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     virtual function bit cpl_failed(\n); return (\nerr_code == FAILED); endfunction    "
    },
    "anvm_cmd_entry :: cpl_ok": {
        "prefix": [
            "cpl_ok",
            "function:cpl_ok -> anvm_cmd_entry"
        ],
        "body": [
            "cpl_ok(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     virtual function bit cpl_ok(\n);     return (\nerr_code == OK);     endfunction    "
    },
    "anvm_cmd_entry :: update_prp1_prp2": {
        "prefix": [
            "update_prp1_prp2",
            "function:update_prp1_prp2 -> anvm_cmd_entry"
        ],
        "body": [
            "update_prp1_prp2(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     virtual function void update_prp1_prp2(\n);    "
    },
    "anvm_cmd_entry :: pre_randomize": {
        "prefix": [
            "pre_randomize",
            "function:pre_randomize -> anvm_cmd_entry"
        ],
        "body": [
            "pre_randomize(${0:});"
        ],
        "description": "[Class:anvm_cmd_entry]\n     function void pre_randomize(\n);    "
    },
    "anvm_pcie_fake": {
        "prefix": "anvm_pcie_fake",
        "body": [
            "anvm_pcie_fake  ${0:name_class};"
        ],
        "description": "class anvm_pcie_fake;\n"
    },
    "anvm_istruct_io_cmd_set": {
        "prefix": "anvm_istruct_io_cmd_set",
        "body": [
            "anvm_istruct_io_cmd_set  ${0:name_class};"
        ],
        "description": "class anvm_istruct_io_cmd_set extends anvm_istruct_base;\n"
    },
    "anvm_istruct_io_cmd_set :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_istruct_io_cmd_set"
        ],
        "body": [
            "new(${1:log}, ${2:over_fabrics});"
        ],
        "description": "[Class:anvm_istruct_io_cmd_set]\n     extern function new(\nanvm_log log = null,\n bit over_fabrics = 0);    "
    },
    "anvm_istruct_io_cmd_set :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_istruct_io_cmd_set"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_istruct_io_cmd_set]\n     extern virtual function void pack(\n);    "
    },
    "anvm_istruct_io_cmd_set :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_istruct_io_cmd_set"
        ],
        "body": [
            "unpack(${1:va});"
        ],
        "description": "[Class:anvm_istruct_io_cmd_set]\n     extern virtual function void unpack(\nbit       va      );    "
    },
    "anvm_istruct_io_cmd_set :: get_io_cs_vector": {
        "prefix": [
            "get_io_cs_vector",
            "function:get_io_cs_vector -> anvm_istruct_io_cmd_set"
        ],
        "body": [
            "get_io_cs_vector(${1:index});"
        ],
        "description": "[Class:anvm_istruct_io_cmd_set]\n     extern virtual function avery_u64 get_io_cs_vector(\nint index = -1);       "
    },
    "anvm_istruct_io_cmd_set :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_istruct_io_cmd_set"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_istruct_io_cmd_set]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_controller_list": {
        "prefix": "anvm_controller_list",
        "body": [
            "anvm_controller_list  ${0:name_class};"
        ],
        "description": "class anvm_controller_list extends anvm_data_base;\n"
    },
    "anvm_controller_list :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_controller_list"
        ],
        "body": [
            "new(${1:log});"
        ],
        "description": "[Class:anvm_controller_list]\n     function new(\nanvm_log log = null);    "
    },
    "anvm_controller_list :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_controller_list"
        ],
        "body": [
            "pack(${1:q});"
        ],
        "description": "[Class:anvm_controller_list]\n     virtual function void pack(\nref bit       q      );    "
    },
    "anvm_controller_list :: unpack_from": {
        "prefix": [
            "unpack_from",
            "function:unpack_from -> anvm_controller_list"
        ],
        "body": [
            "unpack_from(${1:cmd});"
        ],
        "description": "[Class:anvm_controller_list]\n     virtual function void unpack_from(\nref anvm_cmd_entry cmd);    "
    },
    "anvm_istruct_nvm_set_list": {
        "prefix": "anvm_istruct_nvm_set_list",
        "body": [
            "anvm_istruct_nvm_set_list  ${0:name_class};"
        ],
        "description": "class anvm_istruct_nvm_set_list extends anvm_istruct_base;\n"
    },
    "anvm_istruct_nvm_set_list :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_istruct_nvm_set_list"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_istruct_nvm_set_list]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_istruct_nvm_set_list :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_istruct_nvm_set_list"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_istruct_nvm_set_list]\n     extern virtual function void pack(\n);    "
    },
    "anvm_istruct_nvm_set_list :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_istruct_nvm_set_list"
        ],
        "body": [
            "unpack(${1:va});"
        ],
        "description": "[Class:anvm_istruct_nvm_set_list]\n     extern virtual function void unpack(\nbit       va      );    "
    },
    "anvm_istruct_nvm_set_list :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_istruct_nvm_set_list"
        ],
        "body": [
            "new(${1:log}, ${2:name});"
        ],
        "description": "[Class:anvm_istruct_nvm_set_list]\n     extern function new(\nanvm_log log,\n string name = \"anvm_istruct_nvm_set_list\");    "
    },
    "anvm_istruct_ct_csi2": {
        "prefix": "anvm_istruct_ct_csi2",
        "body": [
            "anvm_istruct_ct_csi2  ${0:name_class};"
        ],
        "description": "class anvm_istruct_ct_csi2 extends anvm_istruct_base;\n"
    },
    "anvm_istruct_ct_csi2 :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_istruct_ct_csi2"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_istruct_ct_csi2]\n     extern virtual function void pack(\n);    "
    },
    "anvm_istruct_ct_csi2 :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_istruct_ct_csi2"
        ],
        "body": [
            "unpack(${1:va});"
        ],
        "description": "[Class:anvm_istruct_ct_csi2]\n     extern virtual function void unpack(\nbit       va      );    "
    },
    "anvm_istruct_ct_csi2 :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_istruct_ct_csi2"
        ],
        "body": [
            "new(${1:log}, ${2:zone_append_sz});"
        ],
        "description": "[Class:anvm_istruct_ct_csi2]\n     extern function new(\nanvm_log log = null,\n bit       zone_append_sz = 0);    "
    },
    "anvm_istruct_ct_csi2 :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_istruct_ct_csi2"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_istruct_ct_csi2]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_istruct_pcc": {
        "prefix": "anvm_istruct_pcc",
        "body": [
            "anvm_istruct_pcc  ${0:name_class};"
        ],
        "description": "class anvm_istruct_pcc extends anvm_istruct_base;\n"
    },
    "anvm_istruct_pcc :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_istruct_pcc"
        ],
        "body": [
            "new(${1:log}, ${2:over_fabrics});"
        ],
        "description": "[Class:anvm_istruct_pcc]\n     extern function new(\nanvm_log log = null,\n bit over_fabrics = 0);    "
    },
    "anvm_istruct_pcc :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_istruct_pcc"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_istruct_pcc]\n     extern virtual function void pack(\n);    "
    },
    "anvm_istruct_pcc :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_istruct_pcc"
        ],
        "body": [
            "unpack(${1:va});"
        ],
        "description": "[Class:anvm_istruct_pcc]\n     extern virtual function void unpack(\nbit       va      );    "
    },
    "anvm_istruct_pcc :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_istruct_pcc"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_istruct_pcc]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_ring": {
        "prefix": "anvm_ring",
        "body": [
            "anvm_ring  ${0:name_class};"
        ],
        "description": "class anvm_ring #(type T = bit[63:0]) extends anvm_data_base;\n"
    },
    "anvm_ring :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_ring"
        ],
        "body": [
            "new(${1:id}, ${2:qsize}, ${3:entry_size}, ${4:base});"
        ],
        "description": "[Class:anvm_ring]\n     extern function new(\nint id,\n int qsize,\n int entry_size,\n bit       base = 0);    "
    },
    "anvm_ring :: peek": {
        "prefix": [
            "peek",
            "function:peek -> anvm_ring"
        ],
        "body": [
            "peek(${0:});"
        ],
        "description": "[Class:anvm_ring]\n     extern virtual function T peek(\n);    "
    },
    "anvm_ring :: push": {
        "prefix": [
            "push",
            "function:push -> anvm_ring"
        ],
        "body": [
            "push(${1:v});"
        ],
        "description": "[Class:anvm_ring]\n     extern virtual function void push (\nT v);    "
    },
    "anvm_ring :: size": {
        "prefix": [
            "size",
            "function:size -> anvm_ring"
        ],
        "body": [
            "size(${0:});"
        ],
        "description": "[Class:anvm_ring]\n     extern virtual function int size(\n);    "
    },
    "anvm_ring :: num_entries": {
        "prefix": [
            "num_entries",
            "function:num_entries -> anvm_ring"
        ],
        "body": [
            "num_entries(${0:});"
        ],
        "description": "[Class:anvm_ring]\n     extern virtual function int num_entries(\n);    "
    },
    "anvm_ring :: delete": {
        "prefix": [
            "delete",
            "function:delete -> anvm_ring"
        ],
        "body": [
            "delete(${1:i});"
        ],
        "description": "[Class:anvm_ring]\n     extern virtual function void delete(\nint i);    "
    },
    "anvm_ring :: delete_all": {
        "prefix": [
            "delete_all",
            "function:delete_all -> anvm_ring"
        ],
        "body": [
            "delete_all(${0:});"
        ],
        "description": "[Class:anvm_ring]\n     extern virtual function void delete_all(\n);    "
    },
    "anvm_ring :: is_full": {
        "prefix": [
            "is_full",
            "function:is_full -> anvm_ring"
        ],
        "body": [
            "is_full(${0:});"
        ],
        "description": "[Class:anvm_ring]\n     extern virtual function bit is_full(\n);    "
    },
    "anvm_ring :: is_empty": {
        "prefix": [
            "is_empty",
            "function:is_empty -> anvm_ring"
        ],
        "body": [
            "is_empty(${0:});"
        ],
        "description": "[Class:anvm_ring]\n     extern virtual function bit is_empty(\n);    "
    },
    "anvm_ring :: is_wrap": {
        "prefix": [
            "is_wrap",
            "function:is_wrap -> anvm_ring"
        ],
        "body": [
            "is_wrap(${1:total}, ${2:num_wrapped});"
        ],
        "description": "[Class:anvm_ring]\n     extern virtual function bit is_wrap(\ninput int total,\n output int num_wrapped);    "
    },
    "anvm_ring :: get_qsize": {
        "prefix": [
            "get_qsize",
            "function:get_qsize -> anvm_ring"
        ],
        "body": [
            "get_qsize(${0:});"
        ],
        "description": "[Class:anvm_ring]\n     extern virtual function int get_qsize(\n);    "
    },
    "anvm_ring :: get_entry_size": {
        "prefix": [
            "get_entry_size",
            "function:get_entry_size -> anvm_ring"
        ],
        "body": [
            "get_entry_size(${0:});"
        ],
        "description": "[Class:anvm_ring]\n     extern virtual function int get_entry_size(\n);    "
    },
    "anvm_ring :: get_entry_size_dw": {
        "prefix": [
            "get_entry_size_dw",
            "function:get_entry_size_dw -> anvm_ring"
        ],
        "body": [
            "get_entry_size_dw(${0:});"
        ],
        "description": "[Class:anvm_ring]\n     extern virtual function int get_entry_size_dw(\n);    "
    },
    "anvm_ring :: get_tail": {
        "prefix": [
            "get_tail",
            "function:get_tail -> anvm_ring"
        ],
        "body": [
            "get_tail(${0:});"
        ],
        "description": "[Class:anvm_ring]\n     extern virtual function bit       get_tail(\n);    "
    },
    "anvm_ring :: get_head": {
        "prefix": [
            "get_head",
            "function:get_head -> anvm_ring"
        ],
        "body": [
            "get_head(${0:});"
        ],
        "description": "[Class:anvm_ring]\n     extern virtual function bit       get_head(\n);    "
    },
    "anvm_ring :: get_tail_addr": {
        "prefix": [
            "get_tail_addr",
            "function:get_tail_addr -> anvm_ring"
        ],
        "body": [
            "get_tail_addr(${0:});"
        ],
        "description": "[Class:anvm_ring]\n     extern virtual function bit       get_tail_addr(\n);    "
    },
    "anvm_ring :: get_head_addr": {
        "prefix": [
            "get_head_addr",
            "function:get_head_addr -> anvm_ring"
        ],
        "body": [
            "get_head_addr(${0:});"
        ],
        "description": "[Class:anvm_ring]\n     extern virtual function bit       get_head_addr(\n);    "
    },
    "anvm_ring :: get_base_addr": {
        "prefix": [
            "get_base_addr",
            "function:get_base_addr -> anvm_ring"
        ],
        "body": [
            "get_base_addr(${0:});"
        ],
        "description": "[Class:anvm_ring]\n     extern virtual function bit       get_base_addr(\n);    "
    },
    "anvm_ring :: head_diff": {
        "prefix": [
            "head_diff",
            "function:head_diff -> anvm_ring"
        ],
        "body": [
            "head_diff(${1:new_head});"
        ],
        "description": "[Class:anvm_ring]\n     extern virtual function int head_diff(\nint new_head);    "
    },
    "anvm_ring :: tail_diff": {
        "prefix": [
            "tail_diff",
            "function:tail_diff -> anvm_ring"
        ],
        "body": [
            "tail_diff(${1:new_tail});"
        ],
        "description": "[Class:anvm_ring]\n     extern virtual function int tail_diff(\nint new_tail);    "
    },
    "anvm_ring :: pointer_diff": {
        "prefix": [
            "pointer_diff",
            "function:pointer_diff -> anvm_ring"
        ],
        "body": [
            "pointer_diff(${0:});"
        ],
        "description": "[Class:anvm_ring]\n     extern virtual function int pointer_diff(\n);    "
    },
    "anvm_ring :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_ring"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_ring]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix=\"\");    "
    },
    "anvm_ring :: pop": {
        "prefix": [
            "pop",
            "function:pop -> anvm_ring"
        ],
        "body": [
            "pop(${0:});"
        ],
        "description": "[Class:anvm_ring]\n     function T pop(\n);    "
    },
    "anvm_istruct_ct_csi0": {
        "prefix": "anvm_istruct_ct_csi0",
        "body": [
            "anvm_istruct_ct_csi0  ${0:name_class};"
        ],
        "description": "class anvm_istruct_ct_csi0 extends anvm_istruct_base;\n"
    },
    "anvm_istruct_ct_csi0 :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_istruct_ct_csi0"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_istruct_ct_csi0]\n     extern virtual function void pack(\n);    "
    },
    "anvm_istruct_ct_csi0 :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_istruct_ct_csi0"
        ],
        "body": [
            "unpack(${1:va});"
        ],
        "description": "[Class:anvm_istruct_ct_csi0]\n     extern virtual function void unpack(\nbit       va      );    "
    },
    "anvm_istruct_ct_csi0 :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_istruct_ct_csi0"
        ],
        "body": [
            "new(${1:log});"
        ],
        "description": "[Class:anvm_istruct_ct_csi0]\n     extern function new(\nanvm_log log = null);    "
    },
    "anvm_istruct_ct_csi0 :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_istruct_ct_csi0"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_istruct_ct_csi0]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_cfg_info": {
        "prefix": "anvm_cfg_info",
        "body": [
            "anvm_cfg_info  ${0:name_class};"
        ],
        "description": "class anvm_cfg_info extends anvm_data_base;\n"
    },
    "anvm_cfg_info :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_cfg_info"
        ],
        "body": [
            "new(${1:name}, ${2:is_quicksim});"
        ],
        "description": "[Class:anvm_cfg_info]\n     function new (\nstring name = \"cfg_info\",\n bit is_quicksim = 1);    "
    },
    "anvm_cfg_info :: quicksim": {
        "prefix": [
            "quicksim",
            "function:quicksim -> anvm_cfg_info"
        ],
        "body": [
            "quicksim(${0:});"
        ],
        "description": "[Class:anvm_cfg_info]\n     virtual function void quicksim(\n);    "
    },
    "anvm_cfg_info :: check_valid": {
        "prefix": [
            "check_valid",
            "function:check_valid -> anvm_cfg_info"
        ],
        "body": [
            "check_valid(${0:});"
        ],
        "description": "[Class:anvm_cfg_info]\n     extern virtual function void check_valid(\n);    "
    },
    "anvm_cfg_info :: sprint_quicksim": {
        "prefix": [
            "sprint_quicksim",
            "function:sprint_quicksim -> anvm_cfg_info"
        ],
        "body": [
            "sprint_quicksim(${1:verbosity});"
        ],
        "description": "[Class:anvm_cfg_info]\n     extern virtual function string sprint_quicksim(\nint verbosity = 0);    "
    },
    "anvm_cfg_info :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_cfg_info"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_cfg_info]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix=\"\");    "
    },
    "anvm_q_entry": {
        "prefix": "anvm_q_entry",
        "body": [
            "anvm_q_entry  ${0:name_class};"
        ],
        "description": "class anvm_q_entry extends anvm_data_base;\n"
    },
    "anvm_q_entry :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_q_entry"
        ],
        "body": [
            "new(${1:name});"
        ],
        "description": "[Class:anvm_q_entry]\n     function new(\nstring name = \"anvm_q_entry\");    "
    },
    "anvm_q_entry :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_q_entry"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_q_entry]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_q_entry :: sprint_user_ctrl": {
        "prefix": [
            "sprint_user_ctrl",
            "function:sprint_user_ctrl -> anvm_q_entry"
        ],
        "body": [
            "sprint_user_ctrl(${0:});"
        ],
        "description": "[Class:anvm_q_entry]\n     extern function string sprint_user_ctrl(\n);    "
    },
    "anvm_capsule": {
        "prefix": "anvm_capsule",
        "body": [
            "anvm_capsule  ${0:name_class};"
        ],
        "description": "class anvm_capsule extends anvm_data_base;\n"
    },
    "anvm_capsule :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_capsule"
        ],
        "body": [
            "new(${1:name});"
        ],
        "description": "[Class:anvm_capsule]\n     extern function new(\nstring name=\"anvm_capsule\");    "
    },
    "anvm_capsule :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_capsule"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_capsule]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix=\"\");    "
    },
    "anvm_capsule :: sprint_track": {
        "prefix": [
            "sprint_track",
            "function:sprint_track -> anvm_capsule"
        ],
        "body": [
            "sprint_track(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_capsule]\n     extern virtual function string sprint_track(\nint verbosity = 0,\n string prefix=\"\");    "
    },
    "anvm_capsule :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_capsule"
        ],
        "body": [
            "unpack(${1:log}, ${2:is_rsp});"
        ],
        "description": "[Class:anvm_capsule]\n     extern virtual function bit unpack(\nanvm_log log,\n bit is_rsp = 0);    "
    },
    "anvm_capsule :: pack_from": {
        "prefix": [
            "pack_from",
            "function:pack_from -> anvm_capsule"
        ],
        "body": [
            "pack_from(${1:e});"
        ],
        "description": "[Class:anvm_capsule]\n     extern virtual function void pack_from(\nanvm_q_entry e);    "
    },
    "anvm_istruct_ns_csi2": {
        "prefix": "anvm_istruct_ns_csi2",
        "body": [
            "anvm_istruct_ns_csi2  ${0:name_class};"
        ],
        "description": "class anvm_istruct_ns_csi2 extends anvm_istruct_base;\n"
    },
    "anvm_istruct_ns_csi2 :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_istruct_ns_csi2"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_istruct_ns_csi2]\n     extern virtual function void pack(\n);    "
    },
    "anvm_istruct_ns_csi2 :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_istruct_ns_csi2"
        ],
        "body": [
            "unpack(${1:va});"
        ],
        "description": "[Class:anvm_istruct_ns_csi2]\n     extern virtual function void unpack(\nbit       va      );    "
    },
    "anvm_istruct_ns_csi2 :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_istruct_ns_csi2"
        ],
        "body": [
            "new(${1:log}, ${2:lba_fmt_idx});"
        ],
        "description": "[Class:anvm_istruct_ns_csi2]\n     extern function new(\nanvm_log log = null,\n bit       lba_fmt_idx = 0);    "
    },
    "anvm_istruct_ns_csi2 :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_istruct_ns_csi2"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_istruct_ns_csi2]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_istruct_ns_csi2 :: get_zone_dsptr_sz": {
        "prefix": [
            "get_zone_dsptr_sz",
            "function:get_zone_dsptr_sz -> anvm_istruct_ns_csi2"
        ],
        "body": [
            "get_zone_dsptr_sz(${0:});"
        ],
        "description": "[Class:anvm_istruct_ns_csi2]\n     extern virtual function avery_u64 get_zone_dsptr_sz(\n);    "
    },
    "anvm_istruct_scl": {
        "prefix": "anvm_istruct_scl",
        "body": [
            "anvm_istruct_scl  ${0:name_class};"
        ],
        "description": "class anvm_istruct_scl extends anvm_istruct_base;\n"
    },
    "anvm_istruct_scl :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_istruct_scl"
        ],
        "body": [
            "new(${1:log}, ${2:over_fabrics});"
        ],
        "description": "[Class:anvm_istruct_scl]\n     extern function new(\nanvm_log log = null,\n bit over_fabrics = 0);    "
    },
    "anvm_istruct_scl :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_istruct_scl"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_istruct_scl]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix=\"\");    "
    },
    "anvm_oc_st_geometry": {
        "prefix": "anvm_oc_st_geometry",
        "body": [
            "anvm_oc_st_geometry  ${0:name_class};"
        ],
        "description": "class anvm_oc_st_geometry extends anvm_data_base;    \n"
    },
    "anvm_oc_st_geometry :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_oc_st_geometry"
        ],
        "body": [
            "new(${1:log});"
        ],
        "description": "[Class:anvm_oc_st_geometry]\n     extern function new(\nanvm_log log = null);    "
    },
    "anvm_oc_st_geometry :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_oc_st_geometry"
        ],
        "body": [
            "pack(${1:cmd});"
        ],
        "description": "[Class:anvm_oc_st_geometry]\n     extern virtual function void pack(\nref anvm_cmd_entry cmd);    "
    },
    "anvm_oc_st_geometry :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_oc_st_geometry"
        ],
        "body": [
            "unpack(${1:cmd});"
        ],
        "description": "[Class:anvm_oc_st_geometry]\n     extern virtual function void unpack(\nref anvm_cmd_entry cmd);    "
    },
    "anvm_oc_st_geometry :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_oc_st_geometry"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_oc_st_geometry]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_oc_st_geometry :: randomize_me": {
        "prefix": [
            "randomize_me",
            "function:randomize_me -> anvm_oc_st_geometry"
        ],
        "body": [
            "randomize_me(${1:ns});"
        ],
        "description": "[Class:anvm_oc_st_geometry]\n     function void randomize_me(\nanvm_istruct_ns ns);      "
    },
    "anvm_controller_mgr": {
        "prefix": "anvm_controller_mgr",
        "body": [
            "anvm_controller_mgr  ${0:name_class};"
        ],
        "description": "class anvm_controller_mgr extends anvm_data_base;\n"
    },
    "anvm_controller_mgr :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_controller_mgr"
        ],
        "body": [
            "new(${1:log}, ${2:ctrler_id});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern function new(\n`avery_strname  anvm_log log=null,\n avery_u32 ctrler_id=0);    "
    },
    "anvm_controller_mgr :: copy": {
        "prefix": [
            "copy",
            "function:copy -> anvm_controller_mgr"
        ],
        "body": [
            "copy(${1:to});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern function anvm_controller_mgr copy(\nanvm_controller_mgr to = null);    "
    },
    "anvm_controller_mgr :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_controller_mgr"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_controller_mgr :: check_subq_id": {
        "prefix": [
            "check_subq_id",
            "function:check_subq_id -> anvm_controller_mgr"
        ],
        "body": [
            "check_subq_id(${1:qid}, ${2:s});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function void check_subq_id(\nint qid,\n string s);    "
    },
    "anvm_controller_mgr :: check_cplq_id": {
        "prefix": [
            "check_cplq_id",
            "function:check_cplq_id -> anvm_controller_mgr"
        ],
        "body": [
            "check_cplq_id(${1:qid}, ${2:s});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function void check_cplq_id(\nint qid,\n string s);    "
    },
    "anvm_controller_mgr :: get_subq_tail": {
        "prefix": [
            "get_subq_tail",
            "function:get_subq_tail -> anvm_controller_mgr"
        ],
        "body": [
            "get_subq_tail(${1:qid});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function bit       get_subq_tail(\nint qid);    "
    },
    "anvm_controller_mgr :: get_cplq_head": {
        "prefix": [
            "get_cplq_head",
            "function:get_cplq_head -> anvm_controller_mgr"
        ],
        "body": [
            "get_cplq_head(${1:qid});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function bit       get_cplq_head(\nint qid);    "
    },
    "anvm_controller_mgr :: get_subq_tail_addr": {
        "prefix": [
            "get_subq_tail_addr",
            "function:get_subq_tail_addr -> anvm_controller_mgr"
        ],
        "body": [
            "get_subq_tail_addr(${1:qid});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function bit       get_subq_tail_addr(\nint qid);    "
    },
    "anvm_controller_mgr :: get_cplq_head_addr": {
        "prefix": [
            "get_cplq_head_addr",
            "function:get_cplq_head_addr -> anvm_controller_mgr"
        ],
        "body": [
            "get_cplq_head_addr(${1:qid});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function bit       get_cplq_head_addr(\nint qid);    "
    },
    "anvm_controller_mgr :: get_subq_base": {
        "prefix": [
            "get_subq_base",
            "function:get_subq_base -> anvm_controller_mgr"
        ],
        "body": [
            "get_subq_base(${1:qid});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function bit       get_subq_base(\nint qid);    "
    },
    "anvm_controller_mgr :: get_cplq_base": {
        "prefix": [
            "get_cplq_base",
            "function:get_cplq_base -> anvm_controller_mgr"
        ],
        "body": [
            "get_cplq_base(${1:qid});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function bit       get_cplq_base(\nint qid);    "
    },
    "anvm_controller_mgr :: get_cplq_tail": {
        "prefix": [
            "get_cplq_tail",
            "function:get_cplq_tail -> anvm_controller_mgr"
        ],
        "body": [
            "get_cplq_tail(${1:qid});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function bit       get_cplq_tail(\nint qid);    "
    },
    "anvm_controller_mgr :: get_subq_doorbell_addr": {
        "prefix": [
            "get_subq_doorbell_addr",
            "function:get_subq_doorbell_addr -> anvm_controller_mgr"
        ],
        "body": [
            "get_subq_doorbell_addr(${1:qid});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function bit       get_subq_doorbell_addr(\nint qid);    "
    },
    "anvm_controller_mgr :: get_cplq_doorbell_addr": {
        "prefix": [
            "get_cplq_doorbell_addr",
            "function:get_cplq_doorbell_addr -> anvm_controller_mgr"
        ],
        "body": [
            "get_cplq_doorbell_addr(${1:qid});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function bit       get_cplq_doorbell_addr(\nint qid);    "
    },
    "anvm_controller_mgr :: get_mapq_doorbell_addr": {
        "prefix": [
            "get_mapq_doorbell_addr",
            "function:get_mapq_doorbell_addr -> anvm_controller_mgr"
        ],
        "body": [
            "get_mapq_doorbell_addr(${1:qid});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function bit       get_mapq_doorbell_addr(\nint qid);    "
    },
    "anvm_controller_mgr :: gen_delete_cq": {
        "prefix": [
            "gen_delete_cq",
            "function:gen_delete_cq -> anvm_controller_mgr"
        ],
        "body": [
            "gen_delete_cq(${1:qid});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function anvm_cmd_entry gen_delete_cq(\nint qid = -1);       "
    },
    "anvm_controller_mgr :: gen_delete_sq": {
        "prefix": [
            "gen_delete_sq",
            "function:gen_delete_sq -> anvm_controller_mgr"
        ],
        "body": [
            "gen_delete_sq(${1:qid});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function anvm_cmd_entry gen_delete_sq(\nint qid = -1);       "
    },
    "anvm_controller_mgr :: collect_cq_ids": {
        "prefix": [
            "collect_cq_ids",
            "function:collect_cq_ids -> anvm_controller_mgr"
        ],
        "body": [
            "collect_cq_ids(${1:qids});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function void collect_cq_ids(\noutput int qids      );    "
    },
    "anvm_controller_mgr :: collect_sq_ids": {
        "prefix": [
            "collect_sq_ids",
            "function:collect_sq_ids -> anvm_controller_mgr"
        ],
        "body": [
            "collect_sq_ids(${1:cq_ids}, ${2:qids});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function void collect_sq_ids(\ninput int cq_ids      ,\n output int qids      );    "
    },
    "anvm_controller_mgr :: collect_unused_cq": {
        "prefix": [
            "collect_unused_cq",
            "function:collect_unused_cq -> anvm_controller_mgr"
        ],
        "body": [
            "collect_unused_cq(${1:cq_ids});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function void collect_unused_cq(\noutput int cq_ids      );    "
    },
    "anvm_controller_mgr :: set_quicksim": {
        "prefix": [
            "set_quicksim",
            "function:set_quicksim -> anvm_controller_mgr"
        ],
        "body": [
            "set_quicksim(${1:entry}, ${2:scale});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function void set_quicksim(\nstring entry,\n bit       scale);    "
    },
    "anvm_controller_mgr :: get_mdts_in_lba": {
        "prefix": [
            "get_mdts_in_lba",
            "function:get_mdts_in_lba -> anvm_controller_mgr"
        ],
        "body": [
            "get_mdts_in_lba(${1:nsid});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function avery_u64 get_mdts_in_lba(\navery_u32 nsid);    "
    },
    "anvm_controller_mgr :: get_mdts_dw": {
        "prefix": [
            "get_mdts_dw",
            "function:get_mdts_dw -> anvm_controller_mgr"
        ],
        "body": [
            "get_mdts_dw(${0:});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function avery_u64  get_mdts_dw(\n);    "
    },
    "anvm_controller_mgr :: get_vsl_dw": {
        "prefix": [
            "get_vsl_dw",
            "function:get_vsl_dw -> anvm_controller_mgr"
        ],
        "body": [
            "get_vsl_dw(${0:});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function avery_u64  get_vsl_dw(\n);    "
    },
    "anvm_controller_mgr :: get_wzsl_dw": {
        "prefix": [
            "get_wzsl_dw",
            "function:get_wzsl_dw -> anvm_controller_mgr"
        ],
        "body": [
            "get_wzsl_dw(${0:});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function avery_u64  get_wzsl_dw(\n);    "
    },
    "anvm_controller_mgr :: get_wusl_dw": {
        "prefix": [
            "get_wusl_dw",
            "function:get_wusl_dw -> anvm_controller_mgr"
        ],
        "body": [
            "get_wusl_dw(${0:});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function avery_u64  get_wusl_dw(\n);    "
    },
    "anvm_controller_mgr :: get_lba_size_dw": {
        "prefix": [
            "get_lba_size_dw",
            "function:get_lba_size_dw -> anvm_controller_mgr"
        ],
        "body": [
            "get_lba_size_dw(${1:nsid});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function avery_u32 get_lba_size_dw(\navery_u32 nsid);    "
    },
    "anvm_controller_mgr :: get_cap_timeout": {
        "prefix": [
            "get_cap_timeout",
            "function:get_cap_timeout -> anvm_controller_mgr"
        ],
        "body": [
            "get_cap_timeout(${0:});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function time get_cap_timeout(\n);    "
    },
    "anvm_controller_mgr :: load_ict": {
        "prefix": [
            "load_ict",
            "function:load_ict -> anvm_controller_mgr"
        ],
        "body": [
            "load_ict(${1:vq});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function void load_ict(\nref avery_u32 vq      );    "
    },
    "anvm_controller_mgr :: load_ict_csi0": {
        "prefix": [
            "load_ict_csi0",
            "function:load_ict_csi0 -> anvm_controller_mgr"
        ],
        "body": [
            "load_ict_csi0(${1:vq});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function void load_ict_csi0 (\nref avery_u32 vq      );    "
    },
    "anvm_controller_mgr :: load_ins": {
        "prefix": [
            "load_ins",
            "function:load_ins -> anvm_controller_mgr"
        ],
        "body": [
            "load_ins(${1:nsid}, ${2:vq});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function void load_ins(\nint nsid,\n ref avery_u32 vq      );    "
    },
    "anvm_controller_mgr :: load_ins_csi1": {
        "prefix": [
            "load_ins_csi1",
            "function:load_ins_csi1 -> anvm_controller_mgr"
        ],
        "body": [
            "load_ins_csi1(${1:nsid}, ${2:vq});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function void load_ins_csi1 (\nint nsid,\n ref avery_u32 vq      );    "
    },
    "anvm_controller_mgr :: get_int_vector": {
        "prefix": [
            "get_int_vector",
            "function:get_int_vector -> anvm_controller_mgr"
        ],
        "body": [
            "get_int_vector(${1:qid});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     extern virtual function int get_int_vector(\nint qid);    "
    },
    "anvm_controller_mgr :: spec11_orlater": {
        "prefix": [
            "spec11_orlater",
            "function:spec11_orlater -> anvm_controller_mgr"
        ],
        "body": [
            "spec11_orlater(${0:});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     function bit spec11_orlater(\n);    "
    },
    "anvm_controller_mgr :: spec12_orlater": {
        "prefix": [
            "spec12_orlater",
            "function:spec12_orlater -> anvm_controller_mgr"
        ],
        "body": [
            "spec12_orlater(${0:});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     function bit spec12_orlater(\n);    "
    },
    "anvm_controller_mgr :: spec121_orlater": {
        "prefix": [
            "spec121_orlater",
            "function:spec121_orlater -> anvm_controller_mgr"
        ],
        "body": [
            "spec121_orlater(${0:});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     function bit spec121_orlater(\n);    "
    },
    "anvm_controller_mgr :: spec13_orlater": {
        "prefix": [
            "spec13_orlater",
            "function:spec13_orlater -> anvm_controller_mgr"
        ],
        "body": [
            "spec13_orlater(${0:});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     function bit spec13_orlater(\n);    "
    },
    "anvm_controller_mgr :: spec14_orlater": {
        "prefix": [
            "spec14_orlater",
            "function:spec14_orlater -> anvm_controller_mgr"
        ],
        "body": [
            "spec14_orlater(${0:});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     function bit spec14_orlater(\n);    "
    },
    "anvm_controller_mgr :: spec20_orlater": {
        "prefix": [
            "spec20_orlater",
            "function:spec20_orlater -> anvm_controller_mgr"
        ],
        "body": [
            "spec20_orlater(${0:});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     function bit spec20_orlater(\n);    "
    },
    "anvm_controller_mgr :: get_rand_nsid": {
        "prefix": [
            "get_rand_nsid",
            "function:get_rand_nsid -> anvm_controller_mgr"
        ],
        "body": [
            "get_rand_nsid(${0:});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     virtual function bit       get_rand_nsid(\n);    "
    },
    "anvm_controller_mgr :: get_inactive_nsid": {
        "prefix": [
            "get_inactive_nsid",
            "function:get_inactive_nsid -> anvm_controller_mgr"
        ],
        "body": [
            "get_inactive_nsid(${0:});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     virtual function bit       get_inactive_nsid(\n);    "
    },
    "anvm_controller_mgr :: get_invalid_nsid": {
        "prefix": [
            "get_invalid_nsid",
            "function:get_invalid_nsid -> anvm_controller_mgr"
        ],
        "body": [
            "get_invalid_nsid(${0:});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     virtual function bit       get_invalid_nsid(\n);    "
    },
    "anvm_controller_mgr :: get_not_exist_key": {
        "prefix": [
            "get_not_exist_key",
            "function:get_not_exist_key -> anvm_controller_mgr"
        ],
        "body": [
            "get_not_exist_key(${1:nsid});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     virtual function anvm_kv_key get_not_exist_key(\nint nsid);    "
    },
    "anvm_controller_mgr :: get_rand_exist_key": {
        "prefix": [
            "get_rand_exist_key",
            "function:get_rand_exist_key -> anvm_controller_mgr"
        ],
        "body": [
            "get_rand_exist_key(${1:nsid});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     virtual function anvm_kv_key get_rand_exist_key(\nint nsid);    "
    },
    "anvm_controller_mgr :: pre_randomize": {
        "prefix": [
            "pre_randomize",
            "function:pre_randomize -> anvm_controller_mgr"
        ],
        "body": [
            "pre_randomize(${0:});"
        ],
        "description": "[Class:anvm_controller_mgr]\n     function void pre_randomize(\n);    "
    },
    "anvm_sgl_dspt": {
        "prefix": "anvm_sgl_dspt",
        "body": [
            "anvm_sgl_dspt  ${0:name_class};"
        ],
        "description": "class anvm_sgl_dspt;\n"
    },
    "anvm_sgl_dspt :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_sgl_dspt"
        ],
        "body": [
            "new(${1:kind}, ${2:length}, ${3:address});"
        ],
        "description": "[Class:anvm_sgl_dspt]\n     extern function new(\n    anvm_sgl_dspt_e kind    = ANVM_SGL_DSPT_rsvd,\n    avery_u32       length  = 0,\n    avery_u64       address = 0);    "
    },
    "anvm_sgl_dspt :: is_null": {
        "prefix": [
            "is_null",
            "function:is_null -> anvm_sgl_dspt"
        ],
        "body": [
            "is_null(${0:});"
        ],
        "description": "[Class:anvm_sgl_dspt]\n     function bit is_null(\n);    "
    },
    "anvm_sgl_dspt :: is_zero_length": {
        "prefix": [
            "is_zero_length",
            "function:is_zero_length -> anvm_sgl_dspt"
        ],
        "body": [
            "is_zero_length(${0:});"
        ],
        "description": "[Class:anvm_sgl_dspt]\n     function bit is_zero_length(\n);    "
    },
    "anvm_sgl_segment": {
        "prefix": "anvm_sgl_segment",
        "body": [
            "anvm_sgl_segment  ${0:name_class};"
        ],
        "description": "class anvm_sgl_segment;\n"
    },
    "anvm_sgl_segment :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_sgl_segment"
        ],
        "body": [
            "new(${1:base});"
        ],
        "description": "[Class:anvm_sgl_segment]\n     function new(\navery_u64 base);    "
    },
    "anvm_sgl": {
        "prefix": "anvm_sgl",
        "body": [
            "anvm_sgl  ${0:name_class};"
        ],
        "description": "class anvm_sgl extends anvm_data_base;\n"
    },
    "anvm_sgl :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_sgl"
        ],
        "body": [
            "new(${1:total_bytes}, ${2:is_destination_buf});"
        ],
        "description": "[Class:anvm_sgl]\n     extern function new (\nbit       total_bytes = 0,\n bit is_destination_buf = 0);    "
    },
    "anvm_sgl :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_sgl"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_sgl]\n     extern function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_sgl :: first_seg_size": {
        "prefix": [
            "first_seg_size",
            "function:first_seg_size -> anvm_sgl"
        ],
        "body": [
            "first_seg_size(${0:});"
        ],
        "description": "[Class:anvm_sgl]\n     extern function int first_seg_size(\n);    "
    },
    "anvm_sgl :: sgl_data_size": {
        "prefix": [
            "sgl_data_size",
            "function:sgl_data_size -> anvm_sgl"
        ],
        "body": [
            "sgl_data_size(${0:});"
        ],
        "description": "[Class:anvm_sgl]\n     extern function avery_u64 sgl_data_size(\n);    "
    },
    "anvm_sgl :: collect_data_dspt": {
        "prefix": [
            "collect_data_dspt",
            "function:collect_data_dspt -> anvm_sgl"
        ],
        "body": [
            "collect_data_dspt(${1:dspts}, ${2:collect_zero_length});"
        ],
        "description": "[Class:anvm_sgl]\n     extern function void collect_data_dspt(\noutput anvm_sgl_dspt dspts      ,\n input bit collect_zero_length = 0);    "
    },
    "anvm_sgl :: allocate_sgl": {
        "prefix": [
            "allocate_sgl",
            "function:allocate_sgl -> anvm_sgl"
        ],
        "body": [
            "allocate_sgl(${1:mm}, ${2:range_start}, ${3:range_limit});"
        ],
        "description": "[Class:anvm_sgl]\n     extern virtual function bit allocate_sgl(\n            anvm_memory_mgr mm             ,\n            bit             range_start = 0,\n            bit             range_limit = 0);    "
    },
    "anvm_sgl :: has_bit_bucket": {
        "prefix": [
            "has_bit_bucket",
            "function:has_bit_bucket -> anvm_sgl"
        ],
        "body": [
            "has_bit_bucket(${0:});"
        ],
        "description": "[Class:anvm_sgl]\n     extern virtual function bit has_bit_bucket(\n);    "
    },
    "anvm_sgl :: sanity_check": {
        "prefix": [
            "sanity_check",
            "function:sanity_check -> anvm_sgl"
        ],
        "body": [
            "sanity_check(${0:});"
        ],
        "description": "[Class:anvm_sgl]\n     extern virtual function void sanity_check(\n);    "
    },
    "anvm_feature": {
        "prefix": "anvm_feature",
        "body": [
            "anvm_feature  ${0:name_class};"
        ],
        "description": "class anvm_feature;\n"
    },
    "anvm_feature :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_feature"
        ],
        "body": [
            "new(${1:kind}, ${2:dword11});"
        ],
        "description": "[Class:anvm_feature]\n     function new(\nanvm_feature_e kind = ANVM_FEAT_arbitration,\n bit       dword11 = 0);    "
    },
    "anvm_feature :: check_rsvd_fields": {
        "prefix": [
            "check_rsvd_fields",
            "function:check_rsvd_fields -> anvm_feature"
        ],
        "body": [
            "check_rsvd_fields(${1:log}, ${2:cmd});"
        ],
        "description": "[Class:anvm_feature]\n     function bit  check_rsvd_fields(\nanvm_log log,\n anvm_cmd_entry cmd = null);    "
    },
    "anvm_feature :: sprint_track": {
        "prefix": [
            "sprint_track",
            "function:sprint_track -> anvm_feature"
        ],
        "body": [
            "sprint_track(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_feature]\n     extern virtual function string sprint_track(\nint verbosity = 0,\n string prefix=\"\");    "
    },
    "anvm_ctrler_features": {
        "prefix": "anvm_ctrler_features",
        "body": [
            "anvm_ctrler_features  ${0:name_class};"
        ],
        "description": "class anvm_ctrler_features;\n"
    },
    "anvm_cplq": {
        "prefix": "anvm_cplq",
        "body": [
            "anvm_cplq  ${0:name_class};"
        ],
        "description": "class anvm_cplq extends anvm_ring#(anvm_cpl_entry);\n"
    },
    "anvm_cplq :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_cplq"
        ],
        "body": [
            "new(${1:qid}, ${2:qsize}, ${3:entry_size}, ${4:qbase});"
        ],
        "description": "[Class:anvm_cplq]\n     extern function        new     (\nint qid,\n int qsize,\n int entry_size,\n bit       qbase);    "
    },
    "anvm_cplq :: is_admin": {
        "prefix": [
            "is_admin",
            "function:is_admin -> anvm_cplq"
        ],
        "body": [
            "is_admin(${0:});"
        ],
        "description": "[Class:anvm_cplq]\n     extern function bit    is_admin(\n);    "
    },
    "anvm_cplq :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_cplq"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_cplq]\n     extern function string sprint  (\nint verbosity = 0,\n string prefix=\"\");    "
    },
    "anvm_cplq :: check": {
        "prefix": [
            "check",
            "function:check -> anvm_cplq"
        ],
        "body": [
            "check(${0:});"
        ],
        "description": "[Class:anvm_cplq]\n     extern function bit    check   (\n);       "
    },
    "anvm_cplq :: get_tail_addr": {
        "prefix": [
            "get_tail_addr",
            "function:get_tail_addr -> anvm_cplq"
        ],
        "body": [
            "get_tail_addr(${0:});"
        ],
        "description": "[Class:anvm_cplq]\n     extern function bit       get_tail_addr(\n);       "
    },
    "anvm_cplq :: get_head_addr": {
        "prefix": [
            "get_head_addr",
            "function:get_head_addr -> anvm_cplq"
        ],
        "body": [
            "get_head_addr(${0:});"
        ],
        "description": "[Class:anvm_cplq]\n     extern function bit       get_head_addr(\n);       "
    },
    "anvm_cplq :: collect_data_blks": {
        "prefix": [
            "collect_data_blks",
            "function:collect_data_blks -> anvm_cplq"
        ],
        "body": [
            "collect_data_blks(${1:blks});"
        ],
        "description": "[Class:anvm_cplq]\n     extern function void      collect_data_blks(\nref anvm_addr_range_t blks      );    "
    },
    "anvm_subq": {
        "prefix": "anvm_subq",
        "body": [
            "anvm_subq  ${0:name_class};"
        ],
        "description": "class anvm_subq extends anvm_ring#(anvm_cmd_entry);\n"
    },
    "anvm_subq :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_subq"
        ],
        "body": [
            "new(${1:qid}, ${2:qsize}, ${3:entry_size}, ${4:qbase});"
        ],
        "description": "[Class:anvm_subq]\n     extern function           new(\nint qid = 0,\n int qsize = 0,\n int entry_size = 0,\n bit       qbase = 0);    "
    },
    "anvm_subq :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_subq"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_subq]\n     extern function string    sprint  (\nint verbosity = 0,\n string prefix=\"\");    "
    },
    "anvm_subq :: is_admin": {
        "prefix": [
            "is_admin",
            "function:is_admin -> anvm_subq"
        ],
        "body": [
            "is_admin(${0:});"
        ],
        "description": "[Class:anvm_subq]\n     extern function bit       is_admin(\n);        "
    },
    "anvm_subq :: get_tail_addr": {
        "prefix": [
            "get_tail_addr",
            "function:get_tail_addr -> anvm_subq"
        ],
        "body": [
            "get_tail_addr(${0:});"
        ],
        "description": "[Class:anvm_subq]\n     extern function bit       get_tail_addr(\n);       "
    },
    "anvm_subq :: get_head_addr": {
        "prefix": [
            "get_head_addr",
            "function:get_head_addr -> anvm_subq"
        ],
        "body": [
            "get_head_addr(${0:});"
        ],
        "description": "[Class:anvm_subq]\n     extern function bit       get_head_addr(\n);       "
    },
    "anvm_controller": {
        "prefix": "anvm_controller",
        "body": [
            "anvm_controller  ${0:name_class};"
        ],
        "description": "class anvm_controller extends anvm_driver_base;\n"
    },
    "anvm_controller :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_controller"
        ],
        "body": [
            "new(${1:name}, ${2:parent});"
        ],
        "description": "[Class:anvm_controller]\n     extern function new(\n string name,\n`ifdef ANVM_UVMuvm_component parent = null);    "
    },
    "anvm_controller :: build": {
        "prefix": [
            "build",
            "function:build -> anvm_controller"
        ],
        "body": [
            "build(${0:});"
        ],
        "description": "[Class:anvm_controller]\n     virtual function void build(\n);    "
    },
    "anvm_controller :: my_connect": {
        "prefix": [
            "my_connect",
            "function:my_connect -> anvm_controller"
        ],
        "body": [
            "my_connect(${1:cadpt0}, ${2:func_num});"
        ],
        "description": "[Class:anvm_controller]\n     extern function void my_connect(\n    anvm_ctrler_adaptor_base cadpt0,\n    int func_num);    "
    },
    "anvm_controller :: set": {
        "prefix": [
            "set",
            "function:set -> anvm_controller"
        ],
        "body": [
            "set(${1:entry}, ${2:value}, ${3:sub_entry});"
        ],
        "description": "[Class:anvm_controller]\n     extern virtual function void set(\n    input string    entry,\n    input bit       value = 0,\n    input string    sub_entry = \"\");    "
    },
    "anvm_controller :: get": {
        "prefix": [
            "get",
            "function:get -> anvm_controller"
        ],
        "body": [
            "get(${1:entry}, ${2:sub_entry});"
        ],
        "description": "[Class:anvm_controller]\n     extern virtual function bit       get(\n    input string entry,\n    input string sub_entry = \"\");    "
    },
    "anvm_controller :: preload_lba": {
        "prefix": [
            "preload_lba",
            "function:preload_lba -> anvm_controller"
        ],
        "body": [
            "preload_lba(${1:nsid}, ${2:starting_lba}, ${3:value_array}, ${4:meta_value_array});"
        ],
        "description": "[Class:anvm_controller]\n     extern function void preload_lba(\n                int       nsid              ,\n                avery_u64 starting_lba      ,\n            ref avery_u32 value_array           ,\n            ref avery_u32 meta_value_array       );    "
    },
    "anvm_controller :: read_lba": {
        "prefix": [
            "read_lba",
            "function:read_lba -> anvm_controller"
        ],
        "body": [
            "read_lba(${1:nsid}, ${2:starting_lba}, ${3:num_lb}, ${4:value_array}, ${5:meta_value_array});"
        ],
        "description": "[Class:anvm_controller]\n     extern virtual function void read_lba(\n                int       nsid              ,\n                avery_u64 starting_lba      ,\n                int       num_lb            ,\n            ref avery_u32 value_array           ,\n            ref avery_u32 meta_value_array       );    "
    },
    "anvm_controller :: free_lba": {
        "prefix": [
            "free_lba",
            "function:free_lba -> anvm_controller"
        ],
        "body": [
            "free_lba(${1:nsid}, ${2:starting_lba}, ${3:num_lb});"
        ],
        "description": "[Class:anvm_controller]\n     extern virtual function void free_lba(\n                int       nsid              ,\n                avery_u64 starting_lba      ,\n                int       num_lb);    "
    },
    "anvm_controller :: get_identify_ctrler": {
        "prefix": [
            "get_identify_ctrler",
            "function:get_identify_ctrler -> anvm_controller"
        ],
        "body": [
            "get_identify_ctrler(${0:});"
        ],
        "description": "[Class:anvm_controller]\n     extern virtual function anvm_istruct_ct get_identify_ctrler(\n);    "
    },
    "anvm_controller :: get_identify_namespace": {
        "prefix": [
            "get_identify_namespace",
            "function:get_identify_namespace -> anvm_controller"
        ],
        "body": [
            "get_identify_namespace(${1:nsid});"
        ],
        "description": "[Class:anvm_controller]\n     extern virtual function anvm_istruct_ns get_identify_namespace(\nint nsid);    "
    },
    "anvm_controller :: get_ctrler_registers": {
        "prefix": [
            "get_ctrler_registers",
            "function:get_ctrler_registers -> anvm_controller"
        ],
        "body": [
            "get_ctrler_registers(${0:});"
        ],
        "description": "[Class:anvm_controller]\n     extern virtual function anvm_ctrler_registers get_ctrler_registers(\n);    "
    },
    "anvm_controller :: my_report": {
        "prefix": [
            "my_report",
            "function:my_report -> anvm_controller"
        ],
        "body": [
            "my_report(${1:entry}, ${2:verbosity}, ${3:file});"
        ],
        "description": "[Class:anvm_controller]\n     extern virtual function void my_report(\nstring entry,\n int verbosity = 0,\n int file = 0);    "
    },
    "anvm_controller :: replace_coverage_handle": {
        "prefix": [
            "replace_coverage_handle",
            "function:replace_coverage_handle -> anvm_controller"
        ],
        "body": [
            "replace_coverage_handle(${1:c});"
        ],
        "description": "[Class:anvm_controller]\n     extern virtual function void replace_coverage_handle(\nanvm_coverage c);    "
    },
    "anvm_controller :: get_namespace_memory": {
        "prefix": [
            "get_namespace_memory",
            "function:get_namespace_memory -> anvm_controller"
        ],
        "body": [
            "get_namespace_memory(${1:nsid});"
        ],
        "description": "[Class:anvm_controller]\n     extern virtual function anvm_ns_memory get_namespace_memory(\nint nsid);    "
    },
    "anvm_controller :: add_secondary_controller": {
        "prefix": [
            "add_secondary_controller",
            "function:add_secondary_controller -> anvm_controller"
        ],
        "body": [
            "add_secondary_controller(${1:ctrler});"
        ],
        "description": "[Class:anvm_controller]\n     extern virtual function void add_secondary_controller (\nanvm_controller ctrler);    "
    },
    "anvm_controller :: share_namespace_memory": {
        "prefix": [
            "share_namespace_memory",
            "function:share_namespace_memory -> anvm_controller"
        ],
        "body": [
            "share_namespace_memory(${1:nsid}, ${2:nvm});"
        ],
        "description": "[Class:anvm_controller]\n     extern virtual function void share_namespace_memory(\nint nsid,\n anvm_ns_memory nvm);    "
    },
    "anvm_controller :: add_controller": {
        "prefix": [
            "add_controller",
            "function:add_controller -> anvm_controller"
        ],
        "body": [
            "add_controller(${1:sub_nqn}, ${2:ctrler_id});"
        ],
        "description": "[Class:anvm_controller]\n     extern virtual function void add_controller(\nanvm_nqn sub_nqn,\n bit       ctrler_id);    "
    },
    "anvm_controller :: remove_controller": {
        "prefix": [
            "remove_controller",
            "function:remove_controller -> anvm_controller"
        ],
        "body": [
            "remove_controller(${1:sub_nqn}, ${2:ctrler_id});"
        ],
        "description": "[Class:anvm_controller]\n     extern virtual function void remove_controller(\nanvm_nqn sub_nqn,\n bit       ctrler_id);    "
    },
    "anvm_controller :: set_tracker": {
        "prefix": [
            "set_tracker",
            "function:set_tracker -> anvm_controller"
        ],
        "body": [
            "set_tracker(${1:entry}, ${2:enable}, ${3:file_name}, ${4:file_handle});"
        ],
        "description": "[Class:anvm_controller]\n     extern function void set_tracker(\n    input string  entry,\n         input bit     enable,\n    input string  file_name = \"\",\n    input int     file_handle = 0);    "
    },
    "anvm_controller :: send_mem_access_tr": {
        "prefix": [
            "send_mem_access_tr",
            "task:send_mem_access_tr -> anvm_controller"
        ],
        "body": [
            "send_mem_access_tr(${1:mtr});"
        ],
        "description": "[Class:anvm_controller]\n     extern task send_mem_access_tr(\nanvm_mem_access_tr mtr);    "
    },
    "anvm_controller :: get_adaptor": {
        "prefix": [
            "get_adaptor",
            "function:get_adaptor -> anvm_controller"
        ],
        "body": [
            "get_adaptor(${0:});"
        ],
        "description": "[Class:anvm_controller]\n     extern function anvm_ctrler_adaptor_base get_adaptor(\n);    "
    },
    "anvm_mem_access_tr": {
        "prefix": "anvm_mem_access_tr",
        "body": [
            "anvm_mem_access_tr  ${0:name_class};"
        ],
        "description": "class anvm_mem_access_tr;\n"
    },
    "anvm_mem_access_tr :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_mem_access_tr"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_mem_access_tr]\n     extern virtual function string sprint (\nint verbosity = 0,\n string prefix=\"\");    "
    },
    "anvm_log_callbacks": {
        "prefix": "anvm_log_callbacks",
        "body": [
            "anvm_log_callbacks  ${0:name_class};"
        ],
        "description": "virtual class anvm_log_callbacks;\n"
    },
    "anvm_log_callbacks :: assertion_msg_cb": {
        "prefix": [
            "assertion_msg_cb",
            "function:assertion_msg_cb -> anvm_log_callbacks"
        ],
        "body": [
            "assertion_msg_cb(${1:msg}, ${2:is_disable}, ${3:item});"
        ],
        "description": "[Class:anvm_log_callbacks]\n     virtual function void assertion_msg_cb(\ninput string msg,\ninout is_disable,\n   ref anvm_assertion_item item    );    "
    },
    "anvm_log_callbacks :: error_msg_cb": {
        "prefix": [
            "error_msg_cb",
            "function:error_msg_cb -> anvm_log_callbacks"
        ],
        "body": [
            "error_msg_cb(${1:msg}, ${2:is_disable});"
        ],
        "description": "[Class:anvm_log_callbacks]\n     virtual function void error_msg_cb(\ninput string msg,\ninout is_disable       );    "
    },
    "anvm_log_callbacks :: fatal_msg_cb": {
        "prefix": [
            "fatal_msg_cb",
            "function:fatal_msg_cb -> anvm_log_callbacks"
        ],
        "body": [
            "fatal_msg_cb(${1:msg}, ${2:is_disable});"
        ],
        "description": "[Class:anvm_log_callbacks]\n     virtual function void fatal_msg_cb(\ninput string msg,\ninout is_disable       );    "
    },
    "anvm_assertion_item": {
        "prefix": "anvm_assertion_item",
        "body": [
            "anvm_assertion_item  ${0:name_class};"
        ],
        "description": "class anvm_assertion_item;\n"
    },
    "anvm_assertion_item :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_assertion_item"
        ],
        "body": [
            "new(${1:severity}, ${2:dut_type}, ${3:id}, ${4:idname}, ${5:des}, ${6:cvg_cnt});"
        ],
        "description": "[Class:anvm_assertion_item]\n     function new (\n    anvm_severity      severity,\n    bit                 dut_type,\n       anvm_chklist_id_e  id = NVME_CHKLST_unknown,\n    string             idname,\n    string             des = \"\",\n    int                cvg_cnt=0);    "
    },
    "anvm_assertion_item :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_assertion_item"
        ],
        "body": [
            "sprint(${1:verbosity});"
        ],
        "description": "[Class:anvm_assertion_item]\n     function string sprint(\nint verbosity = 0);    "
    },
    "anvm_log": {
        "prefix": "anvm_log",
        "body": [
            "anvm_log  ${0:name_class};"
        ],
        "description": "class anvm_log extends anvm_component;\n"
    },
    "anvm_log :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_log"
        ],
        "body": [
            "new(${1:instance_name});"
        ],
        "description": "[Class:anvm_log]\n     extern function new(\n string instance_name = \"anvm_log\");    "
    },
    "anvm_log :: append_callback": {
        "prefix": [
            "append_callback",
            "function:append_callback -> anvm_log"
        ],
        "body": [
            "append_callback(${1:cb}, ${2:is_global});"
        ],
        "description": "[Class:anvm_log]\n     extern virtual function void append_callback(\nanvm_log_callbacks cb,\n input is_global = 0);    "
    },
    "anvm_log :: prepend_callback": {
        "prefix": [
            "prepend_callback",
            "function:prepend_callback -> anvm_log"
        ],
        "body": [
            "prepend_callback(${1:cb}, ${2:is_global});"
        ],
        "description": "[Class:anvm_log]\n     extern virtual function void prepend_callback(\nanvm_log_callbacks cb,\n input is_global = 0);    "
    },
    "anvm_log :: unregister_callback": {
        "prefix": [
            "unregister_callback",
            "function:unregister_callback -> anvm_log"
        ],
        "body": [
            "unregister_callback(${1:cb}, ${2:is_global});"
        ],
        "description": "[Class:anvm_log]\n     extern virtual function void unregister_callback(\nanvm_log_callbacks cb,\n input is_global = 0);    "
    },
    "anvm_log :: trim_path": {
        "prefix": [
            "trim_path",
            "function:trim_path -> anvm_log"
        ],
        "body": [
            "trim_path(${1:path}, ${2:num_dots}, ${3:remove_leading_scope});"
        ],
        "description": "[Class:anvm_log]\n     extern function string trim_path(\nstring path,\n int num_dots = 1,\n bit remove_leading_scope = 0);    "
    },
    "anvm_log :: error": {
        "prefix": [
            "error",
            "function:error -> anvm_log"
        ],
        "body": [
            "error(${1:msg}, ${2:f});"
        ],
        "description": "[Class:anvm_log]\n     extern virtual function void error              (\nstring msg = \"\",\n avery_data_base f=null);    "
    },
    "anvm_log :: fatal": {
        "prefix": [
            "fatal",
            "function:fatal -> anvm_log"
        ],
        "body": [
            "fatal(${1:msg}, ${2:msg2});"
        ],
        "description": "[Class:anvm_log]\n     extern virtual function void fatal              (\nstring msg,\n string msg2 = \"\");    "
    },
    "anvm_log :: trigger": {
        "prefix": [
            "trigger",
            "function:trigger -> anvm_log"
        ],
        "body": [
            "trigger(${1:idname});"
        ],
        "description": "[Class:anvm_log]\n     extern virtual function void trigger            (\nstring idname);    "
    },
    "anvm_log :: set_global_severity": {
        "prefix": [
            "set_global_severity",
            "function:set_global_severity -> anvm_log"
        ],
        "body": [
            "set_global_severity(${1:idname}, ${2:v});"
        ],
        "description": "[Class:anvm_log]\n     extern virtual function void set_global_severity(\nstring idname,\n anvm_severity v);    "
    },
    "anvm_log :: set_severity": {
        "prefix": [
            "set_severity",
            "function:set_severity -> anvm_log"
        ],
        "body": [
            "set_severity(${1:idname}, ${2:v});"
        ],
        "description": "[Class:anvm_log]\n     extern virtual function void set_severity       (\nstring idname,\n anvm_severity v);    "
    },
    "anvm_log :: info": {
        "prefix": [
            "info",
            "function:info -> anvm_log"
        ],
        "body": [
            "info(${1:msg}, ${2:line_breaks_prefix});"
        ],
        "description": "[Class:anvm_log]\n     extern virtual function void info               (\nstring msg=\"\",\n int line_breaks_prefix=0);       "
    },
    "anvm_log :: warn": {
        "prefix": [
            "warn",
            "function:warn -> anvm_log"
        ],
        "body": [
            "warn(${1:msg});"
        ],
        "description": "[Class:anvm_log]\n     extern virtual function void warn               (\nstring msg=\"\");                                 "
    },
    "anvm_log :: assertion": {
        "prefix": [
            "assertion",
            "function:assertion -> anvm_log"
        ],
        "body": [
            "assertion(${1:idname}, ${2:msg});"
        ],
        "description": "[Class:anvm_log]\n     extern virtual function void assertion          (\nstring idname,\n string msg=\"\");                  "
    },
    "anvm_log :: asst": {
        "prefix": [
            "asst",
            "function:asst -> anvm_log"
        ],
        "body": [
            "asst(${1:idname}, ${2:msg}, ${3:f});"
        ],
        "description": "[Class:anvm_log]\n     extern virtual function void asst               (\nstring idname,\n string msg=\"\",\n avery_data_base f=null);       "
    },
    "anvm_log :: usage": {
        "prefix": [
            "usage",
            "function:usage -> anvm_log"
        ],
        "body": [
            "usage(${1:msg}, ${2:is_finish});"
        ],
        "description": "[Class:anvm_log]\n     extern virtual function void usage              (\nstring msg,\n int is_finish=1);                   "
    },
    "anvm_log :: is_fired": {
        "prefix": [
            "is_fired",
            "function:is_fired -> anvm_log"
        ],
        "body": [
            "is_fired(${1:idname});"
        ],
        "description": "[Class:anvm_log]\n     extern virtual function bit  is_fired           (\nstring idname );                                "
    },
    "anvm_log :: coverage_rpt": {
        "prefix": [
            "coverage_rpt",
            "function:coverage_rpt -> anvm_log"
        ],
        "body": [
            "coverage_rpt(${1:filename});"
        ],
        "description": "[Class:anvm_log]\n     extern virtual function void coverage_rpt       (\nstring filename=\"\");    "
    },
    "anvm_log :: message_control": {
        "prefix": [
            "message_control",
            "function:message_control -> anvm_log"
        ],
        "body": [
            "message_control(${1:s}, ${2:is_enable});"
        ],
        "description": "[Class:anvm_log]\n     function void message_control(\nstring s,\n bit is_enable);    "
    },
    "anvm_log :: disable_info": {
        "prefix": [
            "disable_info",
            "function:disable_info -> anvm_log"
        ],
        "body": [
            "disable_info(${0:});"
        ],
        "description": "[Class:anvm_log]\n     function void disable_info(\n);    "
    },
    "anvm_log :: enable_info": {
        "prefix": [
            "enable_info",
            "function:enable_info -> anvm_log"
        ],
        "body": [
            "enable_info(${0:});"
        ],
        "description": "[Class:anvm_log]\n     function void enable_info(\n);    "
    },
    "anvm_log :: step": {
        "prefix": [
            "step",
            "function:step -> anvm_log"
        ],
        "body": [
            "step(${1:msg});"
        ],
        "description": "[Class:anvm_log]\n     extern function void step   (\nstring msg);    "
    },
    "anvm_log :: substep": {
        "prefix": [
            "substep",
            "function:substep -> anvm_log"
        ],
        "body": [
            "substep(${1:msg});"
        ],
        "description": "[Class:anvm_log]\n     extern function void substep(\nstring msg);    "
    },
    "anvm_log :: add_mirror": {
        "prefix": [
            "add_mirror",
            "function:add_mirror -> anvm_log"
        ],
        "body": [
            "add_mirror(${1:log});"
        ],
        "description": "[Class:anvm_log]\n     extern function void add_mirror(\nanvm_log log);    "
    },
    "anvm_log :: track_mirrored_logs": {
        "prefix": [
            "track_mirrored_logs",
            "function:track_mirrored_logs -> anvm_log"
        ],
        "body": [
            "track_mirrored_logs(${1:msg});"
        ],
        "description": "[Class:anvm_log]\n     extern function void track_mirrored_logs(\nref string msg);    "
    },
    "anvm_directive_param_identify": {
        "prefix": "anvm_directive_param_identify",
        "body": [
            "anvm_directive_param_identify  ${0:name_class};"
        ],
        "description": "class anvm_directive_param_identify extends anvm_istruct_base;\n"
    },
    "anvm_directive_param_identify :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_directive_param_identify"
        ],
        "body": [
            "new(${1:log}, ${2:spec_revision}, ${3:over_fabrics});"
        ],
        "description": "[Class:anvm_directive_param_identify]\n     extern function new(\nanvm_log log = null,\n int spec_revision=13,\n bit over_fabrics = 0);    "
    },
    "anvm_directive_param_identify :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_directive_param_identify"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_directive_param_identify]\n     extern virtual function void pack(\n);    "
    },
    "anvm_directive_param_identify :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_directive_param_identify"
        ],
        "body": [
            "unpack(${1:va});"
        ],
        "description": "[Class:anvm_directive_param_identify]\n     extern virtual function void unpack(\nbit       va      );    "
    },
    "anvm_directive_param_identify :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_directive_param_identify"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_directive_param_identify]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_directive_param_stream": {
        "prefix": "anvm_directive_param_stream",
        "body": [
            "anvm_directive_param_stream  ${0:name_class};"
        ],
        "description": "class anvm_directive_param_stream extends anvm_istruct_base;\n"
    },
    "anvm_directive_param_stream :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_directive_param_stream"
        ],
        "body": [
            "new(${1:log}, ${2:spec_revision}, ${3:over_fabrics});"
        ],
        "description": "[Class:anvm_directive_param_stream]\n     extern function new(\nanvm_log log = null,\n int spec_revision=13,\n bit over_fabrics = 0);    "
    },
    "anvm_directive_param_stream :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_directive_param_stream"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_directive_param_stream]\n     extern virtual function void pack(\n);    "
    },
    "anvm_directive_param_stream :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_directive_param_stream"
        ],
        "body": [
            "unpack(${1:va});"
        ],
        "description": "[Class:anvm_directive_param_stream]\n     extern virtual function void unpack(\nbit       va      );    "
    },
    "anvm_directive_param_stream :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_directive_param_stream"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_directive_param_stream]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_cpl_entry": {
        "prefix": "anvm_cpl_entry",
        "body": [
            "anvm_cpl_entry  ${0:name_class};"
        ],
        "description": "class anvm_cpl_entry extends anvm_q_entry;\n"
    },
    "anvm_cpl_entry :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_cpl_entry"
        ],
        "body": [
            "new(${1:kind}, ${2:entry_in_dw});"
        ],
        "description": "[Class:anvm_cpl_entry]\n     function new(\n`avery_strname  anvm_cmd_e kind = ANVM_CMD_unknown,\n int entry_in_dw = 4);    "
    },
    "anvm_cpl_entry :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_cpl_entry"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_cpl_entry]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_cpl_entry :: sprint_track": {
        "prefix": [
            "sprint_track",
            "function:sprint_track -> anvm_cpl_entry"
        ],
        "body": [
            "sprint_track(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_cpl_entry]\n     extern virtual function string sprint_track(\nint verbosity = 0,\n string prefix=\"\");    "
    },
    "anvm_cpl_entry :: sprint_dw": {
        "prefix": [
            "sprint_dw",
            "function:sprint_dw -> anvm_cpl_entry"
        ],
        "body": [
            "sprint_dw(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_cpl_entry]\n     extern virtual function string sprint_dw(\nint verbosity = 0,\n string prefix=\"\");    "
    },
    "anvm_cpl_entry :: sprint_status": {
        "prefix": [
            "sprint_status",
            "function:sprint_status -> anvm_cpl_entry"
        ],
        "body": [
            "sprint_status(${0:});"
        ],
        "description": "[Class:anvm_cpl_entry]\n     extern virtual function string sprint_status(\n);    "
    },
    "anvm_cpl_entry :: sprint_diff": {
        "prefix": [
            "sprint_diff",
            "function:sprint_diff -> anvm_cpl_entry"
        ],
        "body": [
            "sprint_diff(${1:to});"
        ],
        "description": "[Class:anvm_cpl_entry]\n     extern virtual function string sprint_diff(\ninput anvm_cpl_entry to);    "
    },
    "anvm_cpl_entry :: copy": {
        "prefix": [
            "copy",
            "function:copy -> anvm_cpl_entry"
        ],
        "body": [
            "copy(${1:to});"
        ],
        "description": "[Class:anvm_cpl_entry]\n     extern function anvm_cpl_entry copy(\nanvm_cpl_entry to = null);    "
    },
    "anvm_cpl_entry :: is_success": {
        "prefix": [
            "is_success",
            "function:is_success -> anvm_cpl_entry"
        ],
        "body": [
            "is_success(${0:});"
        ],
        "description": "[Class:anvm_cpl_entry]\n     virtual function bit is_success(\n);    "
    },
    "anvm_istruct_ng": {
        "prefix": "anvm_istruct_ng",
        "body": [
            "anvm_istruct_ng  ${0:name_class};"
        ],
        "description": "class anvm_istruct_ng extends anvm_istruct_base;\n"
    },
    "anvm_istruct_ng :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_istruct_ng"
        ],
        "body": [
            "new(${1:log}, ${2:over_fabrics});"
        ],
        "description": "[Class:anvm_istruct_ng]\n     extern function new(\nanvm_log log = null,\n bit over_fabrics = 0);    "
    },
    "anvm_istruct_ng :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_istruct_ng"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_istruct_ng]\n     extern virtual function void pack(\n);    "
    },
    "anvm_istruct_ng :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_istruct_ng"
        ],
        "body": [
            "unpack(${1:va});"
        ],
        "description": "[Class:anvm_istruct_ng]\n     extern virtual function void unpack(\nbit       va      );    "
    },
    "anvm_istruct_ng :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_istruct_ng"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_istruct_ng]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_istruct_ns_csi1": {
        "prefix": "anvm_istruct_ns_csi1",
        "body": [
            "anvm_istruct_ns_csi1  ${0:name_class};"
        ],
        "description": "class anvm_istruct_ns_csi1 extends anvm_istruct_base;\n"
    },
    "anvm_istruct_ns_csi1 :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_istruct_ns_csi1"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_istruct_ns_csi1]\n     extern virtual function void pack(\n);    "
    },
    "anvm_istruct_ns_csi1 :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_istruct_ns_csi1"
        ],
        "body": [
            "unpack(${1:va});"
        ],
        "description": "[Class:anvm_istruct_ns_csi1]\n     extern virtual function void unpack(\nbit       va      );    "
    },
    "anvm_istruct_ns_csi1 :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_istruct_ns_csi1"
        ],
        "body": [
            "new(${1:log}, ${2:nsid}, ${3:lba_fmt_idx});"
        ],
        "description": "[Class:anvm_istruct_ns_csi1]\n     extern function new(\nanvm_log log = null,\n int nsid = -1,\n bit       lba_fmt_idx = 0);    "
    },
    "anvm_istruct_ns_csi1 :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_istruct_ns_csi1"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_istruct_ns_csi1]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_istruct_ns_csi1 :: get_key_max_length": {
        "prefix": [
            "get_key_max_length",
            "function:get_key_max_length -> anvm_istruct_ns_csi1"
        ],
        "body": [
            "get_key_max_length(${0:});"
        ],
        "description": "[Class:anvm_istruct_ns_csi1]\n     extern virtual function avery_u64 get_key_max_length(\n);         "
    },
    "anvm_istruct_ns_csi1 :: get_value_max_length": {
        "prefix": [
            "get_value_max_length",
            "function:get_value_max_length -> anvm_istruct_ns_csi1"
        ],
        "body": [
            "get_value_max_length(${0:});"
        ],
        "description": "[Class:anvm_istruct_ns_csi1]\n     extern virtual function avery_u64 get_value_max_length(\n);       "
    },
    "anvm_ns_descriptor": {
        "prefix": "anvm_ns_descriptor",
        "body": [
            "anvm_ns_descriptor  ${0:name_class};"
        ],
        "description": "class anvm_ns_descriptor;\n"
    },
    "anvm_ns_descriptor :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_ns_descriptor"
        ],
        "body": [
            "new(${1:identifier_type});"
        ],
        "description": "[Class:anvm_ns_descriptor]\n     function new(\nbit       identifier_type);    "
    },
    "anvm_ns_descriptor :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_ns_descriptor"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_ns_descriptor]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_istruct_ns_descriptor": {
        "prefix": "anvm_istruct_ns_descriptor",
        "body": [
            "anvm_istruct_ns_descriptor  ${0:name_class};"
        ],
        "description": "class anvm_istruct_ns_descriptor extends anvm_istruct_base;\n"
    },
    "anvm_istruct_ns_descriptor :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_istruct_ns_descriptor"
        ],
        "body": [
            "new(${1:log}, ${2:spec_revision}, ${3:over_fabrics});"
        ],
        "description": "[Class:anvm_istruct_ns_descriptor]\n     function new(\nanvm_log log = null,\n int spec_revision=12,\n bit over_fabrics = 0);    "
    },
    "anvm_istruct_ns_descriptor :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_istruct_ns_descriptor"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_istruct_ns_descriptor]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_fabric_fake": {
        "prefix": "anvm_fabric_fake",
        "body": [
            "anvm_fabric_fake  ${0:name_class};"
        ],
        "description": "class anvm_fabric_fake;\n"
    },
    "anvm_prplist_segment": {
        "prefix": "anvm_prplist_segment",
        "body": [
            "anvm_prplist_segment  ${0:name_class};"
        ],
        "description": "class anvm_prplist_segment;\n"
    },
    "anvm_prplist_segment :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_prplist_segment"
        ],
        "body": [
            "new(${1:base});"
        ],
        "description": "[Class:anvm_prplist_segment]\n     function new(\navery_u64 base);    "
    },
    "anvm_prplist_segment :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_prplist_segment"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_prplist_segment]\n     extern function string sprint(\nint verbosity = 0,\n string prefix =\"\\t\");    "
    },
    "anvm_prplist_segment :: copy": {
        "prefix": [
            "copy",
            "function:copy -> anvm_prplist_segment"
        ],
        "body": [
            "copy(${0:});"
        ],
        "description": "[Class:anvm_prplist_segment]\n     extern function anvm_prplist_segment copy(\n);    "
    },
    "anvm_prplist": {
        "prefix": "anvm_prplist",
        "body": [
            "anvm_prplist  ${0:name_class};"
        ],
        "description": "class anvm_prplist extends anvm_data_base;\n"
    },
    "anvm_prplist :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_prplist"
        ],
        "body": [
            "new(${1:log}, ${2:page_size}, ${3:total_dwords}, ${4:first_prp_offset}, ${5:first_prpList_offset});"
        ],
        "description": "[Class:anvm_prplist]\n     extern function new(\n    anvm_log   log = null,\n     avery_u64  page_size = 0,\n    avery_u64  total_dwords = 0,\n    avery_u32  first_prp_offset = 0,\n    avery_u32  first_prpList_offset = 0);    "
    },
    "anvm_prplist :: collect_prps": {
        "prefix": [
            "collect_prps",
            "function:collect_prps -> anvm_prplist"
        ],
        "body": [
            "collect_prps(${1:r});"
        ],
        "description": "[Class:anvm_prplist]\n     extern function void collect_prps(\nref avery_u64 r      );    "
    },
    "anvm_prplist :: collect_data_blks": {
        "prefix": [
            "collect_data_blks",
            "function:collect_data_blks -> anvm_prplist"
        ],
        "body": [
            "collect_data_blks(${1:blks});"
        ],
        "description": "[Class:anvm_prplist]\n     extern function void collect_data_blks(\nref anvm_addr_range_t blks      );    "
    },
    "anvm_prplist :: get_num_segments": {
        "prefix": [
            "get_num_segments",
            "function:get_num_segments -> anvm_prplist"
        ],
        "body": [
            "get_num_segments(${0:});"
        ],
        "description": "[Class:anvm_prplist]\n     extern function avery_u64 get_num_segments(\n);    "
    },
    "anvm_prplist :: get_num_prps": {
        "prefix": [
            "get_num_prps",
            "function:get_num_prps -> anvm_prplist"
        ],
        "body": [
            "get_num_prps(${0:});"
        ],
        "description": "[Class:anvm_prplist]\n     extern function avery_u64 get_num_prps(\n);    "
    },
    "anvm_prplist :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_prplist"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_prplist]\n     extern function string sprint(\nint verbosity = 0,\n string prefix=\"\");    "
    },
    "anvm_prplist :: allocate_prplist": {
        "prefix": [
            "allocate_prplist",
            "function:allocate_prplist -> anvm_prplist"
        ],
        "body": [
            "allocate_prplist(${1:mm}, ${2:range_start}, ${3:range_limit});"
        ],
        "description": "[Class:anvm_prplist]\n     extern virtual function bit allocate_prplist(\n anvm_memory_mgr mm         ,\n                                                  bit             range_start = 0,\n                                                  bit             range_limit = 0 );    "
    },
    "anvm_istruct_ns_csi0": {
        "prefix": "anvm_istruct_ns_csi0",
        "body": [
            "anvm_istruct_ns_csi0  ${0:name_class};"
        ],
        "description": "class anvm_istruct_ns_csi0 extends anvm_istruct_base;\n"
    },
    "anvm_istruct_ns_csi0 :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_istruct_ns_csi0"
        ],
        "body": [
            "new(${1:log}, ${2:over_fabrics});"
        ],
        "description": "[Class:anvm_istruct_ns_csi0]\n     extern function new(\nanvm_log log = null,\n bit over_fabrics = 0);    "
    },
    "anvm_istruct_ns_csi0 :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_istruct_ns_csi0"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_istruct_ns_csi0]\n     extern virtual function void pack(\n);    "
    },
    "anvm_istruct_ns_csi0 :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_istruct_ns_csi0"
        ],
        "body": [
            "unpack(${1:va});"
        ],
        "description": "[Class:anvm_istruct_ns_csi0]\n     extern virtual function void unpack(\nbit       va      );    "
    },
    "anvm_istruct_ns_csi0 :: get_protect_info_fmt": {
        "prefix": [
            "get_protect_info_fmt",
            "function:get_protect_info_fmt -> anvm_istruct_ns_csi0"
        ],
        "body": [
            "get_protect_info_fmt(${0:});"
        ],
        "description": "[Class:anvm_istruct_ns_csi0]\n     extern virtual function bit       get_protect_info_fmt(\n);     "
    },
    "anvm_istruct_ns_csi0 :: get_storage_tag_size": {
        "prefix": [
            "get_storage_tag_size",
            "function:get_storage_tag_size -> anvm_istruct_ns_csi0"
        ],
        "body": [
            "get_storage_tag_size(${0:});"
        ],
        "description": "[Class:anvm_istruct_ns_csi0]\n     extern virtual function bit       get_storage_tag_size(\n);     "
    },
    "anvm_istruct_ns_csi0 :: get_ref_tag_size": {
        "prefix": [
            "get_ref_tag_size",
            "function:get_ref_tag_size -> anvm_istruct_ns_csi0"
        ],
        "body": [
            "get_ref_tag_size(${0:});"
        ],
        "description": "[Class:anvm_istruct_ns_csi0]\n     extern virtual function bit       get_ref_tag_size(\n);         "
    },
    "anvm_istruct_ns_csi0 :: get_storage_tag_mask": {
        "prefix": [
            "get_storage_tag_mask",
            "function:get_storage_tag_mask -> anvm_istruct_ns_csi0"
        ],
        "body": [
            "get_storage_tag_mask(${0:});"
        ],
        "description": "[Class:anvm_istruct_ns_csi0]\n     extern virtual function avery_u64 get_storage_tag_mask(\n);       "
    },
    "anvm_istruct_ns_csi0 :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_istruct_ns_csi0"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_istruct_ns_csi0]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_istruct_ns": {
        "prefix": "anvm_istruct_ns",
        "body": [
            "anvm_istruct_ns  ${0:name_class};"
        ],
        "description": "class anvm_istruct_ns extends anvm_istruct_base;\n"
    },
    "anvm_istruct_ns :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_istruct_ns"
        ],
        "body": [
            "new(${1:log}, ${2:nsid}, ${3:over_fabrics});"
        ],
        "description": "[Class:anvm_istruct_ns]\n     extern function new(\nanvm_log log = null,\n int nsid = -1,\n bit over_fabrics = 0);    "
    },
    "anvm_istruct_ns :: get_lba_size": {
        "prefix": [
            "get_lba_size",
            "function:get_lba_size -> anvm_istruct_ns"
        ],
        "body": [
            "get_lba_size(${0:});"
        ],
        "description": "[Class:anvm_istruct_ns]\n     extern virtual function avery_u64 get_lba_size(\n);         "
    },
    "anvm_istruct_ns :: get_lba_size_dw": {
        "prefix": [
            "get_lba_size_dw",
            "function:get_lba_size_dw -> anvm_istruct_ns"
        ],
        "body": [
            "get_lba_size_dw(${0:});"
        ],
        "description": "[Class:anvm_istruct_ns]\n     extern virtual function avery_u64 get_lba_size_dw(\n);       "
    },
    "anvm_istruct_ns :: get_metadata_size": {
        "prefix": [
            "get_metadata_size",
            "function:get_metadata_size -> anvm_istruct_ns"
        ],
        "body": [
            "get_metadata_size(${0:});"
        ],
        "description": "[Class:anvm_istruct_ns]\n     extern virtual function avery_u64 get_metadata_size(\n);          "
    },
    "anvm_istruct_ns :: get_metadata_size_dw": {
        "prefix": [
            "get_metadata_size_dw",
            "function:get_metadata_size_dw -> anvm_istruct_ns"
        ],
        "body": [
            "get_metadata_size_dw(${0:});"
        ],
        "description": "[Class:anvm_istruct_ns]\n     extern virtual function avery_u64 get_metadata_size_dw(\n);       "
    },
    "anvm_istruct_ns :: metadata_in_lba": {
        "prefix": [
            "metadata_in_lba",
            "function:metadata_in_lba -> anvm_istruct_ns"
        ],
        "body": [
            "metadata_in_lba(${0:});"
        ],
        "description": "[Class:anvm_istruct_ns]\n     extern virtual function bit       metadata_in_lba(\n);        "
    },
    "anvm_istruct_ns :: check_rsvd_fields": {
        "prefix": [
            "check_rsvd_fields",
            "function:check_rsvd_fields -> anvm_istruct_ns"
        ],
        "body": [
            "check_rsvd_fields(${1:cmd});"
        ],
        "description": "[Class:anvm_istruct_ns]\n     extern virtual function bit       check_rsvd_fields(\nanvm_cmd_entry cmd = null);    "
    },
    "anvm_istruct_ns :: get_lba_format_id": {
        "prefix": [
            "get_lba_format_id",
            "function:get_lba_format_id -> anvm_istruct_ns"
        ],
        "body": [
            "get_lba_format_id(${0:});"
        ],
        "description": "[Class:anvm_istruct_ns]\n     extern virtual function int       get_lba_format_id(\n);        "
    },
    "anvm_istruct_ns :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_istruct_ns"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_istruct_ns]\n     extern virtual function void pack(\n);    "
    },
    "anvm_istruct_ns :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_istruct_ns"
        ],
        "body": [
            "unpack(${1:va});"
        ],
        "description": "[Class:anvm_istruct_ns]\n     extern virtual function void unpack(\nbit       va      );    "
    },
    "anvm_istruct_ns :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_istruct_ns"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_istruct_ns]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_istruct_ns :: sprint_ns_mng": {
        "prefix": [
            "sprint_ns_mng",
            "function:sprint_ns_mng -> anvm_istruct_ns"
        ],
        "body": [
            "sprint_ns_mng(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_istruct_ns]\n     extern virtual function string sprint_ns_mng(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_istruct_ns :: is_zero_filled": {
        "prefix": [
            "is_zero_filled",
            "function:is_zero_filled -> anvm_istruct_ns"
        ],
        "body": [
            "is_zero_filled(${0:});"
        ],
        "description": "[Class:anvm_istruct_ns]\n     virtual function bit is_zero_filled(\n);    "
    },
    "anvm_persist_event_format_base": {
        "prefix": "anvm_persist_event_format_base",
        "body": [
            "anvm_persist_event_format_base  ${0:name_class};"
        ],
        "description": "class anvm_persist_event_format_base extends anvm_data_base;\n"
    },
    "anvm_smart_snapshot_event_format": {
        "prefix": "anvm_smart_snapshot_event_format",
        "body": [
            "anvm_smart_snapshot_event_format  ${0:name_class};"
        ],
        "description": "class anvm_smart_snapshot_event_format extends anvm_persist_event_format_base;\n"
    },
    "anvm_fw_ci_event_format": {
        "prefix": "anvm_fw_ci_event_format",
        "body": [
            "anvm_fw_ci_event_format  ${0:name_class};"
        ],
        "description": "class anvm_fw_ci_event_format extends anvm_persist_event_format_base;\n"
    },
    "anvm_timestamp_event_format": {
        "prefix": "anvm_timestamp_event_format",
        "body": [
            "anvm_timestamp_event_format  ${0:name_class};"
        ],
        "description": "class anvm_timestamp_event_format extends anvm_persist_event_format_base;\n"
    },
    "anvm_reset_event_format": {
        "prefix": "anvm_reset_event_format",
        "body": [
            "anvm_reset_event_format  ${0:name_class};"
        ],
        "description": "class anvm_reset_event_format extends anvm_persist_event_format_base;\n"
    },
    "anvm_hardware_err_event_format": {
        "prefix": "anvm_hardware_err_event_format",
        "body": [
            "anvm_hardware_err_event_format  ${0:name_class};"
        ],
        "description": "class anvm_hardware_err_event_format extends anvm_persist_event_format_base;\n"
    },
    "anvm_change_ns_event_format": {
        "prefix": "anvm_change_ns_event_format",
        "body": [
            "anvm_change_ns_event_format  ${0:name_class};"
        ],
        "description": "class anvm_change_ns_event_format extends anvm_persist_event_format_base;\n"
    },
    "anvm_format_nvm_start_event_format": {
        "prefix": "anvm_format_nvm_start_event_format",
        "body": [
            "anvm_format_nvm_start_event_format  ${0:name_class};"
        ],
        "description": "class anvm_format_nvm_start_event_format extends anvm_persist_event_format_base;\n"
    },
    "anvm_format_nvm_cpl_event_format": {
        "prefix": "anvm_format_nvm_cpl_event_format",
        "body": [
            "anvm_format_nvm_cpl_event_format  ${0:name_class};"
        ],
        "description": "class anvm_format_nvm_cpl_event_format extends anvm_persist_event_format_base;\n"
    },
    "anvm_sanitize_start_event_format": {
        "prefix": "anvm_sanitize_start_event_format",
        "body": [
            "anvm_sanitize_start_event_format  ${0:name_class};"
        ],
        "description": "class anvm_sanitize_start_event_format extends anvm_persist_event_format_base;\n"
    },
    "anvm_sanitize_cpl_event_format": {
        "prefix": "anvm_sanitize_cpl_event_format",
        "body": [
            "anvm_sanitize_cpl_event_format  ${0:name_class};"
        ],
        "description": "class anvm_sanitize_cpl_event_format extends anvm_persist_event_format_base;\n"
    },
    "anvm_logpage_discovery_entry": {
        "prefix": "anvm_logpage_discovery_entry",
        "body": [
            "anvm_logpage_discovery_entry  ${0:name_class};"
        ],
        "description": "class anvm_logpage_discovery_entry extends anvm_data_base;\n"
    },
    "anvm_logpage_discovery_entry :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_logpage_discovery_entry"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_logpage_discovery_entry]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_logpage": {
        "prefix": "anvm_logpage",
        "body": [
            "anvm_logpage  ${0:name_class};"
        ],
        "description": "class anvm_logpage extends anvm_data_base;\n"
    },
    "anvm_logpage :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_logpage"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_logpage]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_logpage_endur_grp_logpg": {
        "prefix": "anvm_logpage_endur_grp_logpg",
        "body": [
            "anvm_logpage_endur_grp_logpg  ${0:name_class};"
        ],
        "description": "class anvm_logpage_endur_grp_logpg extends anvm_logpage;\n"
    },
    "anvm_logpage_change_zone_list": {
        "prefix": "anvm_logpage_change_zone_list",
        "body": [
            "anvm_logpage_change_zone_list  ${0:name_class};"
        ],
        "description": "class anvm_logpage_change_zone_list extends anvm_logpage;\n"
    },
    "anvm_logpage_change_zone_list :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_logpage_change_zone_list"
        ],
        "body": [
            "new(${1:name});"
        ],
        "description": "[Class:anvm_logpage_change_zone_list]\n     function new(\nstring name = \"\");    "
    },
    "anvm_logpage_change_zone_list :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_logpage_change_zone_list"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_logpage_change_zone_list]\n     virtual function void pack(\n);    "
    },
    "anvm_logpage_change_zone_list :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_logpage_change_zone_list"
        ],
        "body": [
            "unpack(${0:});"
        ],
        "description": "[Class:anvm_logpage_change_zone_list]\n     virtual function void unpack(\n);    "
    },
    "anvm_logpage_change_zone_list :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_logpage_change_zone_list"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_logpage_change_zone_list]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_logpage_lba_status_info_log": {
        "prefix": "anvm_logpage_lba_status_info_log",
        "body": [
            "anvm_logpage_lba_status_info_log  ${0:name_class};"
        ],
        "description": "class anvm_logpage_lba_status_info_log extends anvm_logpage;\n"
    },
    "anvm_logpage_lba_status_info_log :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_logpage_lba_status_info_log"
        ],
        "body": [
            "new(${1:num_ns});"
        ],
        "description": "[Class:anvm_logpage_lba_status_info_log]\n     function new(\nint num_ns = 0);    "
    },
    "anvm_logpage_lba_status_info_log :: add_elemnt": {
        "prefix": [
            "add_elemnt",
            "function:add_elemnt -> anvm_logpage_lba_status_info_log"
        ],
        "body": [
            "add_elemnt(${1:ns});"
        ],
        "description": "[Class:anvm_logpage_lba_status_info_log]\n     function void add_elemnt(\nanvm_istruct_ns ns);    "
    },
    "anvm_logpage_lba_status_info_log :: init_new_dsptrs": {
        "prefix": [
            "init_new_dsptrs",
            "function:init_new_dsptrs -> anvm_logpage_lba_status_info_log"
        ],
        "body": [
            "init_new_dsptrs(${1:nsid}, ${2:num_dsptr}, ${3:total_lb_left});"
        ],
        "description": "[Class:anvm_logpage_lba_status_info_log]\n     function void init_new_dsptrs(\nint nsid,\n int num_dsptr,\n longint total_lb_left);    "
    },
    "anvm_logpage_lba_status_info_log :: add_new_dsptrs": {
        "prefix": [
            "add_new_dsptrs",
            "function:add_new_dsptrs -> anvm_logpage_lba_status_info_log"
        ],
        "body": [
            "add_new_dsptrs(${1:nsid}, ${2:starting_lba}, ${3:num_of_lb});"
        ],
        "description": "[Class:anvm_logpage_lba_status_info_log]\n     function void add_new_dsptrs(\nint nsid,\n bit        starting_lba,\n int num_of_lb);    "
    },
    "anvm_logpage_lba_status_info_log :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_logpage_lba_status_info_log"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_logpage_lba_status_info_log]\n     virtual function void pack(\n);    "
    },
    "anvm_logpage_lba_status_info_log :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_logpage_lba_status_info_log"
        ],
        "body": [
            "unpack(${0:});"
        ],
        "description": "[Class:anvm_logpage_lba_status_info_log]\n     virtual function void unpack(\n);    "
    },
    "anvm_logpage_lba_status_info_log :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_logpage_lba_status_info_log"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_logpage_lba_status_info_log]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_logpage_err": {
        "prefix": "anvm_logpage_err",
        "body": [
            "anvm_logpage_err  ${0:name_class};"
        ],
        "description": "class anvm_logpage_err extends anvm_logpage;\n"
    },
    "anvm_logpage_err :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_logpage_err"
        ],
        "body": [
            "new(${1:name});"
        ],
        "description": "[Class:anvm_logpage_err]\n     function new(\nstring name = \"\");    "
    },
    "anvm_logpage_err :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_logpage_err"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_logpage_err]\n     virtual function void pack(\n);    "
    },
    "anvm_logpage_err :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_logpage_err"
        ],
        "body": [
            "unpack(${0:});"
        ],
        "description": "[Class:anvm_logpage_err]\n     virtual function void unpack(\n);    "
    },
    "anvm_logpage_err :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_logpage_err"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_logpage_err]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_logpage_err :: check_rsvd_fields": {
        "prefix": [
            "check_rsvd_fields",
            "function:check_rsvd_fields -> anvm_logpage_err"
        ],
        "body": [
            "check_rsvd_fields(${1:cmd});"
        ],
        "description": "[Class:anvm_logpage_err]\n     function check_rsvd_fields(\nanvm_cmd_entry cmd = null);    "
    },
    "anvm_logpage_smart_health": {
        "prefix": "anvm_logpage_smart_health",
        "body": [
            "anvm_logpage_smart_health  ${0:name_class};"
        ],
        "description": "class anvm_logpage_smart_health extends anvm_logpage;\n"
    },
    "anvm_logpage_smart_health :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_logpage_smart_health"
        ],
        "body": [
            "new(${1:name});"
        ],
        "description": "[Class:anvm_logpage_smart_health]\n     function new(\nstring name = \"\");    "
    },
    "anvm_logpage_smart_health :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_logpage_smart_health"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_logpage_smart_health]\n     virtual function void pack(\n);    "
    },
    "anvm_logpage_smart_health :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_logpage_smart_health"
        ],
        "body": [
            "unpack(${0:});"
        ],
        "description": "[Class:anvm_logpage_smart_health]\n     virtual function void unpack(\n);    "
    },
    "anvm_logpage_smart_health :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_logpage_smart_health"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_logpage_smart_health]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_logpage_smart_health :: check_rsvd_fields": {
        "prefix": [
            "check_rsvd_fields",
            "function:check_rsvd_fields -> anvm_logpage_smart_health"
        ],
        "body": [
            "check_rsvd_fields(${1:cmd});"
        ],
        "description": "[Class:anvm_logpage_smart_health]\n     function check_rsvd_fields(\nanvm_cmd_entry cmd = null);    "
    },
    "anvm_logpage_fw_slot": {
        "prefix": "anvm_logpage_fw_slot",
        "body": [
            "anvm_logpage_fw_slot  ${0:name_class};"
        ],
        "description": "class anvm_logpage_fw_slot extends anvm_logpage;\n"
    },
    "anvm_logpage_fw_slot :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_logpage_fw_slot"
        ],
        "body": [
            "new(${1:name});"
        ],
        "description": "[Class:anvm_logpage_fw_slot]\n     function new(\nstring name = \"\");    "
    },
    "anvm_logpage_fw_slot :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_logpage_fw_slot"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_logpage_fw_slot]\n     virtual function void pack(\n);    "
    },
    "anvm_logpage_fw_slot :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_logpage_fw_slot"
        ],
        "body": [
            "unpack(${0:});"
        ],
        "description": "[Class:anvm_logpage_fw_slot]\n     virtual function void unpack(\n);    "
    },
    "anvm_logpage_fw_slot :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_logpage_fw_slot"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_logpage_fw_slot]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_logpage_fw_slot :: check_rsvd_fields": {
        "prefix": [
            "check_rsvd_fields",
            "function:check_rsvd_fields -> anvm_logpage_fw_slot"
        ],
        "body": [
            "check_rsvd_fields(${1:cmd});"
        ],
        "description": "[Class:anvm_logpage_fw_slot]\n     function check_rsvd_fields(\nanvm_cmd_entry cmd = null);    "
    },
    "anvm_logpage_rsvt_notif": {
        "prefix": "anvm_logpage_rsvt_notif",
        "body": [
            "anvm_logpage_rsvt_notif  ${0:name_class};"
        ],
        "description": "class anvm_logpage_rsvt_notif extends anvm_logpage;\n"
    },
    "anvm_logpage_rsvt_notif :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_logpage_rsvt_notif"
        ],
        "body": [
            "new(${1:name});"
        ],
        "description": "[Class:anvm_logpage_rsvt_notif]\n     function new(\nstring name = \"\");    "
    },
    "anvm_logpage_rsvt_notif :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_logpage_rsvt_notif"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_logpage_rsvt_notif]\n     virtual function void pack(\n);    "
    },
    "anvm_logpage_rsvt_notif :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_logpage_rsvt_notif"
        ],
        "body": [
            "unpack(${0:});"
        ],
        "description": "[Class:anvm_logpage_rsvt_notif]\n     virtual function void unpack(\n);    "
    },
    "anvm_logpage_rsvt_notif :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_logpage_rsvt_notif"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_logpage_rsvt_notif]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_logpage_rsvt_notif :: check_rsvd_fields": {
        "prefix": [
            "check_rsvd_fields",
            "function:check_rsvd_fields -> anvm_logpage_rsvt_notif"
        ],
        "body": [
            "check_rsvd_fields(${1:cmd});"
        ],
        "description": "[Class:anvm_logpage_rsvt_notif]\n     function check_rsvd_fields(\nanvm_cmd_entry cmd = null);    "
    },
    "anvm_logpage_sanitize_status": {
        "prefix": "anvm_logpage_sanitize_status",
        "body": [
            "anvm_logpage_sanitize_status  ${0:name_class};"
        ],
        "description": "class anvm_logpage_sanitize_status extends anvm_logpage;\n"
    },
    "anvm_logpage_sanitize_status :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_logpage_sanitize_status"
        ],
        "body": [
            "new(${1:name});"
        ],
        "description": "[Class:anvm_logpage_sanitize_status]\n     function new(\nstring name = \"\");    "
    },
    "anvm_logpage_sanitize_status :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_logpage_sanitize_status"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_logpage_sanitize_status]\n     virtual function void pack(\n);    "
    },
    "anvm_logpage_sanitize_status :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_logpage_sanitize_status"
        ],
        "body": [
            "unpack(${0:});"
        ],
        "description": "[Class:anvm_logpage_sanitize_status]\n     virtual function void unpack(\n);    "
    },
    "anvm_logpage_sanitize_status :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_logpage_sanitize_status"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_logpage_sanitize_status]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_logpage_sanitize_status :: check_rsvd_fields": {
        "prefix": [
            "check_rsvd_fields",
            "function:check_rsvd_fields -> anvm_logpage_sanitize_status"
        ],
        "body": [
            "check_rsvd_fields(${1:cmd});"
        ],
        "description": "[Class:anvm_logpage_sanitize_status]\n     function check_rsvd_fields(\nanvm_cmd_entry cmd = null);    "
    },
    "anvm_logpage_vendor_spec": {
        "prefix": "anvm_logpage_vendor_spec",
        "body": [
            "anvm_logpage_vendor_spec  ${0:name_class};"
        ],
        "description": "class anvm_logpage_vendor_spec extends anvm_logpage;\n"
    },
    "anvm_logpage_vendor_spec :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_logpage_vendor_spec"
        ],
        "body": [
            "new(${1:name});"
        ],
        "description": "[Class:anvm_logpage_vendor_spec]\n     function new(\nstring name = \"\");    "
    },
    "anvm_logpage_vendor_spec :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_logpage_vendor_spec"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_logpage_vendor_spec]\n     virtual function void pack(\n);    "
    },
    "anvm_logpage_vendor_spec :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_logpage_vendor_spec"
        ],
        "body": [
            "unpack(${0:});"
        ],
        "description": "[Class:anvm_logpage_vendor_spec]\n     virtual function void unpack(\n);    "
    },
    "anvm_logpage_vendor_spec :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_logpage_vendor_spec"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_logpage_vendor_spec]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_logpage_dev_selftest": {
        "prefix": "anvm_logpage_dev_selftest",
        "body": [
            "anvm_logpage_dev_selftest  ${0:name_class};"
        ],
        "description": "class anvm_logpage_dev_selftest extends anvm_logpage;\n"
    },
    "anvm_logpage_dev_selftest :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_logpage_dev_selftest"
        ],
        "body": [
            "new(${1:name});"
        ],
        "description": "[Class:anvm_logpage_dev_selftest]\n     function new(\nstring name = \"\");    "
    },
    "anvm_logpage_dev_selftest :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_logpage_dev_selftest"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_logpage_dev_selftest]\n     virtual function void pack(\n);    "
    },
    "anvm_logpage_dev_selftest :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_logpage_dev_selftest"
        ],
        "body": [
            "unpack(${0:});"
        ],
        "description": "[Class:anvm_logpage_dev_selftest]\n     virtual function void unpack(\n);    "
    },
    "anvm_logpage_dev_selftest :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_logpage_dev_selftest"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_logpage_dev_selftest]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_logpage_dev_selftest :: check_rsvd_fields": {
        "prefix": [
            "check_rsvd_fields",
            "function:check_rsvd_fields -> anvm_logpage_dev_selftest"
        ],
        "body": [
            "check_rsvd_fields(${1:cmd});"
        ],
        "description": "[Class:anvm_logpage_dev_selftest]\n     function check_rsvd_fields(\nanvm_cmd_entry cmd = null);    "
    },
    "anvm_logpage_persist_event_log": {
        "prefix": "anvm_logpage_persist_event_log",
        "body": [
            "anvm_logpage_persist_event_log  ${0:name_class};"
        ],
        "description": "class anvm_logpage_persist_event_log extends anvm_logpage;\n"
    },
    "anvm_logpage_persist_event_log :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_logpage_persist_event_log"
        ],
        "body": [
            "new(${1:name}, ${2:ict});"
        ],
        "description": "[Class:anvm_logpage_persist_event_log]\n     function new(\nstring name = \"\",\n anvm_istruct_ct ict = null);    "
    },
    "anvm_logpage_persist_event_log :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_logpage_persist_event_log"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_logpage_persist_event_log]\n     virtual function void pack(\n);    "
    },
    "anvm_logpage_persist_event_log :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_logpage_persist_event_log"
        ],
        "body": [
            "unpack(${0:});"
        ],
        "description": "[Class:anvm_logpage_persist_event_log]\n     virtual function void unpack(\n);    "
    },
    "anvm_logpage_persist_event_log :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_logpage_persist_event_log"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_logpage_persist_event_log]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_logpage_persist_event_log :: check_rsvd_fields": {
        "prefix": [
            "check_rsvd_fields",
            "function:check_rsvd_fields -> anvm_logpage_persist_event_log"
        ],
        "body": [
            "check_rsvd_fields(${1:cmd});"
        ],
        "description": "[Class:anvm_logpage_persist_event_log]\n     function check_rsvd_fields(\nanvm_cmd_entry cmd = null);    "
    },
    "anvm_logpage_discovery": {
        "prefix": "anvm_logpage_discovery",
        "body": [
            "anvm_logpage_discovery  ${0:name_class};"
        ],
        "description": "class anvm_logpage_discovery extends anvm_logpage;\n"
    },
    "anvm_logpage_discovery :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_logpage_discovery"
        ],
        "body": [
            "new(${1:name}, ${2:num_records});"
        ],
        "description": "[Class:anvm_logpage_discovery]\n     function new(\nstring name= \"\",\n int num_records = 0);    "
    },
    "anvm_logpage_discovery :: check_sanity": {
        "prefix": [
            "check_sanity",
            "function:check_sanity -> anvm_logpage_discovery"
        ],
        "body": [
            "check_sanity(${1:log}, ${2:is_fatal});"
        ],
        "description": "[Class:anvm_logpage_discovery]\n     virtual function void check_sanity(\nanvm_log log,\n bit is_fatal = 1);    "
    },
    "anvm_logpage_discovery :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_logpage_discovery"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_logpage_discovery]\n     virtual function void pack(\n);    "
    },
    "anvm_logpage_discovery :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_logpage_discovery"
        ],
        "body": [
            "unpack(${0:});"
        ],
        "description": "[Class:anvm_logpage_discovery]\n     virtual function void unpack(\n);    "
    },
    "anvm_logpage_discovery :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_logpage_discovery"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_logpage_discovery]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_logpage_discovery :: check": {
        "prefix": [
            "check",
            "function:check -> anvm_logpage_discovery"
        ],
        "body": [
            "check(${1:log}, ${2:cmd});"
        ],
        "description": "[Class:anvm_logpage_discovery]\n     virtual function void check(\nanvm_log log,\n anvm_cmd_entry cmd);    "
    },
    "anvm_logpage_chuck_information": {
        "prefix": "anvm_logpage_chuck_information",
        "body": [
            "anvm_logpage_chuck_information  ${0:name_class};"
        ],
        "description": "class anvm_logpage_chuck_information extends anvm_logpage;\n"
    },
    "anvm_logpage_chuck_information :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_logpage_chuck_information"
        ],
        "body": [
            "new(${0:});"
        ],
        "description": "[Class:anvm_logpage_chuck_information]\n     function new(\n);    "
    },
    "anvm_logpage_chuck_information :: init_descriptors": {
        "prefix": [
            "init_descriptors",
            "function:init_descriptors -> anvm_logpage_chuck_information"
        ],
        "body": [
            "init_descriptors(${1:geo_st});"
        ],
        "description": "[Class:anvm_logpage_chuck_information]\n     virtual function void init_descriptors(\nanvm_oc_st_geometry geo_st = null);    "
    },
    "anvm_logpage_chuck_information :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_logpage_chuck_information"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_logpage_chuck_information]\n     virtual function void pack(\n);    "
    },
    "anvm_logpage_chuck_information :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_logpage_chuck_information"
        ],
        "body": [
            "unpack(${0:});"
        ],
        "description": "[Class:anvm_logpage_chuck_information]\n     virtual function void unpack(\n);    "
    },
    "anvm_logpage_chuck_information :: gpc_to_slba": {
        "prefix": [
            "gpc_to_slba",
            "function:gpc_to_slba -> anvm_logpage_chuck_information"
        ],
        "body": [
            "gpc_to_slba(${1:group}, ${2:pu}, ${3:chuck}, ${4:slba});"
        ],
        "description": "[Class:anvm_logpage_chuck_information]\n     virtual function void gpc_to_slba(\ninput int group,\n int pu,\n int chuck,\n output avery_u64 slba);    "
    },
    "anvm_logpage_chuck_information :: slba_to_gpc": {
        "prefix": [
            "slba_to_gpc",
            "function:slba_to_gpc -> anvm_logpage_chuck_information"
        ],
        "body": [
            "slba_to_gpc(${1:slba}, ${2:group}, ${3:pu}, ${4:chuck});"
        ],
        "description": "[Class:anvm_logpage_chuck_information]\n     virtual function void slba_to_gpc(\ninput avery_u64 slba,\n output int group,\n int pu,\n int chuck);    "
    },
    "anvm_logpage_chuck_information :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_logpage_chuck_information"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_logpage_chuck_information]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_memory_mgr": {
        "prefix": "anvm_memory_mgr",
        "body": [
            "anvm_memory_mgr  ${0:name_class};"
        ],
        "description": "class anvm_memory_mgr;\n"
    },
    "anvm_memory_mgr :: malloc_within": {
        "prefix": [
            "malloc_within",
            "function:malloc_within -> anvm_memory_mgr"
        ],
        "body": [
            "malloc_within(${1:page_size}, ${2:num_bytes}, ${3:range_start}, ${4:range_limit}, ${5:base}, ${6:dbg});"
        ],
        "description": "[Class:anvm_memory_mgr]\n extern virtual function bit malloc_within(\ninput  bit        page_size = 0,\ninput  bit        num_bytes,\ninput  bit        range_start,\ninput  bit        range_limit,\noutput bit        base,\ninput  string     dbg = \"\"    );    "
    },
    "anvm_host_software": {
        "prefix": "anvm_host_software",
        "body": [
            "anvm_host_software  ${0:name_class};"
        ],
        "description": "class anvm_host_software extends anvm_driver_base;\n"
    },
    "anvm_host_software :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_host_software"
        ],
        "body": [
            "new(${1:name}, ${2:parent}, ${3:stream_id}, ${4:t});"
        ],
        "description": "[Class:anvm_host_software]\n extern function new(\nstring name,\n`ifdef ANVM_UVMuvm_component   parent    = null,\n`endifint             stream_id = 0,\nanvm_driver_type t         = ANVM_DEV_TYPE_UNKNOWN);    "
    },
    "anvm_host_software :: build": {
        "prefix": [
            "build",
            "function:build -> anvm_host_software"
        ],
        "body": [
            "build(${0:});"
        ],
        "description": "[Class:anvm_host_software]\n virtual function void build(\n);    "
    },
    "anvm_host_software :: my_report": {
        "prefix": [
            "my_report",
            "function:my_report -> anvm_host_software"
        ],
        "body": [
            "my_report(${1:entry}, ${2:verbosity}, ${3:file});"
        ],
        "description": "[Class:anvm_host_software]\n extern function void my_report(\nstring entry,\n int verbosity = 0,\n int file = 0);    "
    },
    "anvm_host_software :: append_callback": {
        "prefix": [
            "append_callback",
            "function:append_callback -> anvm_host_software"
        ],
        "body": [
            "append_callback(${1:cb});"
        ],
        "description": "[Class:anvm_host_software]\n virtual function void append_callback(\nanvm_callbacks cb);    "
    },
    "anvm_host_software :: prepend_callback": {
        "prefix": [
            "prepend_callback",
            "function:prepend_callback -> anvm_host_software"
        ],
        "body": [
            "prepend_callback(${1:cb});"
        ],
        "description": "[Class:anvm_host_software]\n virtual function void prepend_callback(\nanvm_callbacks cb);    "
    },
    "anvm_host_software :: unregister_callback": {
        "prefix": [
            "unregister_callback",
            "function:unregister_callback -> anvm_host_software"
        ],
        "body": [
            "unregister_callback(${1:cb});"
        ],
        "description": "[Class:anvm_host_software]\n virtual function void unregister_callback(\nanvm_callbacks cb);    "
    },
    "anvm_host_software :: track_lecroy_mem_init": {
        "prefix": [
            "track_lecroy_mem_init",
            "function:track_lecroy_mem_init -> anvm_host_software"
        ],
        "body": [
            "track_lecroy_mem_init(${1:msg});"
        ],
        "description": "[Class:anvm_host_software]\n extern function void track_lecroy_mem_init(\nstring msg);                                                                                               "
    },
    "anvm_host_software :: track_lecroy_comment": {
        "prefix": [
            "track_lecroy_comment",
            "function:track_lecroy_comment -> anvm_host_software"
        ],
        "body": [
            "track_lecroy_comment(${1:msg});"
        ],
        "description": "[Class:anvm_host_software]\n extern function void track_lecroy_comment(\nstring msg);    "
    },
    "anvm_host_software :: track_lecroy_cmd": {
        "prefix": [
            "track_lecroy_cmd",
            "function:track_lecroy_cmd -> anvm_host_software"
        ],
        "body": [
            "track_lecroy_cmd(${1:cmd});"
        ],
        "description": "[Class:anvm_host_software]\n extern function void track_lecroy_cmd(\nanvm_cmd_entry cmd);    "
    },
    "anvm_host_software :: track_lecroy_write_ctrler_reg": {
        "prefix": [
            "track_lecroy_write_ctrler_reg",
            "function:track_lecroy_write_ctrler_reg -> anvm_host_software"
        ],
        "body": [
            "track_lecroy_write_ctrler_reg(${1:addr}, ${2:msg}, ${3:v});"
        ],
        "description": "[Class:anvm_host_software]\n extern function void track_lecroy_write_ctrler_reg(\navery_u64 addr,\n string msg = \"\",\n ref avery_u32 v      );    "
    },
    "anvm_host_software :: track_lecroy_config_all": {
        "prefix": [
            "track_lecroy_config_all",
            "function:track_lecroy_config_all -> anvm_host_software"
        ],
        "body": [
            "track_lecroy_config_all(${0:});"
        ],
        "description": "[Class:anvm_host_software]\n extern function void track_lecroy_config_all(\n);    "
    },
    "anvm_host_software :: lecroy_alloc_prp": {
        "prefix": [
            "lecroy_alloc_prp",
            "function:lecroy_alloc_prp -> anvm_host_software"
        ],
        "body": [
            "lecroy_alloc_prp(${1:addr}, ${2:nbytes}, ${3:msg}, ${4:is_create_q});"
        ],
        "description": "[Class:anvm_host_software]\n extern function void lecroy_alloc_prp(\navery_u64 addr,\n int nbytes,\n string msg = \"\",\n bit is_create_q = 0);    "
    },
    "anvm_istruct_ul": {
        "prefix": "anvm_istruct_ul",
        "body": [
            "anvm_istruct_ul  ${0:name_class};"
        ],
        "description": "class anvm_istruct_ul extends anvm_istruct_base;\n"
    },
    "anvm_istruct_ul :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_istruct_ul"
        ],
        "body": [
            "new(${1:log}, ${2:over_fabrics});"
        ],
        "description": "[Class:anvm_istruct_ul]\n     extern function new(\nanvm_log log = null,\n bit over_fabrics = 0);    "
    },
    "anvm_istruct_ul :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_istruct_ul"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_istruct_ul]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix=\"\");    "
    },
    "anvm_istruct_base": {
        "prefix": "anvm_istruct_base",
        "body": [
            "anvm_istruct_base  ${0:name_class};"
        ],
        "description": "class anvm_istruct_base extends anvm_data_base;\n"
    },
    "anvm_istruct_base :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_istruct_base"
        ],
        "body": [
            "new(${1:name});"
        ],
        "description": "[Class:anvm_istruct_base]\n     function new(\nstring name = \"anvm_istruct_base\");    "
    },
    "anvm_istruct_base :: pack": {
        "prefix": [
            "pack",
            "function:pack -> anvm_istruct_base"
        ],
        "body": [
            "pack(${0:});"
        ],
        "description": "[Class:anvm_istruct_base]\n     virtual function void pack(\n);    "
    },
    "anvm_istruct_base :: unpack": {
        "prefix": [
            "unpack",
            "function:unpack -> anvm_istruct_base"
        ],
        "body": [
            "unpack(${1:va});"
        ],
        "description": "[Class:anvm_istruct_base]\n     virtual function void unpack(\nbit       va      );    "
    },
    "anvm_istruct_base :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_istruct_base"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_istruct_base]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_istruct_base :: check": {
        "prefix": [
            "check",
            "function:check -> anvm_istruct_base"
        ],
        "body": [
            "check(${1:log});"
        ],
        "description": "[Class:anvm_istruct_base]\n     virtual function bit check(\nanvm_log log);    "
    },
    "anvm_istruct_base :: copy": {
        "prefix": [
            "copy",
            "function:copy -> anvm_istruct_base"
        ],
        "body": [
            "copy(${1:to});"
        ],
        "description": "[Class:anvm_istruct_base]\n     function void copy(\nanvm_istruct_base to);    "
    },
    "avery_max": {
        "prefix": [
            "avery_max",
            "function:avery_max"
        ],
        "body": [
            "avery_max(${1:i}, ${2:j});"
        ],
        "description": "function automatic bit       avery_max(\nbit       i,\n bit       j);    "
    },
    "avery_min": {
        "prefix": [
            "avery_min",
            "function:avery_min"
        ],
        "body": [
            "avery_min(${1:i}, ${2:j});"
        ],
        "description": "function automatic bit       avery_min(\nbit       i,\n bit       j);    "
    },
    "avery_abs": {
        "prefix": [
            "avery_abs",
            "function:avery_abs"
        ],
        "body": [
            "avery_abs(${1:a});"
        ],
        "description": "function automatic bit       avery_abs(\nint a);    "
    },
    "avery_dw_boundary": {
        "prefix": [
            "avery_dw_boundary",
            "function:avery_dw_boundary"
        ],
        "body": [
            "avery_dw_boundary(${1:offset});"
        ],
        "description": "function avery_u32 avery_dw_boundary(\navery_u32 offset);    "
    },
    "avery_round_to_dw": {
        "prefix": [
            "avery_round_to_dw",
            "function:avery_round_to_dw"
        ],
        "body": [
            "avery_round_to_dw(${1:num_bytes});"
        ],
        "description": "function automatic bit        avery_round_to_dw(\nbit       num_bytes);    "
    },
    "avery_pack_bytes": {
        "prefix": [
            "avery_pack_bytes",
            "function:avery_pack_bytes"
        ],
        "body": [
            "avery_pack_bytes(${1:from}, ${2:to}, ${3:num_bytes}, ${4:start_offset});"
        ],
        "description": "function automatic void avery_pack_bytes(\n        ref    bit        from      ,\n        output bit        to      ,\n        input  bit        num_bytes    = -1,\n             input  bit        start_offset = 0);    "
    },
    "avery_pack_bytes_arr": {
        "prefix": [
            "avery_pack_bytes_arr",
            "function:avery_pack_bytes_arr"
        ],
        "body": [
            "avery_pack_bytes_arr(${1:from}, ${2:to}, ${3:num_bytes}, ${4:start_offset});"
        ],
        "description": "function automatic void avery_pack_bytes_arr(\n        ref    bit        from      ,\n        ref    bit        to      ,\n        input  bit        num_bytes    = -1,\n             input  bit        start_offset = 0    );    "
    },
    "avery_q2a": {
        "prefix": [
            "avery_q2a",
            "function:avery_q2a"
        ],
        "body": [
            "avery_q2a(${1:from}, ${2:to});"
        ],
        "description": "function automatic void avery_q2a(\nref bit       from      ,\n ref bit       to      );    "
    },
    "avery_dwords_to_bytes": {
        "prefix": [
            "avery_dwords_to_bytes",
            "function:avery_dwords_to_bytes"
        ],
        "body": [
            "avery_dwords_to_bytes(${1:dq}, ${2:bq});"
        ],
        "description": "function automatic void avery_dwords_to_bytes(\nref bit       dq      ,\n ref bit       bq      );    "
    },
    "avery_bytes_to_dwords": {
        "prefix": [
            "avery_bytes_to_dwords",
            "function:avery_bytes_to_dwords"
        ],
        "body": [
            "avery_bytes_to_dwords(${1:bq}, ${2:dq});"
        ],
        "description": "function automatic void avery_bytes_to_dwords(\nref bit       bq      ,\n ref bit       dq      );    "
    },
    "avery_ba2va": {
        "prefix": [
            "avery_ba2va",
            "function:avery_ba2va"
        ],
        "body": [
            "avery_ba2va(${1:ba}, ${2:da});"
        ],
        "description": "function automatic void avery_ba2va(\nref bit       ba      ,\n ref bit       da      );    "
    },
    "avery_unpack_dwords": {
        "prefix": [
            "avery_unpack_dwords",
            "function:avery_unpack_dwords"
        ],
        "body": [
            "avery_unpack_dwords(${1:from}, ${2:to});"
        ],
        "description": "function automatic void avery_unpack_dwords(\n        ref  bit        from      ,\n           ref  bit        to      );    "
    },
    "avery_unpack_dwords_arr": {
        "prefix": [
            "avery_unpack_dwords_arr",
            "function:avery_unpack_dwords_arr"
        ],
        "body": [
            "avery_unpack_dwords_arr(${1:from}, ${2:to});"
        ],
        "description": "function automatic void avery_unpack_dwords_arr(\n        ref  bit        from      ,\n            ref  bit        to      );    "
    },
    "avery_va2ba": {
        "prefix": [
            "avery_va2ba",
            "function:avery_va2ba"
        ],
        "body": [
            "avery_va2ba(${1:from}, ${2:to});"
        ],
        "description": "function automatic void avery_va2ba (\n        ref  bit        from      ,\n            ref  bit        to      );    "
    },
    "avery_va2ba_be": {
        "prefix": [
            "avery_va2ba_be",
            "function:avery_va2ba_be"
        ],
        "body": [
            "avery_va2ba_be(${1:from}, ${2:to}, ${3:first_be}, ${4:last_be});"
        ],
        "description": "function automatic void avery_va2ba_be(\n        ref  bit        from      ,\n        ref  bit        to      ,\n        input bit        first_be,\n        input bit        last_be    );    "
    },
    "avery_align_addr": {
        "prefix": [
            "avery_align_addr",
            "function:avery_align_addr"
        ],
        "body": [
            "avery_align_addr(${1:addr}, ${2:n_bytes}, ${3:out_addr}, ${4:n_dwords});"
        ],
        "description": "function void avery_align_addr(\n        input  bit       addr,\n             input  bit       n_bytes,\n        output bit       out_addr,\n        output bit       n_dwords    );    "
    },
    "avery_get_device_id": {
        "prefix": [
            "avery_get_device_id",
            "function:avery_get_device_id"
        ],
        "body": [
            "avery_get_device_id(${0:});"
        ],
        "description": "function automatic avery_u32 avery_get_device_id(\n);    "
    },
    "avery_get_data_id": {
        "prefix": [
            "avery_get_data_id",
            "function:avery_get_data_id"
        ],
        "body": [
            "avery_get_data_id(${0:});"
        ],
        "description": "function automatic avery_u32 avery_get_data_id(\n);    "
    },
    "apqi_get_nvm_id": {
        "prefix": [
            "apqi_get_nvm_id",
            "function:apqi_get_nvm_id"
        ],
        "body": [
            "apqi_get_nvm_id(${0:});"
        ],
        "description": "function automatic avery_u32 apqi_get_nvm_id(\n);    "
    },
    "avery_power_of_two": {
        "prefix": [
            "avery_power_of_two",
            "function:avery_power_of_two"
        ],
        "body": [
            "avery_power_of_two(${1:v});"
        ],
        "description": "function automatic int avery_power_of_two(\nbit       v);       "
    },
    "avery_is_power_of_two": {
        "prefix": [
            "avery_is_power_of_two",
            "function:avery_is_power_of_two"
        ],
        "body": [
            "avery_is_power_of_two(${1:v});"
        ],
        "description": "function bit avery_is_power_of_two(\nbit       v);    "
    },
    "avery_multiple_of": {
        "prefix": [
            "avery_multiple_of",
            "function:avery_multiple_of"
        ],
        "body": [
            "avery_multiple_of(${1:a}, ${2:b});"
        ],
        "description": "function automatic bit       avery_multiple_of(\nbit       a,\n bit       b);    "
    },
    "avery_round_up": {
        "prefix": [
            "avery_round_up",
            "function:avery_round_up"
        ],
        "body": [
            "avery_round_up(${1:a}, ${2:boundary});"
        ],
        "description": "function automatic bit       avery_round_up(\nbit       a,\n bit       boundary);    "
    },
    "avery_two_to_power_of": {
        "prefix": [
            "avery_two_to_power_of",
            "function:avery_two_to_power_of"
        ],
        "body": [
            "avery_two_to_power_of(${1:v});"
        ],
        "description": "function automatic bit       avery_two_to_power_of(\nbit       v);    "
    },
    "avery_multiple_check": {
        "prefix": [
            "avery_multiple_check",
            "function:avery_multiple_check"
        ],
        "body": [
            "avery_multiple_check(${1:a}, ${2:b});"
        ],
        "description": "function automatic bit avery_multiple_check(\nbit       a,\n bit       b);    "
    },
    "avery_is_multiple": {
        "prefix": [
            "avery_is_multiple",
            "function:avery_is_multiple"
        ],
        "body": [
            "avery_is_multiple(${1:a}, ${2:b});"
        ],
        "description": "function automatic bit avery_is_multiple(\nbit       a,\n bit       b);    "
    },
    "avery_distance_to_page": {
        "prefix": [
            "avery_distance_to_page",
            "function:avery_distance_to_page"
        ],
        "body": [
            "avery_distance_to_page(${1:page_size}, ${2:addr});"
        ],
        "description": "function avery_u64 avery_distance_to_page (\navery_u64 page_size,\n avery_u64 addr);    "
    },
    "avery_offset_mask": {
        "prefix": [
            "avery_offset_mask",
            "function:avery_offset_mask"
        ],
        "body": [
            "avery_offset_mask(${1:page_size});"
        ],
        "description": "function bit       avery_offset_mask(\nbit       page_size);    "
    },
    "avery_page_mask": {
        "prefix": [
            "avery_page_mask",
            "function:avery_page_mask"
        ],
        "body": [
            "avery_page_mask(${1:page_size});"
        ],
        "description": "function bit       avery_page_mask(\nbit       page_size);    "
    },
    "avery_page_offset": {
        "prefix": [
            "avery_page_offset",
            "function:avery_page_offset"
        ],
        "body": [
            "avery_page_offset(${1:addr}, ${2:page_size});"
        ],
        "description": "function bit       avery_page_offset(\nbit       addr,\n bit       page_size);    "
    },
    "avery_page_align": {
        "prefix": [
            "avery_page_align",
            "function:avery_page_align"
        ],
        "body": [
            "avery_page_align(${1:addr}, ${2:page_size});"
        ],
        "description": "function bit       avery_page_align(\nbit       addr,\n bit       page_size);    "
    },
    "avery_random64": {
        "prefix": [
            "avery_random64",
            "function:avery_random64"
        ],
        "body": [
            "avery_random64(${1:a}, ${2:b});"
        ],
        "description": "function bit       avery_random64 (\nbit       a,\n bit       b);    "
    },
    "avery_print_dw_array": {
        "prefix": [
            "avery_print_dw_array",
            "function:avery_print_dw_array"
        ],
        "body": [
            "avery_print_dw_array(${1:da}, ${2:len}, ${3:prefix}, ${4:line_break});"
        ],
        "description": "function automatic string avery_print_dw_array(\nref bit       da      ,\n input int len=16,\n string prefix=\"\",\n bit line_break=1);    "
    },
    "avery_print_dw_q": {
        "prefix": [
            "avery_print_dw_q",
            "function:avery_print_dw_q"
        ],
        "body": [
            "avery_print_dw_q(${1:dq}, ${2:len}, ${3:prefix}, ${4:line_break});"
        ],
        "description": "function automatic string avery_print_dw_q(\nref bit       dq      ,\n input int len=16,\n string prefix=\"\",\n bit line_break=1);    "
    },
    "avery_print_u8": {
        "prefix": [
            "avery_print_u8",
            "function:avery_print_u8"
        ],
        "body": [
            "avery_print_u8(${1:b}, ${2:max}, ${3:prefix}, ${4:in_dword});"
        ],
        "description": "function automatic string avery_print_u8(\nref bit       b      ,\n input bit       max = -1,\n string prefix=\"\",\n bit in_dword = 0);    "
    },
    "avery_print_bytes": {
        "prefix": [
            "avery_print_bytes",
            "function:avery_print_bytes"
        ],
        "body": [
            "avery_print_bytes(${1:b}, ${2:max}, ${3:prefix}, ${4:in_dword});"
        ],
        "description": "function automatic string avery_print_bytes(\nref byte b      ,\n input bit       max = -1,\n string prefix=\"\",\n bit in_dword = 0);    "
    },
    "avery_swap_endian": {
        "prefix": [
            "avery_swap_endian",
            "function:avery_swap_endian"
        ],
        "body": [
            "avery_swap_endian(${1:v});"
        ],
        "description": "function bit       avery_swap_endian (\nbit       v);    "
    },
    "avery_dq_2_ba": {
        "prefix": [
            "avery_dq_2_ba",
            "function:avery_dq_2_ba"
        ],
        "body": [
            "avery_dq_2_ba(${1:from}, ${2:to});"
        ],
        "description": "function automatic void avery_dq_2_ba(\n        ref bit        from      ,\n        ref bit        to      );    "
    },
    "avery_hash_list": {
        "prefix": "avery_hash_list",
        "body": [
            "avery_hash_list  ${0:name_class};"
        ],
        "description": "class avery_hash_list #(type T = int, type TKEY = int);\n"
    },
    "avery_hash_list :: new": {
        "prefix": [
            "new",
            "function:new -> avery_hash_list"
        ],
        "body": [
            "new(${0:});"
        ],
        "description": "[Class:avery_hash_list]\n     function new(\n);    "
    },
    "avery_hash_list :: push_back": {
        "prefix": [
            "push_back",
            "function:push_back -> avery_hash_list"
        ],
        "body": [
            "push_back(${1:key}, ${2:v});"
        ],
        "description": "[Class:avery_hash_list]\n     function void push_back(\nTKEY key,\n T v);    "
    },
    "avery_hash_list :: push_front": {
        "prefix": [
            "push_front",
            "function:push_front -> avery_hash_list"
        ],
        "body": [
            "push_front(${1:key}, ${2:v});"
        ],
        "description": "[Class:avery_hash_list]\n     function void push_front(\nTKEY key,\n T v);    "
    },
    "avery_hash_list :: lookup": {
        "prefix": [
            "lookup",
            "function:lookup -> avery_hash_list"
        ],
        "body": [
            "lookup(${1:key});"
        ],
        "description": "[Class:avery_hash_list]\n     function T lookup(\nTKEY key);    "
    },
    "avery_hash_list :: insert": {
        "prefix": [
            "insert",
            "function:insert -> avery_hash_list"
        ],
        "body": [
            "insert(${1:key}, ${2:v});"
        ],
        "description": "[Class:avery_hash_list]\n     function void insert(\nTKEY key,\n T v);    "
    },
    "avery_hash_list :: delete_all": {
        "prefix": [
            "delete_all",
            "function:delete_all -> avery_hash_list"
        ],
        "body": [
            "delete_all(${0:});"
        ],
        "description": "[Class:avery_hash_list]\n     function void delete_all(\n);    "
    },
    "avery_hash_list :: delete": {
        "prefix": [
            "delete",
            "function:delete -> avery_hash_list"
        ],
        "body": [
            "delete(${1:key});"
        ],
        "description": "[Class:avery_hash_list]\n     function void delete(\nTKEY key);    "
    },
    "avery_assertion_item": {
        "prefix": "avery_assertion_item",
        "body": [
            "avery_assertion_item  ${0:name_class};"
        ],
        "description": "class avery_assertion_item;\n"
    },
    "avery_assertion_item :: new": {
        "prefix": [
            "new",
            "function:new -> avery_assertion_item"
        ],
        "body": [
            "new(${1:severity}, ${2:id}, ${3:des}, ${4:cvg_cnt});"
        ],
        "description": "[Class:avery_assertion_item]\n     function new(\navery_severity severity,\n string id,\n string des,\n int cvg_cnt = 0);    "
    },
    "avery_assertion_item :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> avery_assertion_item"
        ],
        "body": [
            "sprint(${1:verbosity});"
        ],
        "description": "[Class:avery_assertion_item]\n     function string sprint(\nint verbosity = 0);    "
    },
    "avery_log_callbacks": {
        "prefix": "avery_log_callbacks",
        "body": [
            "avery_log_callbacks  ${0:name_class};"
        ],
        "description": "virtual class avery_log_callbacks;\n"
    },
    "avery_log_callbacks :: assertion_msg_cb": {
        "prefix": [
            "assertion_msg_cb",
            "function:assertion_msg_cb -> avery_log_callbacks"
        ],
        "body": [
            "assertion_msg_cb(${1:msg}, ${2:is_disable}, ${3:item});"
        ],
        "description": "[Class:avery_log_callbacks]\n     virtual function void assertion_msg_cb(\n                        input string msg,\n                        inout bit is_disable,\n                        ref avery_assertion_item item                    );    "
    },
    "avery_log_callbacks :: error_msg_cb": {
        "prefix": [
            "error_msg_cb",
            "function:error_msg_cb -> avery_log_callbacks"
        ],
        "body": [
            "error_msg_cb(${1:msg}, ${2:is_disable});"
        ],
        "description": "[Class:avery_log_callbacks]\n     virtual function void error_msg_cb(\n                        input string msg,\n                        inout bit is_disable                     );    "
    },
    "avery_log_callbacks :: fatal_msg_cb": {
        "prefix": [
            "fatal_msg_cb",
            "function:fatal_msg_cb -> avery_log_callbacks"
        ],
        "body": [
            "fatal_msg_cb(${1:msg}, ${2:is_disable});"
        ],
        "description": "[Class:avery_log_callbacks]\n     virtual function void fatal_msg_cb(\n                        input string msg,\n                        inout bit is_disable                    );    "
    },
    "avery_user_data": {
        "prefix": "avery_user_data",
        "body": [
            "avery_user_data  ${0:name_class};"
        ],
        "description": "class avery_user_data;\n"
    },
    "avery_data_base": {
        "prefix": "avery_data_base",
        "body": [
            "avery_data_base  ${0:name_class};"
        ],
        "description": "class avery_data_base\n    `ifdef AVERY_OVM\n        extends ovm_sequence_item\n    `elsif AVERY_UVM\n        extends uvm_sequence_item\n    `elsif AVERY_VMM\n        extends vmm_data\n    `endif\n    ;\n"
    },
    "avery_data_base :: new": {
        "prefix": [
            "new",
            "function:new -> avery_data_base"
        ],
        "body": [
            "new(${1:name});"
        ],
        "description": "[Class:avery_data_base]\n     function new(\nstring name = \"avery_data_base\");    "
    },
    "avery_data_base :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> avery_data_base"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:avery_data_base]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "avery_data_base :: copy": {
        "prefix": [
            "copy",
            "function:copy -> avery_data_base"
        ],
        "body": [
            "copy(${1:to});"
        ],
        "description": "[Class:avery_data_base]\n     function avery_data_base copy(\navery_data_base to = null);    "
    },
    "avery_data_base :: sprint_user_str": {
        "prefix": [
            "sprint_user_str",
            "function:sprint_user_str -> avery_data_base"
        ],
        "body": [
            "sprint_user_str(${0:});"
        ],
        "description": "[Class:avery_data_base]\n     virtual function string sprint_user_str(\n);    "
    },
    "avery_data_base :: replace_user_str": {
        "prefix": [
            "replace_user_str",
            "function:replace_user_str -> avery_data_base"
        ],
        "body": [
            "replace_user_str(${1:msg});"
        ],
        "description": "[Class:avery_data_base]\n     virtual function void replace_user_str(\nstring msg);    "
    },
    "avery_data_base :: append_user_str": {
        "prefix": [
            "append_user_str",
            "function:append_user_str -> avery_data_base"
        ],
        "body": [
            "append_user_str(${1:msg});"
        ],
        "description": "[Class:avery_data_base]\n     virtual function void append_user_str(\nstring msg);    "
    },
    "avery_pure_component": {
        "prefix": "avery_pure_component",
        "body": [
            "avery_pure_component  ${0:name_class};"
        ],
        "description": "class avery_pure_component\n    `ifdef AVERY_UVM\n        extends uvm_component\n    `endif\n    ;\n"
    },
    "avery_pure_component :: new": {
        "prefix": [
            "new",
            "function:new -> avery_pure_component"
        ],
        "body": [
            "new(${1:name}, ${2:`endif});"
        ],
        "description": "[Class:avery_pure_component]\n     function new(\n        string name,\n    `ifdef AVERY_UVM        uvm_component        parent = null    `else        avery_pure_component parent = null    `endif        );    "
    },
    "avery_component": {
        "prefix": "avery_component",
        "body": [
            "avery_component  ${0:name_class};"
        ],
        "description": "class avery_component\n    `ifdef AVERY_VMM\n        extends vmm_xactor\n    `elsif AVERY_OVM\n        extends ovm_driver #(avery_data_base)\n              `elsif AVERY_UVM\n        extends uvm_driver #(avery_data_base)\n              `else\n        extends avery_pure_component\n    `endif\n    ;\n"
    },
    "avery_component :: new": {
        "prefix": [
            "new",
            "function:new -> avery_component"
        ],
        "body": [
            "new(${1:name}, ${2:`avery_xvm_parent});"
        ],
        "description": "[Class:avery_component]\n     function new(\n string   name,\n                  `avery_xvm_parent);    "
    },
    "avery_component :: get_name": {
        "prefix": [
            "get_name",
            "function:get_name -> avery_component"
        ],
        "body": [
            "get_name(${0:});"
        ],
        "description": "[Class:avery_component]\n     virtual function string get_name(\n);    "
    },
    "avery_component :: check_result": {
        "prefix": [
            "check_result",
            "function:check_result -> avery_component"
        ],
        "body": [
            "check_result(${1:verbosity});"
        ],
        "description": "[Class:avery_component]\n     virtual function bit check_result(\n int verbosity = 0 );    "
    },
    "avery_component :: end_sim_cb": {
        "prefix": [
            "end_sim_cb",
            "task:end_sim_cb -> avery_component"
        ],
        "body": [
            "end_sim_cb(${1:msg});"
        ],
        "description": "[Class:avery_component]\n     virtual task end_sim_cb(\nstring msg = \"\");    "
    },
    "avery_component :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> avery_component"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:avery_component]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "avery_component :: aprint": {
        "prefix": [
            "aprint",
            "function:aprint -> avery_component"
        ],
        "body": [
            "aprint(${1:file}, ${2:msg}, ${3:id});"
        ],
        "description": "[Class:avery_component]\n     virtual function void aprint(\nint file,\n ref string msg,\n input int id = 0);    "
    },
    "avery_component :: aprint_set_file": {
        "prefix": [
            "aprint_set_file",
            "function:aprint_set_file -> avery_component"
        ],
        "body": [
            "aprint_set_file(${1:file}, ${2:filename});"
        ],
        "description": "[Class:avery_component]\n     virtual function void aprint_set_file(\nint file,\n string filename);    "
    },
    "avery_qlayer_base": {
        "prefix": "avery_qlayer_base",
        "body": [
            "avery_qlayer_base  ${0:name_class};"
        ],
        "description": "class avery_qlayer_base extends avery_component;\n"
    },
    "avery_qlayer_base :: new": {
        "prefix": [
            "new",
            "function:new -> avery_qlayer_base"
        ],
        "body": [
            "new(${1:name}, ${2:`avery_xvm_parent});"
        ],
        "description": "[Class:avery_qlayer_base]\n     function new(\nstring name,\n `avery_xvm_parent);    "
    },
    "avery_mem_model": {
        "prefix": "avery_mem_model",
        "body": [
            "avery_mem_model  ${0:name_class};"
        ],
        "description": "class avery_mem_model #(type T = byte, type T2 = bit[63:0]);\n"
    },
    "avery_mem_model :: new": {
        "prefix": [
            "new",
            "function:new -> avery_mem_model"
        ],
        "body": [
            "new(${1:name}, ${2:log});"
        ],
        "description": "[Class:avery_mem_model]\n     function new(\nstring name,\n avery_log log = null);    "
    },
    "avery_mem_model :: exists": {
        "prefix": [
            "exists",
            "function:exists -> avery_mem_model"
        ],
        "body": [
            "exists(${1:addr});"
        ],
        "description": "[Class:avery_mem_model]\n     function bit exists(\nT2 addr);    "
    },
    "avery_mem_model :: read": {
        "prefix": [
            "read",
            "function:read -> avery_mem_model"
        ],
        "body": [
            "read(${1:addr});"
        ],
        "description": "[Class:avery_mem_model]\n     function T read(\nT2 addr);                                                                                                                                                                     "
    },
    "avery_mem_model :: write": {
        "prefix": [
            "write",
            "function:write -> avery_mem_model"
        ],
        "body": [
            "write(${1:addr}, ${2:data2});"
        ],
        "description": "[Class:avery_mem_model]\n     function void write(\nT2 addr,\n T data2);    "
    },
    "avery_mem_model :: size": {
        "prefix": [
            "size",
            "function:size -> avery_mem_model"
        ],
        "body": [
            "size(${0:});"
        ],
        "description": "[Class:avery_mem_model]\n     function bit       size(\n);    "
    },
    "avery_mem_model :: delete": {
        "prefix": [
            "delete",
            "function:delete -> avery_mem_model"
        ],
        "body": [
            "delete(${1:addr});"
        ],
        "description": "[Class:avery_mem_model]\n     function void delete(\nT2 addr);    "
    },
    "avery_mem_model :: delete_all": {
        "prefix": [
            "delete_all",
            "function:delete_all -> avery_mem_model"
        ],
        "body": [
            "delete_all(${0:});"
        ],
        "description": "[Class:avery_mem_model]\n     function void delete_all(\n);    "
    },
    "avery_seq_base": {
        "prefix": "avery_seq_base",
        "body": [
            "avery_seq_base  ${0:name_class};"
        ],
        "description": "class avery_seq_base extends\n    `ifdef AVERY_UVM\n        uvm_sequence #(avery_data_base);\n"
    },
    "avery_seq_base :: run": {
        "prefix": [
            "run",
            "task:run -> avery_seq_base"
        ],
        "body": [
            "run(${0:});"
        ],
        "description": "[Class:avery_seq_base]\n     virtual task run(\n);    "
    },
    "avery_log": {
        "prefix": "avery_log",
        "body": [
            "avery_log  ${0:name_class};"
        ],
        "description": "class avery_log extends avery_pure_component;\n"
    },
    "avery_log :: new": {
        "prefix": [
            "new",
            "function:new -> avery_log"
        ],
        "body": [
            "new(${1:name}, ${2:`avery_xvm_parent});"
        ],
        "description": "[Class:avery_log]\n     extern function new(\nstring name,\n `avery_xvm_parent);    "
    },
    "avery_log :: error": {
        "prefix": [
            "error",
            "function:error -> avery_log"
        ],
        "body": [
            "error(${1:msg}, ${2:f});"
        ],
        "description": "[Class:avery_log]\n     extern virtual function void error       (\nstring msg = \"\",\n avery_data_base f=null);    "
    },
    "avery_log :: fatal": {
        "prefix": [
            "fatal",
            "function:fatal -> avery_log"
        ],
        "body": [
            "fatal(${1:msg}, ${2:msg2});"
        ],
        "description": "[Class:avery_log]\n     extern virtual function void fatal       (\nstring msg,\n string msg2 = \"\");    "
    },
    "avery_log :: info": {
        "prefix": [
            "info",
            "function:info -> avery_log"
        ],
        "body": [
            "info(${1:msg}, ${2:line_breaks_prefix});"
        ],
        "description": "[Class:avery_log]\n     extern virtual function void info        (\nstring msg=\"\",\n int line_breaks_prefix=0)             ;    "
    },
    "avery_log :: warn": {
        "prefix": [
            "warn",
            "function:warn -> avery_log"
        ],
        "body": [
            "warn(${1:msg});"
        ],
        "description": "[Class:avery_log]\n     extern virtual function void warn        (\nstring msg=\"\");    "
    },
    "avery_log :: asst": {
        "prefix": [
            "asst",
            "function:asst -> avery_log"
        ],
        "body": [
            "asst(${1:idname}, ${2:msg}, ${3:f});"
        ],
        "description": "[Class:avery_log]\n     extern virtual function void asst        (\nstring idname,\n string msg=\"\",\n avery_data_base f=null);    "
    },
    "avery_log :: usage": {
        "prefix": [
            "usage",
            "function:usage -> avery_log"
        ],
        "body": [
            "usage(${1:msg}, ${2:is_finish});"
        ],
        "description": "[Class:avery_log]\n     extern virtual function void usage       (\nstring msg,\n int is_finish=1);    "
    },
    "avery_log :: trigger": {
        "prefix": [
            "trigger",
            "function:trigger -> avery_log"
        ],
        "body": [
            "trigger(${1:idname});"
        ],
        "description": "[Class:avery_log]\n     virtual function void trigger            (\nstring idname);     "
    },
    "avery_log :: set_global_severity": {
        "prefix": [
            "set_global_severity",
            "function:set_global_severity -> avery_log"
        ],
        "body": [
            "set_global_severity(${1:idname}, ${2:v});"
        ],
        "description": "[Class:avery_log]\n     virtual function void set_global_severity(\nstring idname,\n avery_severity v) ;    "
    },
    "avery_log :: set_severity": {
        "prefix": [
            "set_severity",
            "function:set_severity -> avery_log"
        ],
        "body": [
            "set_severity(${1:idname}, ${2:v});"
        ],
        "description": "[Class:avery_log]\n     virtual function void set_severity       (\nstring idname,\n avery_severity v) ;    "
    },
    "avery_log :: is_fired": {
        "prefix": [
            "is_fired",
            "function:is_fired -> avery_log"
        ],
        "body": [
            "is_fired(${1:idname});"
        ],
        "description": "[Class:avery_log]\n     virtual function bit  is_fired           (\nstring idname );    "
    },
    "avery_log :: coverage_rpt": {
        "prefix": [
            "coverage_rpt",
            "function:coverage_rpt -> avery_log"
        ],
        "body": [
            "coverage_rpt(${1:filename});"
        ],
        "description": "[Class:avery_log]\n     virtual function void coverage_rpt       (\nstring filename=\"\");    "
    },
    "avery_log :: internal": {
        "prefix": [
            "internal",
            "function:internal -> avery_log"
        ],
        "body": [
            "internal(${1:msg}, ${2:is_abort}, ${3:f});"
        ],
        "description": "[Class:avery_log]\n     virtual function void internal           (\nstring msg,\n bit is_abort = 1,\n avery_data_base f=null);    "
    },
    "avery_log :: intern": {
        "prefix": [
            "intern",
            "function:intern -> avery_log"
        ],
        "body": [
            "intern(${1:msg}, ${2:is_abort}, ${3:f});"
        ],
        "description": "[Class:avery_log]\n     virtual function void intern (\nstring msg,\n bit is_abort = 1,\n avery_data_base f=null);    "
    },
    "avery_log :: debug": {
        "prefix": [
            "debug",
            "function:debug -> avery_log"
        ],
        "body": [
            "debug(${1:msg});"
        ],
        "description": "[Class:avery_log]\n     virtual function void debug              (\nstring msg);    "
    },
    "avery_log :: spec_error": {
        "prefix": [
            "spec_error",
            "function:spec_error -> avery_log"
        ],
        "body": [
            "spec_error(${1:msg});"
        ],
        "description": "[Class:avery_log]\n     virtual function void spec_error(\nstring msg);    "
    },
    "avery_log :: sdebug": {
        "prefix": [
            "sdebug",
            "function:sdebug -> avery_log"
        ],
        "body": [
            "sdebug(${1:scope}, ${2:msg});"
        ],
        "description": "[Class:avery_log]\n     virtual function void sdebug(\nstring scope,\n string msg);    "
    },
    "avery_log :: sinfo": {
        "prefix": [
            "sinfo",
            "function:sinfo -> avery_log"
        ],
        "body": [
            "sinfo(${1:scope}, ${2:msg});"
        ],
        "description": "[Class:avery_log]\n     virtual function void sinfo(\nstring scope,\n string msg);    "
    },
    "avery_log :: swarning": {
        "prefix": [
            "swarning",
            "function:swarning -> avery_log"
        ],
        "body": [
            "swarning(${1:scope}, ${2:msg});"
        ],
        "description": "[Class:avery_log]\n     virtual function void swarning(\nstring scope,\n string msg);    "
    },
    "avery_log :: serror": {
        "prefix": [
            "serror",
            "function:serror -> avery_log"
        ],
        "body": [
            "serror(${1:scope}, ${2:msg});"
        ],
        "description": "[Class:avery_log]\n     virtual function void serror(\nstring scope,\n string msg);    "
    },
    "avery_log :: susage": {
        "prefix": [
            "susage",
            "function:susage -> avery_log"
        ],
        "body": [
            "susage(${1:scope}, ${2:msg}, ${3:is_abort});"
        ],
        "description": "[Class:avery_log]\n     virtual function void susage(\nstring scope,\n string msg,\n bit is_abort = 0);    "
    },
    "avery_log :: sstep": {
        "prefix": [
            "sstep",
            "function:sstep -> avery_log"
        ],
        "body": [
            "sstep(${1:scope}, ${2:msg});"
        ],
        "description": "[Class:avery_log]\n     virtual function void sstep(\nstring scope,\n string msg);    "
    },
    "avery_log :: todo": {
        "prefix": [
            "todo",
            "function:todo -> avery_log"
        ],
        "body": [
            "todo(${1:msg}, ${2:is_finish});"
        ],
        "description": "[Class:avery_log]\n     function void todo(\n string msg,\n int is_finish = 0);    "
    },
    "avery_log :: runlog_is_stdout": {
        "prefix": [
            "runlog_is_stdout",
            "function:runlog_is_stdout -> avery_log"
        ],
        "body": [
            "runlog_is_stdout(${0:});"
        ],
        "description": "[Class:avery_log]\n     function bit runlog_is_stdout(\n);    "
    },
    "avery_log :: append_callback": {
        "prefix": [
            "append_callback",
            "function:append_callback -> avery_log"
        ],
        "body": [
            "append_callback(${1:cb});"
        ],
        "description": "[Class:avery_log]\n     function void append_callback(\ninput avery_log_callbacks cb);    "
    },
    "avery_ring": {
        "prefix": "avery_ring",
        "body": [
            "avery_ring  ${0:name_class};"
        ],
        "description": "class avery_ring #(type T = bit[63:0]) extends avery_data_base;\n"
    },
    "avery_ring :: new": {
        "prefix": [
            "new",
            "function:new -> avery_ring"
        ],
        "body": [
            "new(${1:id}, ${2:qsize}, ${3:entry_size}, ${4:base});"
        ],
        "description": "[Class:avery_ring]\n     extern function new(\nint id,\n int qsize,\n int entry_size,\n bit       base = 0);    "
    },
    "avery_ring :: peek": {
        "prefix": [
            "peek",
            "function:peek -> avery_ring"
        ],
        "body": [
            "peek(${0:});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function T peek(\n);    "
    },
    "avery_ring :: push": {
        "prefix": [
            "push",
            "function:push -> avery_ring"
        ],
        "body": [
            "push(${1:v});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function void push (\nT v);    "
    },
    "avery_ring :: size": {
        "prefix": [
            "size",
            "function:size -> avery_ring"
        ],
        "body": [
            "size(${0:});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function int size(\n);    "
    },
    "avery_ring :: num_entries": {
        "prefix": [
            "num_entries",
            "function:num_entries -> avery_ring"
        ],
        "body": [
            "num_entries(${0:});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function int num_entries(\n);    "
    },
    "avery_ring :: num_unused_entries": {
        "prefix": [
            "num_unused_entries",
            "function:num_unused_entries -> avery_ring"
        ],
        "body": [
            "num_unused_entries(${0:});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function int num_unused_entries(\n);    "
    },
    "avery_ring :: delete": {
        "prefix": [
            "delete",
            "function:delete -> avery_ring"
        ],
        "body": [
            "delete(${1:i});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function void delete(\nint i);    "
    },
    "avery_ring :: delete_all": {
        "prefix": [
            "delete_all",
            "function:delete_all -> avery_ring"
        ],
        "body": [
            "delete_all(${0:});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function void delete_all(\n);    "
    },
    "avery_ring :: is_full": {
        "prefix": [
            "is_full",
            "function:is_full -> avery_ring"
        ],
        "body": [
            "is_full(${0:});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function bit is_full(\n);    "
    },
    "avery_ring :: is_empty": {
        "prefix": [
            "is_empty",
            "function:is_empty -> avery_ring"
        ],
        "body": [
            "is_empty(${0:});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function bit is_empty(\n);    "
    },
    "avery_ring :: is_wrap": {
        "prefix": [
            "is_wrap",
            "function:is_wrap -> avery_ring"
        ],
        "body": [
            "is_wrap(${1:total}, ${2:num_wrapped});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function bit is_wrap(\ninput int total,\n output int num_wrapped);    "
    },
    "avery_ring :: get_qsize": {
        "prefix": [
            "get_qsize",
            "function:get_qsize -> avery_ring"
        ],
        "body": [
            "get_qsize(${0:});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function int get_qsize(\n);    "
    },
    "avery_ring :: get_entry_size": {
        "prefix": [
            "get_entry_size",
            "function:get_entry_size -> avery_ring"
        ],
        "body": [
            "get_entry_size(${0:});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function int get_entry_size(\n);    "
    },
    "avery_ring :: get_entry_size_dw": {
        "prefix": [
            "get_entry_size_dw",
            "function:get_entry_size_dw -> avery_ring"
        ],
        "body": [
            "get_entry_size_dw(${0:});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function int get_entry_size_dw(\n);    "
    },
    "avery_ring :: get_tail": {
        "prefix": [
            "get_tail",
            "function:get_tail -> avery_ring"
        ],
        "body": [
            "get_tail(${0:});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function bit       get_tail(\n);    "
    },
    "avery_ring :: get_pi": {
        "prefix": [
            "get_pi",
            "function:get_pi -> avery_ring"
        ],
        "body": [
            "get_pi(${0:});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function bit       get_pi(\n);    "
    },
    "avery_ring :: get_head": {
        "prefix": [
            "get_head",
            "function:get_head -> avery_ring"
        ],
        "body": [
            "get_head(${0:});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function bit       get_head(\n);    "
    },
    "avery_ring :: get_ci": {
        "prefix": [
            "get_ci",
            "function:get_ci -> avery_ring"
        ],
        "body": [
            "get_ci(${0:});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function bit       get_ci(\n);    "
    },
    "avery_ring :: get_tail_addr": {
        "prefix": [
            "get_tail_addr",
            "function:get_tail_addr -> avery_ring"
        ],
        "body": [
            "get_tail_addr(${0:});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function bit       get_tail_addr(\n);    "
    },
    "avery_ring :: get_pi_addr": {
        "prefix": [
            "get_pi_addr",
            "function:get_pi_addr -> avery_ring"
        ],
        "body": [
            "get_pi_addr(${0:});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function bit       get_pi_addr(\n);    "
    },
    "avery_ring :: get_head_addr": {
        "prefix": [
            "get_head_addr",
            "function:get_head_addr -> avery_ring"
        ],
        "body": [
            "get_head_addr(${0:});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function bit       get_head_addr(\n);    "
    },
    "avery_ring :: get_ci_addr": {
        "prefix": [
            "get_ci_addr",
            "function:get_ci_addr -> avery_ring"
        ],
        "body": [
            "get_ci_addr(${0:});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function bit       get_ci_addr(\n);    "
    },
    "avery_ring :: get_base_addr": {
        "prefix": [
            "get_base_addr",
            "function:get_base_addr -> avery_ring"
        ],
        "body": [
            "get_base_addr(${0:});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function bit       get_base_addr(\n);    "
    },
    "avery_ring :: head_diff": {
        "prefix": [
            "head_diff",
            "function:head_diff -> avery_ring"
        ],
        "body": [
            "head_diff(${1:new_head});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function int head_diff(\nint new_head);    "
    },
    "avery_ring :: tail_diff": {
        "prefix": [
            "tail_diff",
            "function:tail_diff -> avery_ring"
        ],
        "body": [
            "tail_diff(${1:new_tail});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function int tail_diff(\nint new_tail);    "
    },
    "avery_ring :: pointer_diff": {
        "prefix": [
            "pointer_diff",
            "function:pointer_diff -> avery_ring"
        ],
        "body": [
            "pointer_diff(${0:});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function int pointer_diff(\n);    "
    },
    "avery_ring :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> avery_ring"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:avery_ring]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix=\"\");    "
    },
    "avery_ring :: pop": {
        "prefix": [
            "pop",
            "function:pop -> avery_ring"
        ],
        "body": [
            "pop(${0:});"
        ],
        "description": "[Class:avery_ring]\n     function T pop(\n);    "
    },
    "avery_timer": {
        "prefix": "avery_timer",
        "body": [
            "avery_timer  ${0:name_class};"
        ],
        "description": "class avery_timer;\n"
    },
    "avery_timer :: new": {
        "prefix": [
            "new",
            "function:new -> avery_timer"
        ],
        "body": [
            "new(${1:log}, ${2:timeout}, ${3:min_timeout}, ${4:msg}, ${5:is_fatal});"
        ],
        "description": "[Class:avery_timer]\n     extern function new(\n            avery_log  log = null,\n             time       timeout,\n                       time       min_timeout = 0,\n               string     msg = \"\",\n            bit        is_fatal = 0        );    "
    },
    "avery_timer :: set_timeout": {
        "prefix": [
            "set_timeout",
            "function:set_timeout -> avery_timer"
        ],
        "body": [
            "set_timeout(${1:t});"
        ],
        "description": "[Class:avery_timer]\n     extern virtual function void set_timeout(\ntime t);       "
    },
    "avery_timer :: set_min_timeout": {
        "prefix": [
            "set_min_timeout",
            "function:set_min_timeout -> avery_timer"
        ],
        "body": [
            "set_min_timeout(${1:t});"
        ],
        "description": "[Class:avery_timer]\n     extern virtual function void set_min_timeout(\ntime t);       "
    },
    "avery_param_log_base": {
        "prefix": "avery_param_log_base",
        "body": [
            "avery_param_log_base  ${0:name_class};"
        ],
        "description": "class avery_param_log_base extends avery_log;\n"
    },
    "avery_param_log_base :: new": {
        "prefix": [
            "new",
            "function:new -> avery_param_log_base"
        ],
        "body": [
            "new(${1:name}, ${2:`avery_xvm_parent});"
        ],
        "description": "[Class:avery_param_log_base]\n     function new(\nstring name = \"avery_param_log\",\n `avery_xvm_parent);    "
    },
    "avery_param_log_base :: merge_coverage": {
        "prefix": [
            "merge_coverage",
            "function:merge_coverage -> avery_param_log_base"
        ],
        "body": [
            "merge_coverage(${1:log_base_a});"
        ],
        "description": "[Class:avery_param_log_base]\n     virtual function void merge_coverage (\navery_param_log_base log_base_a);     "
    },
    "avery_param_log": {
        "prefix": "avery_param_log",
        "body": [
            "avery_param_log  ${0:name_class};"
        ],
        "description": "class avery_param_log #(\n    parameter type debug_e     = avy_debug_e, \n                   chklist_e   = avy_chklist_id_e, \n                   assert_item = avery_assertion_item\n    ) extends avery_param_log_base;\n"
    },
    "avery_param_log :: new": {
        "prefix": [
            "new",
            "function:new -> avery_param_log"
        ],
        "body": [
            "new(${1:name}, ${2:`avery_xvm_parent}, ${3:product_name});"
        ],
        "description": "[Class:avery_param_log]\n     extern function new(\nstring name,\n `avery_xvm_parent,\n string product_name = \"AVY\");    "
    },
    "avery_rw_data32": {
        "prefix": "avery_rw_data32",
        "body": [
            "avery_rw_data32  ${0:name_class};"
        ],
        "description": "class avery_rw_data32;\n"
    },
    "avery_rw_data32 :: new": {
        "prefix": [
            "new",
            "function:new -> avery_rw_data32"
        ],
        "body": [
            "new(${1:isw}, ${2:total2}, ${3:start2});"
        ],
        "description": "[Class:avery_rw_data32]\n     extern function new (\n        input int isw= -1,\n         input int total2= 1,\n        input bit        start2 = 0);    "
    },
    "avery_rw_data": {
        "prefix": "avery_rw_data",
        "body": [
            "avery_rw_data  ${0:name_class};"
        ],
        "description": "class avery_rw_data;\n"
    },
    "avery_rw_data :: new": {
        "prefix": [
            "new",
            "function:new -> avery_rw_data"
        ],
        "body": [
            "new(${1:isw}, ${2:total2}, ${3:start2}, ${4:is_dw2});"
        ],
        "description": "[Class:avery_rw_data]\n     extern function new (\n        input int isw= -1,\n         input int total2= 1,\n        input bit        start2 = 0,\n        input bit is_dw2= 0);    "
    },
    "avery_reg_field": {
        "prefix": "avery_reg_field",
        "body": [
            "avery_reg_field  ${0:name_class};"
        ],
        "description": "class avery_reg_field extends avery_data_base;\n"
    },
    "avery_reg_field :: new": {
        "prefix": [
            "new",
            "function:new -> avery_reg_field"
        ],
        "body": [
            "new(${1:name}, ${2:parent}, ${3:field_size}, ${4:lsb_loc}, ${5:default_val}, ${6:sticky}, ${7:acctype}, ${8:rand_default}, ${9:rand_sticky}, ${10:rand_acc}, ${11:is_static});"
        ],
        "description": "[Class:avery_reg_field]\n     function new(\n            string           name = \"avery_reg_field\",\n            avery_reg        parent = null,\n                  int              field_size,\n                     int              lsb_loc,\n                        avery_reg_val_t  default_val  = 0,\n            bit              sticky       = 0,\n            avery_reg_acc_e  acctype      = AVERY_REG_ACC_RsvdP,\n               bit              rand_default = 1,\n               bit              rand_sticky  = 1,\n               bit              rand_acc     = 1,\n               bit              is_static    = 0            );    "
    },
    "avery_reg_field :: set_v": {
        "prefix": [
            "set_v",
            "function:set_v -> avery_reg_field"
        ],
        "body": [
            "set_v(${1:v});"
        ],
        "description": "[Class:avery_reg_field]\n     extern virtual function void set_v(\navery_reg_val_t v);    "
    },
    "avery_reg_field :: set_dv": {
        "prefix": [
            "set_dv",
            "function:set_dv -> avery_reg_field"
        ],
        "body": [
            "set_dv(${1:dv});"
        ],
        "description": "[Class:avery_reg_field]\n     extern virtual function void set_dv(\navery_reg_val_t dv);    "
    },
    "avery_reg_field :: set_acctype": {
        "prefix": [
            "set_acctype",
            "function:set_acctype -> avery_reg_field"
        ],
        "body": [
            "set_acctype(${1:acctype});"
        ],
        "description": "[Class:avery_reg_field]\n     virtual function void set_acctype(\navery_reg_acc_e acctype);    "
    },
    "avery_reg_field :: set_sticky": {
        "prefix": [
            "set_sticky",
            "function:set_sticky -> avery_reg_field"
        ],
        "body": [
            "set_sticky(${1:sticky});"
        ],
        "description": "[Class:avery_reg_field]\n     virtual function void set_sticky(\nbit sticky);    "
    },
    "avery_reg_field :: set_sticky_flr": {
        "prefix": [
            "set_sticky_flr",
            "function:set_sticky_flr -> avery_reg_field"
        ],
        "body": [
            "set_sticky_flr(${1:sticky_flr});"
        ],
        "description": "[Class:avery_reg_field]\n     virtual function void set_sticky_flr(\nbit sticky_flr);    "
    },
    "avery_reg_field :: set_lsb_loc": {
        "prefix": [
            "set_lsb_loc",
            "function:set_lsb_loc -> avery_reg_field"
        ],
        "body": [
            "set_lsb_loc(${1:lsb_loc});"
        ],
        "description": "[Class:avery_reg_field]\n     extern virtual function void set_lsb_loc(\nint lsb_loc);    "
    },
    "avery_reg_field :: set_write_mask": {
        "prefix": [
            "set_write_mask",
            "function:set_write_mask -> avery_reg_field"
        ],
        "body": [
            "set_write_mask(${1:mask});"
        ],
        "description": "[Class:avery_reg_field]\n     extern virtual function void set_write_mask(\navery_reg_val_t mask);    "
    },
    "avery_reg_field :: get_write_mask": {
        "prefix": [
            "get_write_mask",
            "function:get_write_mask -> avery_reg_field"
        ],
        "body": [
            "get_write_mask(${0:});"
        ],
        "description": "[Class:avery_reg_field]\n     extern virtual function avery_reg_val_t get_write_mask(\n);    "
    },
    "avery_reg_field :: get_field_size": {
        "prefix": [
            "get_field_size",
            "function:get_field_size -> avery_reg_field"
        ],
        "body": [
            "get_field_size(${0:});"
        ],
        "description": "[Class:avery_reg_field]\n     extern virtual function int get_field_size(\n);    "
    },
    "avery_reg_field :: get_lsb_loc": {
        "prefix": [
            "get_lsb_loc",
            "function:get_lsb_loc -> avery_reg_field"
        ],
        "body": [
            "get_lsb_loc(${0:});"
        ],
        "description": "[Class:avery_reg_field]\n     extern virtual function int get_lsb_loc(\n);    "
    },
    "avery_reg_field :: read_dw": {
        "prefix": [
            "read_dw",
            "function:read_dw -> avery_reg_field"
        ],
        "body": [
            "read_dw(${1:bit_offset}, ${2:bit_enable});"
        ],
        "description": "[Class:avery_reg_field]\n     extern virtual function avery_reg_val_t read_dw(\nint bit_offset,\n avery_u32 bit_enable = 'hffff_ffff);    "
    },
    "avery_reg_field :: write_dw": {
        "prefix": [
            "write_dw",
            "function:write_dw -> avery_reg_field"
        ],
        "body": [
            "write_dw(${1:bit_offset}, ${2:value}, ${3:bit_enable}, ${4:dbg});"
        ],
        "description": "[Class:avery_reg_field]\n     extern virtual function void write_dw(\n                                    int       bit_offset,\n                                    avery_u32 value     ,\n                                    avery_u32 bit_enable='hffff_ffff,\n                                       string    dbg=\"\"     );    "
    },
    "avery_reg_field :: sprint_path": {
        "prefix": [
            "sprint_path",
            "function:sprint_path -> avery_reg_field"
        ],
        "body": [
            "sprint_path(${1:verbosity});"
        ],
        "description": "[Class:avery_reg_field]\n     extern virtual function string sprint_path(\nint verbosity = 0);    "
    },
    "avery_reg_field :: get_offset_dw": {
        "prefix": [
            "get_offset_dw",
            "function:get_offset_dw -> avery_reg_field"
        ],
        "body": [
            "get_offset_dw(${0:});"
        ],
        "description": "[Class:avery_reg_field]\n     extern virtual function bit       get_offset_dw(\n);    "
    },
    "avery_reg_field :: get_offset": {
        "prefix": [
            "get_offset",
            "function:get_offset -> avery_reg_field"
        ],
        "body": [
            "get_offset(${0:});"
        ],
        "description": "[Class:avery_reg_field]\n     extern virtual function bit       get_offset(\n);    "
    },
    "avery_reg_field :: set_shared": {
        "prefix": [
            "set_shared",
            "function:set_shared -> avery_reg_field"
        ],
        "body": [
            "set_shared(${1:shared});"
        ],
        "description": "[Class:avery_reg_field]\n     extern virtual function void set_shared(\navery_reg_field shared);    "
    },
    "avery_reg_field :: inverse": {
        "prefix": [
            "inverse",
            "function:inverse -> avery_reg_field"
        ],
        "body": [
            "inverse(${0:});"
        ],
        "description": "[Class:avery_reg_field]\n     extern virtual function void inverse(\n);    "
    },
    "avery_reg_field :: set_one": {
        "prefix": [
            "set_one",
            "function:set_one -> avery_reg_field"
        ],
        "body": [
            "set_one(${0:});"
        ],
        "description": "[Class:avery_reg_field]\n     extern virtual function void set_one(\n);    "
    },
    "avery_reg_field :: compare": {
        "prefix": [
            "compare",
            "function:compare -> avery_reg_field"
        ],
        "body": [
            "compare(${1:tgt});"
        ],
        "description": "[Class:avery_reg_field]\n     extern virtual function bit compare(\navery_reg_field tgt);    "
    },
    "avery_reg_field :: set_print_verbosity": {
        "prefix": [
            "set_print_verbosity",
            "function:set_print_verbosity -> avery_reg_field"
        ],
        "body": [
            "set_print_verbosity(${1:v});"
        ],
        "description": "[Class:avery_reg_field]\n     extern virtual function void set_print_verbosity(\nint v);    "
    },
    "avery_reg": {
        "prefix": "avery_reg",
        "body": [
            "avery_reg  ${0:name_class};"
        ],
        "description": "class avery_reg extends avery_data_base; \n"
    },
    "avery_reg :: new": {
        "prefix": [
            "new",
            "function:new -> avery_reg"
        ],
        "body": [
            "new(${1:name});"
        ],
        "description": "[Class:avery_reg]\n     function new(\nstring name = \"avery_reg\");    "
    },
    "avery_reg :: get_size_dw": {
        "prefix": [
            "get_size_dw",
            "function:get_size_dw -> avery_reg"
        ],
        "body": [
            "get_size_dw(${0:});"
        ],
        "description": "[Class:avery_reg]\n     extern virtual function int get_size_dw(\n);    "
    },
    "avery_reg :: get_size": {
        "prefix": [
            "get_size",
            "function:get_size -> avery_reg"
        ],
        "body": [
            "get_size(${0:});"
        ],
        "description": "[Class:avery_reg]\n     extern virtual function int get_size(\n);    "
    },
    "avery_reg :: fread_dw": {
        "prefix": [
            "fread_dw",
            "function:fread_dw -> avery_reg"
        ],
        "body": [
            "fread_dw(${1:dw_offset}, ${2:byte_enable});"
        ],
        "description": "[Class:avery_reg]\n     extern virtual function avery_reg_val_t fread_dw(\n int      dw_offset  ,\n                                                      bit       byte_enable = 4'b1111 );    "
    },
    "avery_reg :: fwrite_dw": {
        "prefix": [
            "fwrite_dw",
            "function:fwrite_dw -> avery_reg"
        ],
        "body": [
            "fwrite_dw(${1:dw_offset}, ${2:value}, ${3:byte_enable}, ${4:modifier});"
        ],
        "description": "[Class:avery_reg]\n     extern virtual function void fwrite_dw(\n int             dw_offset  ,\n                                            avery_u32       value      ,\n                                            bit              byte_enable = 4'b1111,\n                                            avery_data_base modifier    = null );    "
    },
    "avery_reg :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> avery_reg"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:avery_reg]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "avery_reg :: configure": {
        "prefix": [
            "configure",
            "function:configure -> avery_reg"
        ],
        "body": [
            "configure(${1:n_dwords});"
        ],
        "description": "[Class:avery_reg]\n     extern function void configure(\nint n_dwords = 0);    "
    },
    "avery_reg :: get_dword": {
        "prefix": [
            "get_dword",
            "function:get_dword -> avery_reg"
        ],
        "body": [
            "get_dword(${1:dw_offset});"
        ],
        "description": "[Class:avery_reg]\n     extern function avery_reg_val_t get_dword(\nint dw_offset);    "
    },
    "avery_reg :: sprint_dword": {
        "prefix": [
            "sprint_dword",
            "function:sprint_dword -> avery_reg"
        ],
        "body": [
            "sprint_dword(${1:dw_offset}, ${2:verbosity});"
        ],
        "description": "[Class:avery_reg]\n     extern function string sprint_dword(\nint dw_offset,\n int verbosity= 0);    "
    },
    "avery_reg :: set_dword": {
        "prefix": [
            "set_dword",
            "function:set_dword -> avery_reg"
        ],
        "body": [
            "set_dword(${1:dw_offset}, ${2:value}, ${3:byte_enable}, ${4:modifier});"
        ],
        "description": "[Class:avery_reg]\n     extern virtual function void set_dword(\n            int             dw_offset  ,\n            avery_u32       value      ,\n            bit              byte_enable = 4'b1111,\n            avery_data_base modifier    = null );    "
    },
    "avery_reg :: create_dynamic_fields": {
        "prefix": [
            "create_dynamic_fields",
            "function:create_dynamic_fields -> avery_reg"
        ],
        "body": [
            "create_dynamic_fields(${0:});"
        ],
        "description": "[Class:avery_reg]\n     virtual function void create_dynamic_fields(\n);    "
    },
    "apipe_msg_bus_transaction": {
        "prefix": "apipe_msg_bus_transaction",
        "body": [
            "apipe_msg_bus_transaction  ${0:name_class};"
        ],
        "description": "class apipe_msg_bus_transaction extends avery_data_base;\n"
    },
    "anvm_zone_dsptr_ext": {
        "prefix": "anvm_zone_dsptr_ext",
        "body": [
            "anvm_zone_dsptr_ext  ${0:name_class};"
        ],
        "description": "class anvm_zone_dsptr_ext extends anvm_data_base;\n"
    },
    "anvm_zone_dsptr_ext :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_zone_dsptr_ext"
        ],
        "body": [
            "new(${1:dsptr_sz});"
        ],
        "description": "[Class:anvm_zone_dsptr_ext]\n     function new(\nint dsptr_sz);    "
    },
    "anvm_report_zone_data": {
        "prefix": "anvm_report_zone_data",
        "body": [
            "anvm_report_zone_data  ${0:name_class};"
        ],
        "description": "class anvm_report_zone_data extends anvm_data_base;\n"
    },
    "anvm_report_zone_data :: init": {
        "prefix": [
            "init",
            "function:init -> anvm_report_zone_data"
        ],
        "body": [
            "init(${1:mdts_lba});"
        ],
        "description": "[Class:anvm_report_zone_data]\n     extern virtual function void init(\navery_u64 mdts_lba = 0);    "
    },
    "anvm_report_zone_data :: across_boundary": {
        "prefix": [
            "across_boundary",
            "function:across_boundary -> anvm_report_zone_data"
        ],
        "body": [
            "across_boundary(${1:zone_idx}, ${2:starting_lba}, ${3:num_logic_blocks}, ${4:is_wr});"
        ],
        "description": "[Class:anvm_report_zone_data]\n     extern virtual function bit across_boundary(\nint zone_idx,\n bit       starting_lba,\n bit       num_logic_blocks,\n bit is_wr = 0);    "
    },
    "anvm_report_zone_data :: get_zc": {
        "prefix": [
            "get_zc",
            "function:get_zc -> anvm_report_zone_data"
        ],
        "body": [
            "get_zc(${1:zone_idx});"
        ],
        "description": "[Class:anvm_report_zone_data]\n     extern virtual function anvm_zone_state_e get_zc(\nint zone_idx);    "
    },
    "anvm_report_zone_data :: update_zc": {
        "prefix": [
            "update_zc",
            "function:update_zc -> anvm_report_zone_data"
        ],
        "body": [
            "update_zc(${1:zone_idx}, ${2:zc});"
        ],
        "description": "[Class:anvm_report_zone_data]\n     extern virtual function void update_zc(\nint zone_idx,\n anvm_zone_state_e zc);    "
    },
    "anvm_report_zone_data :: update_wr_ptr": {
        "prefix": [
            "update_wr_ptr",
            "function:update_wr_ptr -> anvm_report_zone_data"
        ],
        "body": [
            "update_wr_ptr(${1:zone_idx}, ${2:num_of_lba});"
        ],
        "description": "[Class:anvm_report_zone_data]\n     extern virtual function void update_wr_ptr(\nint zone_idx,\n int num_of_lba);    "
    },
    "anvm_report_zone_data :: chk_slba": {
        "prefix": [
            "chk_slba",
            "function:chk_slba -> anvm_report_zone_data"
        ],
        "body": [
            "chk_slba(${1:starting_lba});"
        ],
        "description": "[Class:anvm_report_zone_data]\n     extern virtual function bit  chk_slba(\nbit        starting_lba);    "
    },
    "anvm_report_zone_data :: is_report_zone": {
        "prefix": [
            "is_report_zone",
            "function:is_report_zone -> anvm_report_zone_data"
        ],
        "body": [
            "is_report_zone(${1:starting_lba}, ${2:report_type}, ${3:zone_dsptr});"
        ],
        "description": "[Class:anvm_report_zone_data]\n     extern virtual function bit  is_report_zone(\nbit       starting_lba,\n anvm_zone_receive_report_e report_type,\n anvm_zone_dsptr_entry_t zone_dsptr);    "
    },
    "anvm_report_zone_data :: get_zone_idx": {
        "prefix": [
            "get_zone_idx",
            "function:get_zone_idx -> anvm_report_zone_data"
        ],
        "body": [
            "get_zone_idx(${1:starting_lba});"
        ],
        "description": "[Class:anvm_report_zone_data]\n     extern virtual function int  get_zone_idx(\nbit       starting_lba);    "
    },
    "anvm_report_zone_data :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_report_zone_data"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_report_zone_data]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_report_zone_data :: copy": {
        "prefix": [
            "copy",
            "function:copy -> anvm_report_zone_data"
        ],
        "body": [
            "copy(${0:});"
        ],
        "description": "[Class:anvm_report_zone_data]\n     extern virtual function anvm_report_zone_data copy(\n);    "
    },
    "anvm_report_zone_data :: unpack_dwords": {
        "prefix": [
            "unpack_dwords",
            "function:unpack_dwords -> anvm_report_zone_data"
        ],
        "body": [
            "unpack_dwords(${1:cmd});"
        ],
        "description": "[Class:anvm_report_zone_data]\n     extern virtual function void unpack_dwords(\nref anvm_cmd_entry cmd);    "
    },
    "anvm_report_zone_data :: pack_dwords": {
        "prefix": [
            "pack_dwords",
            "function:pack_dwords -> anvm_report_zone_data"
        ],
        "body": [
            "pack_dwords(${1:cmd});"
        ],
        "description": "[Class:anvm_report_zone_data]\n     extern virtual function void pack_dwords(\nref anvm_cmd_entry cmd);    "
    },
    "anvm_rsvt_acquire_data": {
        "prefix": "anvm_rsvt_acquire_data",
        "body": [
            "anvm_rsvt_acquire_data  ${0:name_class};"
        ],
        "description": "class anvm_rsvt_acquire_data extends anvm_data_base;\n"
    },
    "anvm_rsvt_acquire_data :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_rsvt_acquire_data"
        ],
        "body": [
            "new(${1:preempt_key}, ${2:current_key});"
        ],
        "description": "[Class:anvm_rsvt_acquire_data]\n     function new(\navery_u64 preempt_key=0,\n avery_u64 current_key=0);    "
    },
    "anvm_rsvt_acquire_data :: pack_dwords": {
        "prefix": [
            "pack_dwords",
            "function:pack_dwords -> anvm_rsvt_acquire_data"
        ],
        "body": [
            "pack_dwords(${1:vq});"
        ],
        "description": "[Class:anvm_rsvt_acquire_data]\n     function void pack_dwords(\nref bit       vq      );    "
    },
    "anvm_rsvt_acquire_data :: unpack_dwords": {
        "prefix": [
            "unpack_dwords",
            "function:unpack_dwords -> anvm_rsvt_acquire_data"
        ],
        "body": [
            "unpack_dwords(${1:vq});"
        ],
        "description": "[Class:anvm_rsvt_acquire_data]\n     function void unpack_dwords(\nref bit       vq      );    "
    },
    "anvm_rsvt_acquire_data :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_rsvt_acquire_data"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_rsvt_acquire_data]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_rsvt_register_data": {
        "prefix": "anvm_rsvt_register_data",
        "body": [
            "anvm_rsvt_register_data  ${0:name_class};"
        ],
        "description": "class anvm_rsvt_register_data extends anvm_data_base;\n"
    },
    "anvm_rsvt_register_data :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_rsvt_register_data"
        ],
        "body": [
            "new(${1:new_key}, ${2:current_key});"
        ],
        "description": "[Class:anvm_rsvt_register_data]\n     function new(\navery_u64 new_key=0,\n avery_u64 current_key=0);    "
    },
    "anvm_rsvt_register_data :: pack_dwords": {
        "prefix": [
            "pack_dwords",
            "function:pack_dwords -> anvm_rsvt_register_data"
        ],
        "body": [
            "pack_dwords(${1:vq});"
        ],
        "description": "[Class:anvm_rsvt_register_data]\n     function void pack_dwords(\nref bit       vq      );    "
    },
    "anvm_rsvt_register_data :: unpack_dwords": {
        "prefix": [
            "unpack_dwords",
            "function:unpack_dwords -> anvm_rsvt_register_data"
        ],
        "body": [
            "unpack_dwords(${1:vq});"
        ],
        "description": "[Class:anvm_rsvt_register_data]\n     function void unpack_dwords(\nref bit       vq      );    "
    },
    "anvm_rsvt_register_data :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_rsvt_register_data"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_rsvt_register_data]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_rsvt_release_data": {
        "prefix": "anvm_rsvt_release_data",
        "body": [
            "anvm_rsvt_release_data  ${0:name_class};"
        ],
        "description": "class anvm_rsvt_release_data extends anvm_data_base;\n"
    },
    "anvm_rsvt_release_data :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_rsvt_release_data"
        ],
        "body": [
            "new(${1:current_key});"
        ],
        "description": "[Class:anvm_rsvt_release_data]\n     function new(\navery_u64 current_key=0);    "
    },
    "anvm_rsvt_release_data :: pack_dwords": {
        "prefix": [
            "pack_dwords",
            "function:pack_dwords -> anvm_rsvt_release_data"
        ],
        "body": [
            "pack_dwords(${1:vq});"
        ],
        "description": "[Class:anvm_rsvt_release_data]\n     function void pack_dwords(\nref bit       vq      );    "
    },
    "anvm_rsvt_release_data :: unpack_dwords": {
        "prefix": [
            "unpack_dwords",
            "function:unpack_dwords -> anvm_rsvt_release_data"
        ],
        "body": [
            "unpack_dwords(${1:vq});"
        ],
        "description": "[Class:anvm_rsvt_release_data]\n     function void unpack_dwords(\nref bit       vq      );    "
    },
    "anvm_rsvt_release_data :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_rsvt_release_data"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_rsvt_release_data]\n     virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_rsvt_report_data": {
        "prefix": "anvm_rsvt_report_data",
        "body": [
            "anvm_rsvt_report_data  ${0:name_class};"
        ],
        "description": "class anvm_rsvt_report_data extends anvm_data_base;\n"
    },
    "anvm_rsvt_report_data :: new": {
        "prefix": [
            "new",
            "function:new -> anvm_rsvt_report_data"
        ],
        "body": [
            "new(${0:});"
        ],
        "description": "[Class:anvm_rsvt_report_data]\n     function new(\n);    "
    },
    "anvm_rsvt_report_data :: sprint": {
        "prefix": [
            "sprint",
            "function:sprint -> anvm_rsvt_report_data"
        ],
        "body": [
            "sprint(${1:verbosity}, ${2:prefix});"
        ],
        "description": "[Class:anvm_rsvt_report_data]\n     extern virtual function string sprint(\nint verbosity = 0,\n string prefix = \"\");    "
    },
    "anvm_rsvt_report_data :: pack_dwords": {
        "prefix": [
            "pack_dwords",
            "function:pack_dwords -> anvm_rsvt_report_data"
        ],
        "body": [
            "pack_dwords(${1:vq});"
        ],
        "description": "[Class:anvm_rsvt_report_data]\n     extern virtual function void pack_dwords(\nref bit       vq      );    "
    },
    "anvm_rsvt_report_data :: unpack_dwords": {
        "prefix": [
            "unpack_dwords",
            "function:unpack_dwords -> anvm_rsvt_report_data"
        ],
        "body": [
            "unpack_dwords(${1:vq});"
        ],
        "description": "[Class:anvm_rsvt_report_data]\n     extern virtual function void unpack_dwords(\nref bit       vq      );    "
    },
    "uvm_raise_objection": {
        "prefix": [
            "uvm_raise_objection",
            "function:uvm_raise_objection"
        ],
        "body": [
            "uvm_raise_objection(${0:});"
        ],
        "description": "    local function void uvm_raise_objection(\n);    "
    },
    "uvm_drop_objection": {
        "prefix": [
            "uvm_drop_objection",
            "function:uvm_drop_objection"
        ],
        "body": [
            "uvm_drop_objection(${0:});"
        ],
        "description": "    local function void uvm_drop_objection(\n);    "
    }
}