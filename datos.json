{"test_summary_register": {"body": ["test_summary_register(${0:c})"], "prefix": ["test_summary_register", "function:test_summary_register"], "description": "function void test_summary_register(avery_component c);\n    "}}
{"test_summary": {"body": ["test_summary(${0:test_name})"], "prefix": ["test_summary", "task:test_summary"], "description": "task test_summary( string s = \"UNKNOWN\", string reason=\"\", string test_name = \"\");\n    "}}
{"apci_test_severity_register": {"body": ["apci_test_severity_register(${0:l})"], "prefix": ["apci_test_severity_register", "function:apci_test_severity_register"], "description": "function void apci_test_severity_register(apci_log l);\n    "}}
{"apci_test_set_severity": {"body": ["apci_test_set_severity(${1:id}, ${0:v})"], "prefix": ["apci_test_set_severity", "function:apci_test_set_severity"], "description": "function void apci_test_set_severity(string id, avery_severity v);\n    "}}
{"apci_test_report_register": {"body": ["apci_test_report_register(${0:b})"], "prefix": ["apci_test_report_register", "function:apci_test_report_register"], "description": "function void apci_test_report_register(apci_device b);\n    "}}
{"apci_seq_report_register": {"body": ["apci_seq_report_register(${0:b})"], "prefix": ["apci_seq_report_register", "function:apci_seq_report_register"], "description": "function void apci_seq_report_register(apci_seq_common b);\n    "}}
{"apci_test_report": {"body": ["apci_test_report(${0:t})"], "prefix": ["apci_test_report", "task:apci_test_report"], "description": "task apci_test_report(apci_testcase_base t);\n    "}}
{"automatic": {"body": ["automatic(${0:test_name})"], "prefix": ["automatic", "task:automatic"], "description": "task automatic apci_test_select( string test_name = \"\");\n    "}}
{"apci_test_select2": {"body": ["apci_test_select2(${0:testname})"], "prefix": ["apci_test_select2", "function:apci_test_select2"], "description": "function apci_testcase_base apci_test_select2(string testname);\n    "}}
{"apci_test_select_check": {"body": ["apci_test_select_check(${0:})"], "prefix": ["apci_test_select_check", "task:apci_test_select_check"], "description": "task apci_test_select_check();\n    "}}
{"seq_info": {"body": ["seq_info(${0:s})"], "prefix": ["seq_info", "function:seq_info"], "description": "    function void seq_info(string s);\n    "}}
{"seq_debug": {"body": ["seq_debug(${0:s})"], "prefix": ["seq_debug", "function:seq_debug"], "description": "    function void seq_debug(string s);\n    "}}
{"seq_warn": {"body": ["seq_warn(${0:s})"], "prefix": ["seq_warn", "function:seq_warn"], "description": "    function void seq_warn(string s);\n    "}}
{"seq_usage": {"body": ["seq_usage(${0:s})"], "prefix": ["seq_usage", "function:seq_usage"], "description": "    function void seq_usage(string s);\n    "}}
{"new": {"body": ["new(${0:scope})"], "prefix": ["new", "function:new"], "description": "    function new (apci_device bfm\t    = null, \n\t\t  apci_device rc_app_bfm    = null, \n\t\t  apci_device target\t    = null, \n\t\t  string scope = \"\");\n    "}}
{"copy": {"body": ["copy(${0:to})"], "prefix": ["copy", "function:copy"], "description": "    function apci_seq_common copy (apci_seq_common to = null);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"before_run": {"body": ["before_run(${0:})"], "prefix": ["before_run", "task:before_run"], "description": "    virtual task before_run();\n    "}}
{"run_body": {"body": ["run_body(${0:})"], "prefix": ["run_body", "task:run_body"], "description": "    virtual task run_body();\n    "}}
{"end_messages": {"body": ["end_messages(${0:s})"], "prefix": ["end_messages", "function:end_messages"], "description": "    virtual function void end_messages(output string s);\n    "}}
{"after_run": {"body": ["after_run(${0:})"], "prefix": ["after_run", "task:after_run"], "description": "    virtual task after_run();\n    "}}
{"seq_info": {"body": ["seq_info(${0:s})"], "prefix": ["seq_info", "function:seq_info"], "description": "    function void seq_info(string s);\n    "}}
{"seq_error": {"body": ["seq_error(${0:s})"], "prefix": ["seq_error", "function:seq_error"], "description": "    function void seq_error(string s);\n    "}}
{"seq_debug": {"body": ["seq_debug(${0:s})"], "prefix": ["seq_debug", "function:seq_debug"], "description": "    function void seq_debug(string s);\n    "}}
{"seq_warn": {"body": ["seq_warn(${0:s})"], "prefix": ["seq_warn", "function:seq_warn"], "description": "    function void seq_warn(string s);\n    "}}
{"seq_usage": {"body": ["seq_usage(${0:s})"], "prefix": ["seq_usage", "function:seq_usage"], "description": "    function void seq_usage(string s);\n    "}}
{"seq_print_history": {"body": ["seq_print_history(${0:})"], "prefix": ["seq_print_history", "function:seq_print_history"], "description": "    function void seq_print_history();\n    "}}
{"new": {"body": ["new(${0:test_name})"], "prefix": ["new", "function:new"], "description": "    function new(string test_name);\n    "}}
{"grab_test": {"body": ["grab_test(${0:t})"], "prefix": ["grab_test", "function:grab_test"], "description": "    static function apci_testcase_base grab_test(ref string t);\n    "}}
{"add_rc": {"body": ["add_rc(${0:h})"], "prefix": ["add_rc", "function:add_rc"], "description": "    function void add_rc(apci_device h);\n    "}}
{"add_sw": {"body": ["add_sw(${0:h})"], "prefix": ["add_sw", "function:add_sw"], "description": "    function void add_sw(apci_device h);\n    "}}
{"add_ep": {"body": ["add_ep(${0:h})"], "prefix": ["add_ep", "function:add_ep"], "description": "    function void add_ep(apci_device h);\n    "}}
{"add_bfm": {"body": ["add_bfm(${0:h})"], "prefix": ["add_bfm", "function:add_bfm"], "description": "    function void add_bfm(apci_device h);\n    "}}
{"add_rc_app_bfm": {"body": ["add_rc_app_bfm(${0:h})"], "prefix": ["add_rc_app_bfm", "function:add_rc_app_bfm"], "description": "    function void add_rc_app_bfm(apci_device h);\n    "}}
{"add_dut1_bfm": {"body": ["add_dut1_bfm(${0:h})"], "prefix": ["add_dut1_bfm", "function:add_dut1_bfm"], "description": "    function void add_dut1_bfm(apci_device h);\n    "}}
{"add_dut_pif": {"body": ["add_dut_pif(${0:h})"], "prefix": ["add_dut_pif", "function:add_dut_pif"], "description": "    function void add_dut_pif(virtual apci_pipe_intf h      );\n    "}}
{"add_dut_cxl_seq": {"body": ["add_dut_cxl_seq(${0:h})"], "prefix": ["add_dut_cxl_seq", "function:add_dut_cxl_seq"], "description": "    function void add_dut_cxl_seq(acxl_dut_seq h);\n    "}}
{"set_severity_except_myself": {"body": ["set_severity_except_myself(${2:bfm}, ${1:id}, ${0:serverity})"], "prefix": ["set_severity_except_myself", "function:set_severity_except_myself"], "description": "    function void set_severity_except_myself(apci_device bfm, apci_chklist_id_e id, avery_severity serverity);\n    "}}
{"pre_bfm_started": {"body": ["pre_bfm_started(${0:})"], "prefix": ["pre_bfm_started", "task:pre_bfm_started"], "description": "    virtual task pre_bfm_started();\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"wait_eps": {"body": ["wait_eps(${0:how_many})"], "prefix": ["wait_eps", "task:wait_eps"], "description": "    virtual task wait_eps(bit configured = 0,    \t                      int how_many = 0);\n    "}}
{"test_body": {"body": ["test_body(${0:})"], "prefix": ["test_body", "task:test_body"], "description": "    virtual task test_body();\n    "}}
{"test_body_per_bfm_sequential": {"body": ["test_body_per_bfm_sequential(${0:bfm})"], "prefix": ["test_body_per_bfm_sequential", "task:test_body_per_bfm_sequential"], "description": "    virtual task test_body_per_bfm_sequential(apci_device bfm);\n    "}}
{"test_body_per_bfm_parallel": {"body": ["test_body_per_bfm_parallel(${0:bfm})"], "prefix": ["test_body_per_bfm_parallel", "task:test_body_per_bfm_parallel"], "description": "    virtual task test_body_per_bfm_parallel(apci_device bfm);\n    "}}
{"collect_coverage": {"body": ["collect_coverage(${0:})"], "prefix": ["collect_coverage", "task:collect_coverage"], "description": "    virtual task collect_coverage();\n    "}}
{"wrapup": {"body": ["wrapup(${0:})"], "prefix": ["wrapup", "task:wrapup"], "description": "    virtual task wrapup();                                                                       \n    "}}
{"find_controller_bfm": {"body": ["find_controller_bfm(${0:ep_id})"], "prefix": ["find_controller_bfm", "function:find_controller_bfm"], "description": "    virtual function apci_device find_controller_bfm(int ep_id);\n    "}}
{"sprint_topology": {"body": ["sprint_topology(${0:prefix})"], "prefix": ["sprint_topology", "function:sprint_topology"], "description": "    virtual function string sprint_topology(string prefix = \"\\t\");\n    "}}
{"setup_cfg_space": {"body": ["setup_cfg_space(${1:bfm}, ${0:csp})"], "prefix": ["setup_cfg_space", "function:setup_cfg_space"], "description": "    virtual function void setup_cfg_space(\n\t    input apci_device      bfm,\n\t    input apci_cfg_space   csp\n\t);\treturn;\n    "}}
{"setup_mmio_reg": {"body": ["setup_mmio_reg(${1:bfm}, ${0:mmreg})"], "prefix": ["setup_mmio_reg", "function:setup_mmio_reg"], "description": "    virtual function void setup_mmio_reg(\n\t    input apci_device      bfm,\n\t    input apci_mmio_reg    mmreg \n\t);\treturn;\n    "}}
{"pre_enum_wait_user": {"body": ["pre_enum_wait_user(${0:bfm})"], "prefix": ["pre_enum_wait_user", "task:pre_enum_wait_user"], "description": "    virtual task pre_enum_wait_user(input apci_device bfm);\n    "}}
{"pre_enum_phase0": {"body": ["pre_enum_phase0(${2:bfm}, ${1:bus}, ${0:skip_enum})"], "prefix": ["pre_enum_phase0", "function:pre_enum_phase0"], "description": "    virtual function void pre_enum_phase0(\n\t    input apci_device  bfm,\n\t    input bit           bus,\n\t    inout bit          skip_enum   \t);\treturn;\n    "}}
{"pre_enum_phase1": {"body": ["pre_enum_phase1(${3:bfm}, ${2:dmgr}, ${1:bdf}, ${0:skip_enum})"], "prefix": ["pre_enum_phase1", "function:pre_enum_phase1"], "description": "    virtual function void pre_enum_phase1(\n\t    apci_device     bfm,\n\t    apci_device_mgr dmgr,\n\t    apci_bdf_t      bdf,\n\t    inout bit       skip_enum\n\t);\treturn;\n    "}}
{"enum_done": {"body": ["enum_done(${1:bfm}, ${0:mgr})"], "prefix": ["enum_done", "function:enum_done"], "description": "    virtual function void enum_done(\n\t    input apci_device     bfm,\n\t    input apci_device_mgr mgr\n\t);\treturn;\n    "}}
{"enum_done_wait_user": {"body": ["enum_done_wait_user(${1:bfm}, ${0:mgrs})"], "prefix": ["enum_done_wait_user", "task:enum_done_wait_user"], "description": "    virtual task enum_done_wait_user(\n\t    input apci_device     bfm,\n\t    input apci_device_mgr mgrs      \n\t);\treturn;\n    "}}
{"read_mem_cb": {"body": ["read_mem_cb(${6:is_host_mem}, ${5:addr}, ${4:ndw}, ${3:first_be}, ${2:last_be}, ${1:va}, ${0:src})"], "prefix": ["read_mem_cb", "function:read_mem_cb"], "description": "    virtual function void read_mem_cb(\n\t    input bit             is_host_mem,\n\t    input bit             addr    ,\n\t    input bit             ndw     ,\n\t    input bit              first_be,\n\t    input bit              last_be ,\n\t    ref   bit             va      ,\n\t    input avery_data_base src\n\t);\t\n    "}}
{"write_mem_cb": {"body": ["write_mem_cb(${5:is_host_mem}, ${4:addr}, ${3:first_be}, ${2:last_be}, ${1:va}, ${0:src})"], "prefix": ["write_mem_cb", "function:write_mem_cb"], "description": "    virtual function void write_mem_cb(\n            input bit             is_host_mem,\n            input bit             addr       ,\n            input bit              first_be   ,\n            input bit              last_be    ,\n\t    ref   bit             va             ,\n\t    input avery_data_base src         \n\t);\t\n    "}}
{"rx_interrupt": {"body": ["rx_interrupt(${1:rc}, ${0:irq})"], "prefix": ["rx_interrupt", "function:rx_interrupt"], "description": "    virtual function void rx_interrupt(\n\t        apci_device  rc,\n\t    ref apci_irq_t   irq\n\t);\treturn;\n    "}}
{"tx_transaction_done": {"body": ["tx_transaction_done(${1:bfm}, ${0:tr})"], "prefix": ["tx_transaction_done", "function:tx_transaction_done"], "description": "    virtual function void tx_transaction_done(\n\t    apci_device      bfm,\n\t    apci_transaction tr\n\t);\treturn;\n    "}}
{"tx_create_cpl": {"body": ["tx_create_cpl(${6:bfm}, ${5:req}, ${4:cpl}, ${3:ith_split}, ${2:mps_dw}, ${1:rcb_dw}, ${0:delay_ns})"], "prefix": ["tx_create_cpl", "function:tx_create_cpl"], "description": "    virtual function void tx_create_cpl(\n\t    input apci_device bfm      ,\n\t    input apci_tlp    req      ,\n\t    input apci_tlp    cpl      ,\n\t    input int         ith_split,\n\t    input int         mps_dw   ,\n\t    input int         rcb_dw   ,\n\t    inout int         delay_ns  \n\t);\treturn;\n    "}}
{"tx_pkt_exit_tl": {"body": ["tx_pkt_exit_tl(${1:bfm}, ${0:tlp})"], "prefix": ["tx_pkt_exit_tl", "function:tx_pkt_exit_tl"], "description": "    virtual function void tx_pkt_exit_tl(\n\t    apci_device   bfm,\n\t    apci_tlp      tlp\n\t);\treturn;\n    "}}
{"tx_pkt_exit_dll": {"body": ["tx_pkt_exit_dll(${1:bfm}, ${0:pkt})"], "prefix": ["tx_pkt_exit_dll", "function:tx_pkt_exit_dll"], "description": "    virtual function void tx_pkt_exit_dll(\n\t    apci_device      bfm,\n\t    apci_packet      pkt\n\t);\treturn;\n    "}}
{"tx_pkt_exit_mac": {"body": ["tx_pkt_exit_mac(${1:bfm}, ${0:pkt})"], "prefix": ["tx_pkt_exit_mac", "function:tx_pkt_exit_mac"], "description": "    virtual function void tx_pkt_exit_mac(\n\t    apci_device      bfm,\n\t    apci_packet      pkt\n\t);\treturn;\n    "}}
{"tx_pkt_enter_lane": {"body": ["tx_pkt_enter_lane(${5:bfm}, ${4:port_id}, ${3:pkts}, ${2:syms}, ${1:os_after}, ${0:block128_index})"], "prefix": ["tx_pkt_enter_lane", "function:tx_pkt_enter_lane"], "description": "    virtual function void tx_pkt_enter_lane(\n\t    input apci_device    bfm,\n\t    input int            port_id,\n\t    ref   apci_packet    pkts      ,\n\t    ref   apci_raw_sym_t syms      ,\n\t    ref   apci_os        os_after,       \n\t    input int            block128_index\n\t);\treturn;\n    "}}
{"tx_os_enter_lane": {"body": ["tx_os_enter_lane(${3:bfm}, ${2:port_id}, ${1:active_oses}, ${0:inactive_oses})"], "prefix": ["tx_os_enter_lane", "function:tx_os_enter_lane"], "description": "    virtual function void tx_os_enter_lane(\n\t    input apci_device   bfm,\n\t    input int           port_id,\n\t    ref   apci_os       active_oses      ,\n\t    ref   apci_os       inactive_oses      \n\t);\treturn;\n    "}}
{"rx_os_enter_lane": {"body": ["rx_os_enter_lane(${2:bfm}, ${1:logic_lane_num}, ${0:os})"], "prefix": ["rx_os_enter_lane", "function:rx_os_enter_lane"], "description": "    virtual function void rx_os_enter_lane(\n\t    apci_device  bfm,\n\t    int          logic_lane_num,\n\t    apci_os      os\n\t);\treturn;\n    "}}
{"rx_pkt_enter_mac": {"body": ["rx_pkt_enter_mac(${1:bfm}, ${0:pkt})"], "prefix": ["rx_pkt_enter_mac", "function:rx_pkt_enter_mac"], "description": "    virtual function void rx_pkt_enter_mac(\n\t    apci_device  bfm,\n\t    apci_packet  pkt \n\t);\treturn;\n    "}}
{"rx_pkt_enter_dll": {"body": ["rx_pkt_enter_dll(${1:bfm}, ${0:pkt})"], "prefix": ["rx_pkt_enter_dll", "function:rx_pkt_enter_dll"], "description": "    virtual function void rx_pkt_enter_dll(\n\t    apci_device  bfm,\n\t    apci_packet  pkt \n\t);\treturn;\n    "}}
{"rx_pkt_enter_tl": {"body": ["rx_pkt_enter_tl(${1:bfm}, ${0:tlp})"], "prefix": ["rx_pkt_enter_tl", "function:rx_pkt_enter_tl"], "description": "    virtual function void rx_pkt_enter_tl(\n\t    apci_device  bfm,\n\t    apci_tlp     tlp\n\t);\treturn;\n    "}}
{"commit_data": {"body": ["commit_data(${0:host})"], "prefix": ["commit_data", "function:commit_data"], "description": "    virtual function void commit_data(\n\t    apci_device   host\n\t);\treturn;\n    "}}
{"tx_sym_before_scramble": {"body": ["tx_sym_before_scramble(${3:bfm}, ${2:port_id}, ${1:logic_lane_num}, ${0:raw})"], "prefix": ["tx_sym_before_scramble", "function:tx_sym_before_scramble"], "description": "    virtual function void tx_sym_before_scramble(\n            input apci_device    bfm           ,\n            input int            port_id       ,\n            input int            logic_lane_num,\n            inout apci_raw_sym_t raw            );\n    "}}
{"tx_sym_after_scramble": {"body": ["tx_sym_after_scramble(${3:bfm}, ${2:port_id}, ${1:logic_lane_num}, ${0:raw})"], "prefix": ["tx_sym_after_scramble", "function:tx_sym_after_scramble"], "description": "    virtual function void tx_sym_after_scramble(\n                  apci_device    bfm           ,\n                  int            port_id       ,\n                  int            logic_lane_num,\n            inout apci_raw_sym_t raw            );\n    "}}
{"rx_sym_before_scramble": {"body": ["rx_sym_before_scramble(${5:bfm}, ${4:port_id}, ${3:logic_lane_num}, ${2:sym}, ${1:os_type}, ${0:os_index})"], "prefix": ["rx_sym_before_scramble", "function:rx_sym_before_scramble"], "description": "    virtual function void rx_sym_before_scramble(\n            input apci_device    bfm           ,\n            input int            port_id       ,\n            input int            logic_lane_num,\n            inout bit             sym           ,\n\t    input apci_os_type   os_type       ,\n\t    input bit             os_index      \n\t);\n    "}}
{"rx_sym_after_scramble": {"body": ["rx_sym_after_scramble(${5:bfm}, ${4:port_id}, ${3:logic_lane_num}, ${2:sym}, ${1:os_type}, ${0:os_index})"], "prefix": ["rx_sym_after_scramble", "function:rx_sym_after_scramble"], "description": "    virtual function void rx_sym_after_scramble(\n            input apci_device    bfm           ,\n            input int            port_id       ,\n            input int            logic_lane_num,\n            inout bit             sym           ,\n\t    input apci_os_type   os_type       ,\n\t    input bit             os_index      \n\t);\n    "}}
{"start_acknak_latency_timer": {"body": ["start_acknak_latency_timer(${5:bfm}, ${4:latency_limit}, ${3:speed}, ${2:mps}, ${1:linkwidth}, ${0:latency})"], "prefix": ["start_acknak_latency_timer", "function:start_acknak_latency_timer"], "description": "    virtual function void start_acknak_latency_timer(\n                  apci_device bfm    ,\n                  int   latency_limit,\n                  int   speed        ,\n                  int   mps          ,\n                  int   linkwidth    ,\n            inout int   latency        \n       \t);\n    "}}
{"ltssm_transition": {"body": ["ltssm_transition(${3:bfm}, ${2:port_id}, ${1:from}, ${0:to})"], "prefix": ["ltssm_transition", "function:ltssm_transition"], "description": "    virtual function void ltssm_transition (\n                  apci_device        bfm    , \n                  int                port_id, \n                  apci_ltssm_state_e from   , \n                  apci_ltssm_state_e to\n       \t);\n    "}}
{"equalization_check_coef": {"body": ["equalization_check_coef(${11:bfm}, ${10:port_id}, ${9:logic_lane_num}, ${8:fs}, ${7:lf}, ${6:use_preset}, ${5:preset}, ${4:postcc}, ${3:cc}, ${2:precc}, ${1:sec_precc}, ${0:reject})"], "prefix": ["equalization_check_coef", "function:equalization_check_coef"], "description": "    virtual function void equalization_check_coef (\n\t          apci_device bfm           ,\n\t          int         port_id       ,\n\t          int         logic_lane_num,\n\t          byte        fs            ,\n\t          byte        lf            ,\n\t          bit         use_preset    ,\n\t    inout byte        preset        ,\n\t    inout bit          postcc        ,\n\t    inout bit          cc            ,\n\t    inout bit          precc         ,\n\t    inout bit          sec_precc     ,\n\t    inout bit         reject\n\t);\n    "}}
{"equalization_request_coef": {"body": ["equalization_request_coef(${10:bfm}, ${9:port_id}, ${8:logic_lane_num}, ${7:fs}, ${6:lf}, ${5:use_preset}, ${4:preset}, ${3:postcc}, ${2:cc}, ${1:precc}, ${0:sec_precc})"], "prefix": ["equalization_request_coef", "function:equalization_request_coef"], "description": "    virtual function void equalization_request_coef (\n\t          apci_device bfm           ,\n\t          int         port_id       ,\n\t          int         logic_lane_num,\n\t          byte        fs            ,\n\t          byte        lf            ,\n\t    inout bit         use_preset    ,\n\t    inout byte        preset        ,\n\t    inout bit          postcc        ,\n\t    inout bit          cc            ,\n\t    inout bit          precc         ,\n\t    inout bit          sec_precc\n\t);\n    "}}
{"rx_margin_cmd_before_update": {"body": ["rx_margin_cmd_before_update(${2:bfm}, ${1:logic_lane_num}, ${0:cmd})"], "prefix": ["rx_margin_cmd_before_update", "function:rx_margin_cmd_before_update"], "description": "    virtual function void rx_margin_cmd_before_update(\n            apci_device     bfm,\n            int             logic_lane_num,\n            apci_margin_cmd cmd\n        );      return;\n    "}}
{"mon_tx_os_enter_lane": {"body": ["mon_tx_os_enter_lane(${2:bfm}, ${1:logic_lane_num}, ${0:os})"], "prefix": ["mon_tx_os_enter_lane", "function:mon_tx_os_enter_lane"], "description": "    virtual function void mon_tx_os_enter_lane(\n\t    apci_device  bfm,\n\t    int          logic_lane_num,\n\t    apci_os      os\n\t);\treturn;\n    "}}
{"tx_pkt_after_encrypt": {"body": ["tx_pkt_after_encrypt(${1:bfm}, ${0:tlp})"], "prefix": ["tx_pkt_after_encrypt", "function:tx_pkt_after_encrypt"], "description": "    virtual function void tx_pkt_after_encrypt(\n            apci_device  bfm,\n            apci_tlp     tlp\n        );      return;\n    "}}
{"tx_flit_exit_dll": {"body": ["tx_flit_exit_dll(${1:bfm}, ${0:flit})"], "prefix": ["tx_flit_exit_dll", "function:tx_flit_exit_dll"], "description": "    virtual function void tx_flit_exit_dll(\n\t    apci_device   bfm,\n\t    apci_flit     flit \n\t);  return;\n    "}}
{"tx_flit_exit_mac": {"body": ["tx_flit_exit_mac(${1:bfm}, ${0:flit})"], "prefix": ["tx_flit_exit_mac", "function:tx_flit_exit_mac"], "description": "    virtual function void tx_flit_exit_mac(\n\t    apci_device   bfm,\n\t    apci_flit     flit \n\t);  return;\n    "}}
{"rx_flit_enter_mac": {"body": ["rx_flit_enter_mac(${1:bfm}, ${0:flit})"], "prefix": ["rx_flit_enter_mac", "function:rx_flit_enter_mac"], "description": "    virtual function void rx_flit_enter_mac(\n\t    apci_device   bfm,\n\t    apci_flit     flit \n\t);  return;\n    "}}
{"rx_doe_data": {"body": ["rx_doe_data(${3:bfm}, ${2:bdf}, ${1:rx_dwords}, ${0:user_tx_dwords})"], "prefix": ["rx_doe_data", "function:rx_doe_data"], "description": "    virtual function void rx_doe_data(\n            input apci_device bfm,\n\t    input apci_bdf_t  bdf,\n            ref   bit         rx_dwords      ,\n            ref   bit         user_tx_dwords      \n        );      return;\n    "}}
{"rx_device_cmd": {"body": ["rx_device_cmd(${1:bfm}, ${0:cmd})"], "prefix": ["rx_device_cmd", "task:rx_device_cmd"], "description": "    virtual task rx_device_cmd (\n            input apci_device     bfm,\n\t    input acxl_device_cmd cmd\n        );      return;\n    "}}
{"get_sym_time": {"body": ["get_sym_time(${0:rate})"], "prefix": ["get_sym_time", "function:get_sym_time"], "description": "function real get_sym_time(byte rate); \n    "}}
{"get_total_skew": {"body": ["get_total_skew(${0:skew})"], "prefix": ["get_total_skew", "function:get_total_skew"], "description": "function int get_total_skew(int skew);\n    "}}
{"new": {"body": ["new(${0:name})"], "prefix": ["new", "function:new"], "description": "    function new(string name=\"\");\n    "}}
{"clk_rate_2_period": {"body": ["clk_rate_2_period(${0:rate})"], "prefix": ["clk_rate_2_period", "function:clk_rate_2_period"], "description": "    function int clk_rate_2_period(int rate);\n    "}}
{"ccix_clk_rate_2_period": {"body": ["ccix_clk_rate_2_period(${0:rate})"], "prefix": ["ccix_clk_rate_2_period", "function:ccix_clk_rate_2_period"], "description": "    function int ccix_clk_rate_2_period(int rate);\n    "}}
{"A_modify_skpos": {"body": ["A_modify_skpos(${0:})"], "prefix": ["A_modify_skpos", "function:A_modify_skpos"], "description": "function void A_modify_skpos();\n    "}}
{"to_dataBusWidth": {"body": ["to_dataBusWidth(${0:n_bytes})"], "prefix": ["to_dataBusWidth", "function:to_dataBusWidth"], "description": "function int to_dataBusWidth(int n_bytes);\n    "}}
{"a_reset": {"body": ["a_reset(${0:})"], "prefix": ["a_reset", "task:a_reset"], "description": "task a_reset();\n    "}}
{"is_start_sos": {"body": ["is_start_sos(${0:sym})"], "prefix": ["is_start_sos", "function:is_start_sos"], "description": "function bit is_start_sos(apci_ebuf_data_t  sym);\n    "}}
{"dbg_phy_rx": {"body": ["dbg_phy_rx(${0:})"], "prefix": ["dbg_phy_rx", "task:dbg_phy_rx"], "description": "task dbg_phy_rx();\n    "}}
{"new": {"body": ["new(${0:name})"], "prefix": ["new", "function:new"], "description": "    function new(string name = \"apci_coverage_sampler\");\n    "}}
{"sample_tlp_at_dll": {"body": ["sample_tlp_at_dll(${0:p})"], "prefix": ["sample_tlp_at_dll", "function:sample_tlp_at_dll"], "description": "    virtual function void sample_tlp_at_dll(apci_packet p);\n    "}}
{"sample_tlp_dllp": {"body": ["sample_tlp_dllp(${0:p})"], "prefix": ["sample_tlp_dllp", "function:sample_tlp_dllp"], "description": "    virtual function void sample_tlp_dllp(apci_packet p);\n    "}}
{"sample_os": {"body": ["sample_os(${2:os}, ${1:ltssm_state}, ${0:link_speed})"], "prefix": ["sample_os", "function:sample_os"], "description": "    virtual function void sample_os(\n            apci_os            os         ,\n            apci_ltssm_state_e ltssm_state,\n            byte               link_speed);\n    "}}
{"new": {"body": ["new(${0:name})"], "prefix": ["new", "function:new"], "description": "    function new(string name = \"acxl_coverage_sampler\");\n    "}}
{"sample_cxl_msg": {"body": ["sample_cxl_msg(${0:m})"], "prefix": ["sample_cxl_msg", "function:sample_cxl_msg"], "description": "    virtual function void sample_cxl_msg(acxl_msg m);\n    "}}
{"sample_flit": {"body": ["sample_flit(${1:f}, ${0:cxl_host_tx})"], "prefix": ["sample_flit", "function:sample_flit"], "description": "    virtual function void sample_flit(acxl_flit f, bit cxl_host_tx);\n    "}}
{"sample_vlsm_state": {"body": ["sample_vlsm_state(${0:st})"], "prefix": ["sample_vlsm_state", "function:sample_vlsm_state"], "description": "    virtual function void sample_vlsm_state(acxl_vlsm_state_e st);\n    "}}
{"get_lf_fs_from_mac": {"body": ["get_lf_fs_from_mac(${0:})"], "prefix": ["get_lf_fs_from_mac", "task:get_lf_fs_from_mac"], "description": "task get_lf_fs_from_mac();\n    "}}
{"random_setting": {"body": ["random_setting(${1:is_preset}, ${0:coef})"], "prefix": ["random_setting", "function:random_setting"], "description": "function void random_setting(bit is_preset, inout pset_coef_t coef);\n    "}}
{"force_rcvr_detection": {"body": ["force_rcvr_detection(${0:detected})"], "prefix": ["force_rcvr_detection", "function:force_rcvr_detection"], "description": "function void force_rcvr_detection(bit       detected);\n    "}}
{"set_timing": {"body": ["set_timing(${2:entry}, ${1:lane_no}, ${0:n_pclks})"], "prefix": ["set_timing", "function:set_timing"], "description": "function void set_timing(string entry, byte lane_no, int n_pclks);\n    "}}
{"set_value": {"body": ["set_value(${2:entry}, ${1:lane_no}, ${0:value})"], "prefix": ["set_value", "function:set_value"], "description": "function void set_value(string entry, byte lane_no, int value);\n    "}}
{"new": {"body": ["new(${0:name})"], "prefix": ["new", "function:new"], "description": "    function new(string name = \"apci_test_info\");\n    "}}
{"add_dut": {"body": ["add_dut(${1:vendor_id}, ${0:device_id})"], "prefix": ["add_dut", "function:add_dut"], "description": "    virtual function void add_dut(int vendor_id, int device_id);\n    "}}
{"is_dut": {"body": ["is_dut(${1:vendor_id}, ${0:device_id})"], "prefix": ["is_dut", "function:is_dut"], "description": "    virtual function bit is_dut(int vendor_id, int device_id);\n    "}}
{"sprint": {"body": ["sprint(${0:prefix})"], "prefix": ["sprint", "function:sprint"], "description": "    virtual function string sprint(int verbosity = 0, string prefix = \"\");\n    "}}
{"new": {"body": ["new(${0:bfm})"], "prefix": ["new", "function:new"], "description": "function new(apci_device bfm);\n    "}}
{"wait_tx_msg": {"body": ["wait_tx_msg(${2:port_id}, ${1:code}, ${0:msg})"], "prefix": ["wait_tx_msg", "task:wait_tx_msg"], "description": "virtual task wait_tx_msg(int port_id, apci_msg_code_e code, time timer = 0, string msg = \"\");\n    "}}
{"wait_rx_msg": {"body": ["wait_rx_msg(${2:port_id}, ${1:code}, ${0:msg})"], "prefix": ["wait_rx_msg", "task:wait_rx_msg"], "description": "virtual task wait_rx_msg(int port_id, apci_msg_code_e code, time timer = 0, string msg = \"\");\n    "}}
{"wait_rx_err_msg": {"body": ["wait_rx_err_msg(${1:port_id}, ${0:tlp})"], "prefix": ["wait_rx_err_msg", "task:wait_rx_err_msg"], "description": "virtual task wait_rx_err_msg(int port_id, time timer = 0, string msg = \"\", output apci_tlp tlp);\n    "}}
{"wait_tx_dllp": {"body": ["wait_tx_dllp(${2:port_id}, ${1:t}, ${0:msg})"], "prefix": ["wait_tx_dllp", "task:wait_tx_dllp"], "description": "virtual task wait_tx_dllp(int port_id, apci_dllp_type t, time timer = 0, string msg = \"\");\n    "}}
{"wait_rx_dllp": {"body": ["wait_rx_dllp(${2:port_id}, ${1:t}, ${0:msg})"], "prefix": ["wait_rx_dllp", "task:wait_rx_dllp"], "description": "virtual task wait_rx_dllp(int port_id, apci_dllp_type t, time timer = 0, string msg = \"\");\n    "}}
{"msix_mask_unmask": {"body": ["msix_mask_unmask(${3:bdf}, ${2:is_mask}, ${1:int_vector}, ${0:err})"], "prefix": ["msix_mask_unmask", "task:msix_mask_unmask"], "description": "virtual task msix_mask_unmask(apci_bdf_t bdf, bit is_mask, int int_vector, output bit err);\n    "}}
{"get_interrupt_enabled": {"body": ["get_interrupt_enabled(${4:port_id}, ${3:func_id}, ${2:pin_enabled}, ${1:msi_enabled}, ${0:msix_enabled})"], "prefix": ["get_interrupt_enabled", "task:get_interrupt_enabled"], "description": "virtual task get_interrupt_enabled(\n        input  int port_id     ,\n        input  int func_id     ,\n        output bit pin_enabled ,\n        output bit msi_enabled ,\n        output bit msix_enabled );\n    "}}
{"clear_reg_interrupt_status": {"body": ["clear_reg_interrupt_status(${1:port_id}, ${0:func_id})"], "prefix": ["clear_reg_interrupt_status", "task:clear_reg_interrupt_status"], "description": "virtual task clear_reg_interrupt_status (\n        input  int port_id     ,\n        input  int func_id);\n    "}}
{"check_dev_type": {"body": ["check_dev_type(${1:dt}, ${0:msg})"], "prefix": ["check_dev_type", "function:check_dev_type"], "description": "local function void check_dev_type(apci_device_type dt, string msg);\n    "}}
{"convert_rw_size": {"body": ["convert_rw_size(${5:addr}, ${4:size}, ${3:dw_addr}, ${2:first_be}, ${1:last_be}, ${0:dw_size})"], "prefix": ["convert_rw_size", "function:convert_rw_size"], "description": "virtual function void convert_rw_size(\n    input  bit       addr,\t             bit       size,\t      output bit       dw_addr,\n           bit       first_be,\n           bit       last_be,\n           int       dw_size\n    );\n    "}}
{"dw_to_byte": {"body": ["dw_to_byte(${3:first_be}, ${2:last_be}, ${1:va}, ${0:ba})"], "prefix": ["dw_to_byte", "function:dw_to_byte"], "description": "virtual function void dw_to_byte(\n    input  bit       first_be,\n           bit       last_be,\n    ref    bit       va      ,\n    output bit       ba      \n    );\n    "}}
{"byte_to_dw": {"body": ["byte_to_dw(${4:first_be}, ${3:last_be}, ${2:dw_size}, ${1:ba}, ${0:va})"], "prefix": ["byte_to_dw", "function:byte_to_dw"], "description": "virtual function void byte_to_dw(\n    input  bit       first_be,\n           bit       last_be,\n           int       dw_size,\n           bit       ba      ,\n    ref    bit       va      \n    );\n    "}}
{"be_trace": {"body": ["be_trace(${2:be}, ${1:start}, ${0:limit})"], "prefix": ["be_trace", "function:be_trace"], "description": "local function void be_trace(\n    input  bit       be,\n    output int\t     start,\n\t   int\t     limit\n    );\n    "}}
{"rc_get_BDF_BAR": {"body": ["rc_get_BDF_BAR(${2:bdf2}, ${1:pcie_cap2}, ${0:total2})"], "prefix": ["rc_get_BDF_BAR", "task:rc_get_BDF_BAR"], "description": "task rc_get_BDF_BAR(   \n    input apci_bdf_t bdf2,\n    input apci_cap_type0 pcie_cap2,\n    input int start2= 0,       input int total2= 1);       "}}
{"send_doe_data": {"body": ["send_doe_data(${3:bdf}, ${2:doe_cap}, ${1:dd}, ${0:wait_response})"], "prefix": ["send_doe_data", "task:send_doe_data"], "description": "task send_doe_data(apci_bdf_t bdf, apci_cap_doe doe_cap, apci_doe_data dd, bit wait_response = 1);\n    "}}
{"fetch_doe_data": {"body": ["fetch_doe_data(${4:bdf}, ${3:cap}, ${2:req}, ${1:rsp}, ${0:err})"], "prefix": ["fetch_doe_data", "task:fetch_doe_data"], "description": "task fetch_doe_data(apci_bdf_t bdf, apci_cap_doe cap, apci_doe_data req, output apci_doe_data rsp, bit err);\n    "}}
{"do_doe_discovery": {"body": ["do_doe_discovery(${3:bdf}, ${2:doe_cap}, ${1:d_table}, ${0:err})"], "prefix": ["do_doe_discovery", "task:do_doe_discovery"], "description": "task do_doe_discovery(apci_bdf_t bdf, apci_cap_doe doe_cap, output apci_doe_discovery_table d_table, bit err);\n    "}}
{"do_doe_cdat_search": {"body": ["do_doe_cdat_search(${3:bdf}, ${2:doe_cap}, ${1:cdat}, ${0:err})"], "prefix": ["do_doe_cdat_search", "task:do_doe_cdat_search"], "description": "task do_doe_cdat_search(apci_bdf_t bdf, apci_cap_doe doe_cap, output acxl_coh_dev_attr_table cdat, bit err);\n    "}}
{"send_cxl_device_cmd": {"body": ["send_cxl_device_cmd(${0:cmd})"], "prefix": ["send_cxl_device_cmd", "task:send_cxl_device_cmd"], "description": "task send_cxl_device_cmd(acxl_device_cmd cmd);\n    "}}
{"cfgwr_wait_done": {"body": ["cfgwr_wait_done(${4:bdf}, ${3:offset}, ${2:v}, ${1:err}, ${0:dbg})"], "prefix": ["cfgwr_wait_done", "task:cfgwr_wait_done"], "description": "local task cfgwr_wait_done(apci_bdf_t bdf, avery_u16 offset, avery_u32 v, output bit err, input string dbg=\"\");\n    "}}
{"cfgrd_wait_done": {"body": ["cfgrd_wait_done(${4:bdf}, ${3:offset}, ${2:v}, ${1:err}, ${0:dbg})"], "prefix": ["cfgrd_wait_done", "task:cfgrd_wait_done"], "description": "local task cfgrd_wait_done(apci_bdf_t bdf, avery_u16 offset, output avery_u32 v, output bit err, input string dbg=\"\");\n    "}}
{"new": {"body": ["new(${0:parent})"], "prefix": ["new", "function:new"], "description": "    function new(string name = \"apci_uvm_seqr\", uvm_component parent = null);\n    "}}
{"tx_create_cxl_msg": {"body": ["tx_create_cxl_msg(${1:bfm}, ${0:msg})"], "prefix": ["tx_create_cxl_msg", "function:tx_create_cxl_msg"], "description": "    virtual function void tx_create_cxl_msg(\n\t    input apci_device   bfm,\n\t    input acxl_msg      msg\n\t);\n    "}}
{"tx_cxl_msg_exit_tl": {"body": ["tx_cxl_msg_exit_tl(${1:bfm}, ${0:msg})"], "prefix": ["tx_cxl_msg_exit_tl", "function:tx_cxl_msg_exit_tl"], "description": "    virtual function void tx_cxl_msg_exit_tl(\n\t    input apci_device      bfm,\n\t    input acxl_msg         msg \n\t);\treturn;\n    "}}
{"tx_flit_before_encrypt": {"body": ["tx_flit_before_encrypt(${1:bfm}, ${0:flit})"], "prefix": ["tx_flit_before_encrypt", "function:tx_flit_before_encrypt"], "description": "    virtual function void tx_flit_before_encrypt(\n\t    apci_device   bfm,\n\t    acxl_flit     flit \n\t);\n    "}}
{"tx_ide_mac_epoch_created": {"body": ["tx_ide_mac_epoch_created(${2:bfm}, ${1:last_flit}, ${0:truncated})"], "prefix": ["tx_ide_mac_epoch_created", "function:tx_ide_mac_epoch_created"], "description": "    virtual function void tx_ide_mac_epoch_created(\n\t    apci_device   bfm,\n\t    acxl_flit     last_flit,\n\t    bit           truncated\n\t);\n    "}}
{"tx_flit_exit_dll": {"body": ["tx_flit_exit_dll(${1:bfm}, ${0:flit})"], "prefix": ["tx_flit_exit_dll", "function:tx_flit_exit_dll"], "description": "    virtual function void tx_flit_exit_dll(\n\t    apci_device   bfm,\n\t    acxl_flit     flit \n\t);\n    "}}
{"tx_flit_exit_arbmux": {"body": ["tx_flit_exit_arbmux(${1:bfm}, ${0:flit})"], "prefix": ["tx_flit_exit_arbmux", "function:tx_flit_exit_arbmux"], "description": "    virtual function void tx_flit_exit_arbmux(\n\t    apci_device   bfm,\n\t    acxl_flit     flit \n\t);\n    "}}
{"tx_flit_exit_mac": {"body": ["tx_flit_exit_mac(${1:bfm}, ${0:flit})"], "prefix": ["tx_flit_exit_mac", "function:tx_flit_exit_mac"], "description": "    virtual function void tx_flit_exit_mac(\n\t    apci_device   bfm,\n\t    acxl_flit     flit \n\t);\n    "}}
{"rx_flit_enter_mac": {"body": ["rx_flit_enter_mac(${1:bfm}, ${0:flit})"], "prefix": ["rx_flit_enter_mac", "function:rx_flit_enter_mac"], "description": "    virtual function void rx_flit_enter_mac(\n\t    apci_device  bfm,\n\t    acxl_flit    flit\n\t);\n    "}}
{"rx_flit_enter_arbmux": {"body": ["rx_flit_enter_arbmux(${1:bfm}, ${0:flit})"], "prefix": ["rx_flit_enter_arbmux", "function:rx_flit_enter_arbmux"], "description": "    virtual function void rx_flit_enter_arbmux(\n\t    apci_device  bfm,\n\t    acxl_flit    flit\n\t);\n    "}}
{"rx_flit_enter_dll": {"body": ["rx_flit_enter_dll(${1:bfm}, ${0:flit})"], "prefix": ["rx_flit_enter_dll", "function:rx_flit_enter_dll"], "description": "    virtual function void rx_flit_enter_dll(\n\t    apci_device  bfm,\n\t    acxl_flit    flit\n\t);\n    "}}
{"rx_flit_after_decrypt": {"body": ["rx_flit_after_decrypt(${1:bfm}, ${0:flit})"], "prefix": ["rx_flit_after_decrypt", "function:rx_flit_after_decrypt"], "description": "    virtual function void rx_flit_after_decrypt(\n\t    apci_device  bfm,\n\t    acxl_flit    flit\n\t);\n    "}}
{"rx_cxl_msg_enter_tl": {"body": ["rx_cxl_msg_enter_tl(${1:bfm}, ${0:msg})"], "prefix": ["rx_cxl_msg_enter_tl", "function:rx_cxl_msg_enter_tl"], "description": "    virtual function void rx_cxl_msg_enter_tl(\n\t    input apci_device      bfm,\n\t    input acxl_msg         msg \n\t);\n    "}}
{"read_mem_line_cb": {"body": ["read_mem_line_cb(${2:addr}, ${1:bytes}, ${0:src})"], "prefix": ["read_mem_line_cb", "function:read_mem_line_cb"], "description": "    virtual function void read_mem_line_cb(\n\t    input bit               addr        ,\n\t    ref   bit               bytes           ,\n\t    input avery_data_base   src = null\n\t);\t\n    "}}
{"write_mem_line_cb": {"body": ["write_mem_line_cb(${3:addr}, ${2:byte_enable}, ${1:bytes}, ${0:src})"], "prefix": ["write_mem_line_cb", "function:write_mem_line_cb"], "description": "    virtual function void write_mem_line_cb(\n            input bit               addr        ,\n            input bit               byte_enable ,\n\t    ref   bit               bytes           ,\n\t    input avery_data_base   src = null       \n\t);\t\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"read_cap": {"body": ["read_cap(${3:bdf}, ${2:cap}, ${1:dw_offset}, ${0:first_be})"], "prefix": ["read_cap", "task:read_cap"], "description": "    protected task read_cap(\n\tapci_bdf_t\tbdf,\n\tapci_capability cap,\n\tbit             dw_offset,\n\tint\t\tnum_dw = 1,\n\tstring\t\ts      = \"\",\n\tbit      \tfirst_be = 4'hf\n\t);\n    "}}
{"write_cap": {"body": ["write_cap(${3:bdf}, ${2:cap}, ${1:dw_offset}, ${0:first_be})"], "prefix": ["write_cap", "task:write_cap"], "description": "    protected task write_cap(\n\t    apci_bdf_t      bdf,\n\t    apci_capability cap,\n\t    bit             dw_offset,\n\t    bit             fatal_if_err = 1,\n\t    bit      \t    first_be = 4'hf);\n    "}}
{"is_root_port": {"body": ["is_root_port(${0:})"], "prefix": ["is_root_port", "function:is_root_port"], "description": "    function bit is_root_port() ; return ptype inside {APCI_PORT_root_port}   \t                               ; endfunction\n    "}}
{"is_up_port": {"body": ["is_up_port(${0:})"], "prefix": ["is_up_port", "function:is_up_port"], "description": "    function bit is_up_port()   ; return ptype inside {APCI_PORT_ep, APCI_PORT_legacy_ep, APCI_PORT_swup_port} ; endfunction\n    "}}
{"is_dn_port": {"body": ["is_dn_port(${0:})"], "prefix": ["is_dn_port", "function:is_dn_port"], "description": "    function bit is_dn_port()   ; return ptype inside {APCI_PORT_root_port, APCI_PORT_swdn_port}               ; endfunction\n    "}}
{"is_bridge": {"body": ["is_bridge(${0:})"], "prefix": ["is_bridge", "function:is_bridge"], "description": "    function bit is_bridge()    ; return ptype inside {APCI_PORT_br_pcie2pci, APCI_PORT_br_pci2pcie}           ; endfunction\n    "}}
{"is_switch": {"body": ["is_switch(${0:})"], "prefix": ["is_switch", "function:is_switch"], "description": "    function bit is_switch()    ; return ptype inside {APCI_PORT_swup_port, APCI_PORT_swdn_port}               ; endfunction\n    "}}
{"is_rc_int": {"body": ["is_rc_int(${0:})"], "prefix": ["is_rc_int", "function:is_rc_int"], "description": "    function bit is_rc_int()    ; return ptype inside {APCI_PORT_rc_ie, APCI_PORT_rc_ec}                       ; endfunction\n    "}}
{"is_ep": {"body": ["is_ep(${0:})"], "prefix": ["is_ep", "function:is_ep"], "description": "    function bit is_ep()    \t; return ptype inside {APCI_PORT_ep, APCI_PORT_legacy_ep, APCI_PORT_rc_ie}     ; endfunction\n    "}}
{"is_rc": {"body": ["is_rc(${0:})"], "prefix": ["is_rc", "function:is_rc"], "description": "    function bit is_rc()        ; return ptype inside {APCI_PORT_root_port, APCI_PORT_rc_ec}                   ; endfunction\n    "}}
{"is_same": {"body": ["is_same(${1:wr_v}, ${0:rd_v})"], "prefix": ["is_same", "function:is_same"], "description": "    function bit is_same(avery_reg_field wr_v, avery_reg_field rd_v);\n    "}}
{"is_ro": {"body": ["is_ro(${1:wr_v}, ${0:rd_v})"], "prefix": ["is_ro", "function:is_ro"], "description": "    function bit is_ro(avery_reg_field wr_v, avery_reg_field rd_v);\n    "}}
{"is_rw": {"body": ["is_rw(${1:wr_v}, ${0:rd_v})"], "prefix": ["is_rw", "function:is_rw"], "description": "    function bit is_rw(avery_reg_field wr_v, avery_reg_field rd_v);\n    "}}
{"is_ro_zero": {"body": ["is_ro_zero(${1:wr_v}, ${0:rd_v})"], "prefix": ["is_ro_zero", "function:is_ro_zero"], "description": "    function bit is_ro_zero(avery_reg_field wr_v, avery_reg_field rd_v);\n    "}}
{"is_ro_ones": {"body": ["is_ro_ones(${1:wr_v}, ${0:rd_v})"], "prefix": ["is_ro_ones", "function:is_ro_ones"], "description": "    function bit is_ro_ones(avery_reg_field wr_v, avery_reg_field rd_v);\n    "}}
{"cap_dv_chk": {"body": ["cap_dv_chk(${2:cap}, ${1:na}, ${0:num_dw})"], "prefix": ["cap_dv_chk", "task:cap_dv_chk"], "description": "    task cap_dv_chk(apci_capability cap, ref bit na, input bit        num_dw = 0);\n    "}}
{"cfg_header_chk": {"body": ["cfg_header_chk(${3:bdf}, ${2:cap}, ${1:cap_name}, ${0:is_ext})"], "prefix": ["cfg_header_chk", "task:cfg_header_chk"], "description": "    task cfg_header_chk(\n\tapci_bdf_t\tbdf,\n\tapci_capability cap,\n\tstring\t\tcap_name,\n\tbit\t\tis_ext   = 0\n\t);\n    "}}
{"cap_in_rcrb": {"body": ["cap_in_rcrb(${1:cap}, ${0:in_rcrb})"], "prefix": ["cap_in_rcrb", "task:cap_in_rcrb"], "description": "    protected task cap_in_rcrb(input apci_capability cap, output bit in_rcrb);\n    "}}
{"gen_aspm_combine_table1": {"body": ["gen_aspm_combine_table1(${2:uaspm}, ${1:daspm}, ${0:aspms})"], "prefix": ["gen_aspm_combine_table1", "function:gen_aspm_combine_table1"], "description": "    protected function void gen_aspm_combine_table1(\n\tinput  bit      \t    uaspm,\n\t       bit      \t    daspm,\n\tref    aspm_combine aspms      \n\t);\n    "}}
{"gen_aspm_combine_table2": {"body": ["gen_aspm_combine_table2(${2:uaspm}, ${1:daspm}, ${0:aspms})"], "prefix": ["gen_aspm_combine_table2", "function:gen_aspm_combine_table2"], "description": "    protected function void gen_aspm_combine_table2(\n\tinput  bit      \t    uaspm,\n\t       bit      \t    daspm,\n\tref    aspm_combine aspms      \n\t);\n    "}}
{"gen_aspm_combine_table3": {"body": ["gen_aspm_combine_table3(${2:uaspm}, ${1:daspm}, ${0:aspms})"], "prefix": ["gen_aspm_combine_table3", "function:gen_aspm_combine_table3"], "description": "    protected function void gen_aspm_combine_table3(\n\tinput  bit      \t    uaspm,\n\t       bit      \t    daspm,\n\tref    aspm_combine aspms      \n\t);\n    "}}
{"gen_aspm_combine_table4": {"body": ["gen_aspm_combine_table4(${2:uaspm}, ${1:daspm}, ${0:aspms})"], "prefix": ["gen_aspm_combine_table4", "function:gen_aspm_combine_table4"], "description": "    protected function void gen_aspm_combine_table4(\n\tinput  bit      \t    uaspm,\n\t       bit      \t    daspm,\n\tref    aspm_combine aspms      \n\t);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"chk_dv_pcie": {"body": ["chk_dv_pcie(${0:ero_is_zero})"], "prefix": ["chk_dv_pcie", "function:chk_dv_pcie"], "description": "    local function void chk_dv_pcie(bit ero_is_zero);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"chk_dv_pcie": {"body": ["chk_dv_pcie(${0:})"], "prefix": ["chk_dv_pcie", "function:chk_dv_pcie"], "description": "    local function void chk_dv_pcie();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"chk_dv_pcie": {"body": ["chk_dv_pcie(${0:})"], "prefix": ["chk_dv_pcie", "function:chk_dv_pcie"], "description": "    local function void chk_dv_pcie();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"chk_dv_pcie": {"body": ["chk_dv_pcie(${0:after_flr})"], "prefix": ["chk_dv_pcie", "function:chk_dv_pcie"], "description": "    local function void chk_dv_pcie(bit after_flr = 0);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();    \n    "}}
{"step7_10": {"body": ["step7_10(${0:})"], "prefix": ["step7_10", "task:step7_10"], "description": "    local task step7_10();\n    "}}
{"step8": {"body": ["step8(${0:})"], "prefix": ["step8", "task:step8"], "description": "    local task step8();\n    "}}
{"step9": {"body": ["step9(${0:})"], "prefix": ["step9", "task:step9"], "description": "    local task step9();\n    "}}
{"step10": {"body": ["step10(${0:})"], "prefix": ["step10", "task:step10"], "description": "    local task step10();\n    "}}
{"chk_dv_pcie": {"body": ["chk_dv_pcie(${0:})"], "prefix": ["chk_dv_pcie", "function:chk_dv_pcie"], "description": "    local function void chk_dv_pcie();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();    \n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();    \n    "}}
{"chk_dv_pcie": {"body": ["chk_dv_pcie(${0:})"], "prefix": ["chk_dv_pcie", "function:chk_dv_pcie"], "description": "    local function void chk_dv_pcie();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    task run();\n    "}}
{"chk_dv_msi": {"body": ["chk_dv_msi(${0:})"], "prefix": ["chk_dv_msi", "function:chk_dv_msi"], "description": "    local function void chk_dv_msi();\n    "}}
{"gen_bit_string": {"body": ["gen_bit_string(${0:q})"], "prefix": ["gen_bit_string", "function:gen_bit_string"], "description": "    local function string gen_bit_string(ref int q      );\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"pre_chk": {"body": ["pre_chk(${0:})"], "prefix": ["pre_chk", "task:pre_chk"], "description": "    local task pre_chk();\n    "}}
{"read_aer_cap": {"body": ["read_aer_cap(${0:cap})"], "prefix": ["read_aer_cap", "task:read_aer_cap"], "description": "    local task read_aer_cap(apci_cap_aer cap);\n    "}}
{"chk_dv_uncorrectable_error_status": {"body": ["chk_dv_uncorrectable_error_status(${0:})"], "prefix": ["chk_dv_uncorrectable_error_status", "task:chk_dv_uncorrectable_error_status"], "description": "    local task chk_dv_uncorrectable_error_status();\n    "}}
{"chk_dv_uncorrectable_error_mask": {"body": ["chk_dv_uncorrectable_error_mask(${0:})"], "prefix": ["chk_dv_uncorrectable_error_mask", "task:chk_dv_uncorrectable_error_mask"], "description": "    local task chk_dv_uncorrectable_error_mask();\n    "}}
{"chk_dv_uncorrectable_error_severity": {"body": ["chk_dv_uncorrectable_error_severity(${0:})"], "prefix": ["chk_dv_uncorrectable_error_severity", "task:chk_dv_uncorrectable_error_severity"], "description": "    local task chk_dv_uncorrectable_error_severity();\n    "}}
{"chk_dv_correctable_error_status": {"body": ["chk_dv_correctable_error_status(${0:})"], "prefix": ["chk_dv_correctable_error_status", "task:chk_dv_correctable_error_status"], "description": "    local task chk_dv_correctable_error_status();\n    "}}
{"chk_dv_correctable_error_mask": {"body": ["chk_dv_correctable_error_mask(${0:})"], "prefix": ["chk_dv_correctable_error_mask", "task:chk_dv_correctable_error_mask"], "description": "    local task chk_dv_correctable_error_mask();\n    "}}
{"step20": {"body": ["step20(${0:})"], "prefix": ["step20", "task:step20"], "description": "    local task step20();\n    "}}
{"chk_dv_root_error": {"body": ["chk_dv_root_error(${0:})"], "prefix": ["chk_dv_root_error", "task:chk_dv_root_error"], "description": "    local task chk_dv_root_error();\n    "}}
{"chk_dv_sec_err_reg": {"body": ["chk_dv_sec_err_reg(${0:})"], "prefix": ["chk_dv_sec_err_reg", "task:chk_dv_sec_err_reg"], "description": "    local task chk_dv_sec_err_reg();\n    "}}
{"aer_cap_chk_field_attr": {"body": ["aer_cap_chk_field_attr(${0:})"], "prefix": ["aer_cap_chk_field_attr", "task:aer_cap_chk_field_attr"], "description": "    local task aer_cap_chk_field_attr();\n    "}}
{"chk_attr_uncorrectable_error_status": {"body": ["chk_attr_uncorrectable_error_status(${0:})"], "prefix": ["chk_attr_uncorrectable_error_status", "task:chk_attr_uncorrectable_error_status"], "description": "    local task chk_attr_uncorrectable_error_status();\n    "}}
{"chk_attr_uncorrectable_error_mask": {"body": ["chk_attr_uncorrectable_error_mask(${0:})"], "prefix": ["chk_attr_uncorrectable_error_mask", "task:chk_attr_uncorrectable_error_mask"], "description": "    local task chk_attr_uncorrectable_error_mask();\n    "}}
{"chk_attr_uncorrectable_error_severity": {"body": ["chk_attr_uncorrectable_error_severity(${0:})"], "prefix": ["chk_attr_uncorrectable_error_severity", "task:chk_attr_uncorrectable_error_severity"], "description": "    local task chk_attr_uncorrectable_error_severity();\n    "}}
{"chk_attr_correctable_error_status": {"body": ["chk_attr_correctable_error_status(${0:})"], "prefix": ["chk_attr_correctable_error_status", "task:chk_attr_correctable_error_status"], "description": "    local task chk_attr_correctable_error_status();\n    "}}
{"chk_attr_correctable_error_mask": {"body": ["chk_attr_correctable_error_mask(${0:})"], "prefix": ["chk_attr_correctable_error_mask", "task:chk_attr_correctable_error_mask"], "description": "    local task chk_attr_correctable_error_mask();\n    "}}
{"chk_attr_advanced_err_ctrl": {"body": ["chk_attr_advanced_err_ctrl(${0:})"], "prefix": ["chk_attr_advanced_err_ctrl", "task:chk_attr_advanced_err_ctrl"], "description": "    local task chk_attr_advanced_err_ctrl();\n    "}}
{"chk_attr_root_err": {"body": ["chk_attr_root_err(${0:})"], "prefix": ["chk_attr_root_err", "task:chk_attr_root_err"], "description": "    local task chk_attr_root_err();\n    "}}
{"chk_attr_err_source_id": {"body": ["chk_attr_err_source_id(${0:})"], "prefix": ["chk_attr_err_source_id", "task:chk_attr_err_source_id"], "description": "    local task chk_attr_err_source_id();\n    "}}
{"chk_sticky_bits": {"body": ["chk_sticky_bits(${0:})"], "prefix": ["chk_sticky_bits", "function:chk_sticky_bits"], "description": "    local function void chk_sticky_bits();\n    "}}
{"chk_dv_after_reset": {"body": ["chk_dv_after_reset(${0:})"], "prefix": ["chk_dv_after_reset", "function:chk_dv_after_reset"], "description": "    local function void chk_dv_after_reset();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"step18": {"body": ["step18(${0:vc_cnt})"], "prefix": ["step18", "task:step18"], "description": "    local task step18(int vc_cnt);\n    "}}
{"chk_attr_vc_src": {"body": ["chk_attr_vc_src(${0:vc_cnt})"], "prefix": ["chk_attr_vc_src", "task:chk_attr_vc_src"], "description": "    local task chk_attr_vc_src(int vc_cnt);\n    "}}
{"print_vc_reg": {"body": ["print_vc_reg(${0:cap})"], "prefix": ["print_vc_reg", "function:print_vc_reg"], "description": "    local function string print_vc_reg(apci_cap_vc cap);\n    "}}
{"print_vc_src_reg": {"body": ["print_vc_src_reg(${1:cap}, ${0:vc_cnt})"], "prefix": ["print_vc_src_reg", "function:print_vc_src_reg"], "description": "    local function string print_vc_src_reg(apci_cap_vc cap, int vc_cnt);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"step9_11": {"body": ["step9_11(${3:pwr_bdg_cap}, ${2:dsv}, ${1:is_return_zero}, ${0:data_set})"], "prefix": ["step9_11", "task:step9_11"], "description": "    task step9_11(\n\tinput  apci_cap_power_budget pwr_bdg_cap,\n\t       bit       \t     dsv,\n\toutput bit\t\t     is_return_zero,\n\tref    int\t\t     data_set            \n\t);\n    "}}
{"data_sel_data_attr_chk": {"body": ["data_sel_data_attr_chk(${1:pwr_bdg_cap}, ${0:pwr_bdg_cap2})"], "prefix": ["data_sel_data_attr_chk", "task:data_sel_data_attr_chk"], "description": "    local task data_sel_data_attr_chk(\n\tapci_cap_power_budget pwr_bdg_cap,\n\tapci_cap_power_budget pwr_bdg_cap2\n\t);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"chk_dv_type0": {"body": ["chk_dv_type0(${0:})"], "prefix": ["chk_dv_type0", "task:chk_dv_type0"], "description": "    local task chk_dv_type0();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"chk_dv_type0": {"body": ["chk_dv_type0(${0:})"], "prefix": ["chk_dv_type0", "function:chk_dv_type0"], "description": "    local function void chk_dv_type0();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"chk_intr_reg_type0": {"body": ["chk_intr_reg_type0(${0:})"], "prefix": ["chk_intr_reg_type0", "task:chk_intr_reg_type0"], "description": "    local task chk_intr_reg_type0();\n    "}}
{"chk_intr_reg_type1": {"body": ["chk_intr_reg_type1(${0:})"], "prefix": ["chk_intr_reg_type1", "task:chk_intr_reg_type1"], "description": "    local task chk_intr_reg_type1();\n    "}}
{"step3": {"body": ["step3(${0:})"], "prefix": ["step3", "task:step3"], "description": "    local task step3();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"pre_chk": {"body": ["pre_chk(${0:})"], "prefix": ["pre_chk", "task:pre_chk"], "description": "    local task pre_chk();\n    "}}
{"step13_18": {"body": ["step13_18(${0:})"], "prefix": ["step13_18", "task:step13_18"], "description": "    local task step13_18();\n    "}}
{"step13_15": {"body": ["step13_15(${0:data_select})"], "prefix": ["step13_15", "task:step13_15"], "description": "    local task step13_15(bit        data_select);\n    "}}
{"step16": {"body": ["step16(${0:})"], "prefix": ["step16", "task:step16"], "description": "    local task step16();\n    "}}
{"step17": {"body": ["step17(${0:})"], "prefix": ["step17", "task:step17"], "description": "    local task step17();\n    "}}
{"step18": {"body": ["step18(${0:})"], "prefix": ["step18", "task:step18"], "description": "    local task step18();\n    "}}
{"chk_dv_pwr_mgmt": {"body": ["chk_dv_pwr_mgmt(${0:})"], "prefix": ["chk_dv_pwr_mgmt", "function:chk_dv_pwr_mgmt"], "description": "    local function void chk_dv_pwr_mgmt();\n    "}}
{"chk_status_ctrl_attr": {"body": ["chk_status_ctrl_attr(${0:data_select})"], "prefix": ["chk_status_ctrl_attr", "task:chk_status_ctrl_attr"], "description": "    local task chk_status_ctrl_attr(bit        data_select);\n    "}}
{"sprint_status_ctrl": {"body": ["sprint_status_ctrl(${0:cap})"], "prefix": ["sprint_status_ctrl", "function:sprint_status_ctrl"], "description": "    local function string sprint_status_ctrl(apci_cap_power_mgmt cap);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"step2": {"body": ["step2(${0:})"], "prefix": ["step2", "task:step2"], "description": "    local task step2();\n    "}}
{"step8c": {"body": ["step8c(${0:})"], "prefix": ["step8c", "task:step8c"], "description": "    local task step8c();\n    "}}
{"step11c": {"body": ["step11c(${0:})"], "prefix": ["step11c", "task:step11c"], "description": "    task step11c();\n    "}}
{"chk_dv_msix": {"body": ["chk_dv_msix(${0:})"], "prefix": ["chk_dv_msix", "task:chk_dv_msix"], "description": "    local task chk_dv_msix();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"step3": {"body": ["step3(${0:})"], "prefix": ["step3", "task:step3"], "description": "    local task step3();\n    "}}
{"step4": {"body": ["step4(${0:})"], "prefix": ["step4", "task:step4"], "description": "    local task step4();\n    "}}
{"step5_8": {"body": ["step5_8(${0:})"], "prefix": ["step5_8", "task:step5_8"], "description": "    local task step5_8();\n    "}}
{"step6": {"body": ["step6(${1:bar_num}, ${0:bar})"], "prefix": ["step6", "task:step6"], "description": "    local task step6(\n\tinput int\tbar_num,\n\t      avery_u32 bar\n\t);\n    "}}
{"step7": {"body": ["step7(${1:bar_num}, ${0:bar})"], "prefix": ["step7", "task:step7"], "description": "    local task step7(\n\tinput int bar_num,\n\tavery_u64 bar\n\t);\n    "}}
{"write_all_one_to_bar": {"body": ["write_all_one_to_bar(${0:})"], "prefix": ["write_all_one_to_bar", "task:write_all_one_to_bar"], "description": "    local task write_all_one_to_bar();\n    "}}
{"wr_bar": {"body": ["wr_bar(${3:read_v}, ${2:v}, ${1:bar_num}, ${0:is_64})"], "prefix": ["wr_bar", "task:wr_bar"], "description": "    local task wr_bar(\n\toutput avery_u64 read_v,\n\tinput  avery_u64 v,\n\t       int\t bar_num, \n\t       bit\t is_64 = 0\n\t);\n    "}}
{"chk_io_bar_rw": {"body": ["chk_io_bar_rw(${2:lsb}, ${1:bar}, ${0:bar2})"], "prefix": ["chk_io_bar_rw", "function:chk_io_bar_rw"], "description": "    local function void chk_io_bar_rw(int lsb, avery_u32 bar, avery_u32 bar2);\n    "}}
{"chk_mem_bar_rw": {"body": ["chk_mem_bar_rw(${4:lsb}, ${3:bar}, ${2:bar2}, ${1:prefetchable}, ${0:is_64})"], "prefix": ["chk_mem_bar_rw", "function:chk_mem_bar_rw"], "description": "    local function void chk_mem_bar_rw(int lsb, avery_u64 bar, avery_u64 bar2, bit prefetchable, bit is_64 = 0);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"step18": {"body": ["step18(${0:vc_cnt})"], "prefix": ["step18", "task:step18"], "description": "    local task step18(int vc_cnt);\n    "}}
{"chk_attr_mfvc_src": {"body": ["chk_attr_mfvc_src(${0:vc_cnt})"], "prefix": ["chk_attr_mfvc_src", "task:chk_attr_mfvc_src"], "description": "    local task chk_attr_mfvc_src(int vc_cnt);\n    "}}
{"print_mfvc_reg": {"body": ["print_mfvc_reg(${0:cap})"], "prefix": ["print_mfvc_reg", "function:print_mfvc_reg"], "description": "    local function string print_mfvc_reg(apci_cap_mfvc cap);\n    "}}
{"print_mfvc_src_reg": {"body": ["print_mfvc_src_reg(${1:cap}, ${0:vc_cnt})"], "prefix": ["print_mfvc_src_reg", "function:print_mfvc_src_reg"], "description": "    local function string print_mfvc_src_reg(apci_cap_vc cap, int vc_cnt);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run(); \n    "}}
{"test_for_each_vsec_cap": {"body": ["test_for_each_vsec_cap(${0:addr})"], "prefix": ["test_for_each_vsec_cap", "task:test_for_each_vsec_cap"], "description": "    local task test_for_each_vsec_cap(input bit        addr);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"chk_dv_type0": {"body": ["chk_dv_type0(${0:})"], "prefix": ["chk_dv_type0", "task:chk_dv_type0"], "description": "    local task chk_dv_type0();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"step4_6": {"body": ["step4_6(${0:cap_offset})"], "prefix": ["step4_6", "task:step4_6"], "description": "    local task step4_6(input bit       cap_offset);\n    "}}
{"step4_5": {"body": ["step4_5(${0:cap_offset})"], "prefix": ["step4_5", "task:step4_5"], "description": "    local task step4_5(inout bit       cap_offset);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"test_for_cfg_space": {"body": ["test_for_cfg_space(${0:})"], "prefix": ["test_for_cfg_space", "task:test_for_cfg_space"], "description": "    local task test_for_cfg_space();\n    "}}
{"test_for_rcrb": {"body": ["test_for_rcrb(${0:})"], "prefix": ["test_for_rcrb", "task:test_for_rcrb"], "description": "    local task test_for_rcrb();\n    "}}
{"step6_7": {"body": ["step6_7(${0:cap_offset})"], "prefix": ["step6_7", "function:step6_7"], "description": "    local function void step6_7(bit        cap_offset);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"step7_11": {"body": ["step7_11(${0:})"], "prefix": ["step7_11", "task:step7_11"], "description": "    local task step7_11();\n    "}}
{"bar_wr_check": {"body": ["bar_wr_check(${1:wr_data}, ${0:lsb})"], "prefix": ["bar_wr_check", "task:bar_wr_check"], "description": "    local task bar_wr_check(\n        input avery_u32 wr_data,\n\t      int\tlsb\n        );\n    "}}
{"chk_dv_type0": {"body": ["chk_dv_type0(${0:})"], "prefix": ["chk_dv_type0", "function:chk_dv_type0"], "description": "    local function void chk_dv_type0();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"chk_dv_type1": {"body": ["chk_dv_type1(${0:})"], "prefix": ["chk_dv_type1", "function:chk_dv_type1"], "description": "    local function void chk_dv_type1();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"step10": {"body": ["step10(${0:})"], "prefix": ["step10", "task:step10"], "description": "    local task step10();\n    "}}
{"step12": {"body": ["step12(${0:})"], "prefix": ["step12", "task:step12"], "description": "    local task step12();\n    "}}
{"step13": {"body": ["step13(${0:})"], "prefix": ["step13", "task:step13"], "description": "    local task step13();\n    "}}
{"step15_17": {"body": ["step15_17(${0:})"], "prefix": ["step15_17", "task:step15_17"], "description": "    task step15_17();\n    "}}
{"chk_pre_value": {"body": ["chk_pre_value(${0:is_another})"], "prefix": ["chk_pre_value", "task:chk_pre_value"], "description": "    local task chk_pre_value(bit is_another = 0);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"chk_dv_acs": {"body": ["chk_dv_acs(${0:})"], "prefix": ["chk_dv_acs", "function:chk_dv_acs"], "description": "    local function void chk_dv_acs();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"dpa_step20": {"body": ["dpa_step20(${2:ssmax}, ${1:dpa_cap}, ${0:dpa_cap2})"], "prefix": ["dpa_step20", "task:dpa_step20"], "description": "    task dpa_step20(\n        input int ssmax,\n        input apci_cap_dpa dpa_cap,\n        input apci_cap_dpa dpa_cap2\n    );\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"step_19": {"body": ["step_19(${0:nbar})"], "prefix": ["step_19", "task:step_19"], "description": "    task step_19(int nbar);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"step21": {"body": ["step21(${0:nbar})"], "prefix": ["step21", "task:step21"], "description": "    task step21(int nbar);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"chk_dv_mc": {"body": ["chk_dv_mc(${0:})"], "prefix": ["chk_dv_mc", "function:chk_dv_mc"], "description": "    local function void chk_dv_mc();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"dv_chk_ltr": {"body": ["dv_chk_ltr(${0:})"], "prefix": ["dv_chk_ltr", "function:dv_chk_ltr"], "description": "    local function void dv_chk_ltr();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();    \n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"wr_select_bar": {"body": ["wr_select_bar(${0:select_bar})"], "prefix": ["wr_select_bar", "task:wr_select_bar"], "description": "    local task wr_select_bar (int select_bar = 0);\n    "}}
{"chk_dv_sriov": {"body": ["chk_dv_sriov(${0:})"], "prefix": ["chk_dv_sriov", "function:chk_dv_sriov"], "description": "    local function void chk_dv_sriov();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"chk_dv_pasid": {"body": ["chk_dv_pasid(${0:})"], "prefix": ["chk_dv_pasid", "task:chk_dv_pasid"], "description": "    task chk_dv_pasid();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"chk_dv_lnr": {"body": ["chk_dv_lnr(${0:})"], "prefix": ["chk_dv_lnr", "function:chk_dv_lnr"], "description": "    local function void chk_dv_lnr();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"chk_dv_dpc": {"body": ["chk_dv_dpc(${0:})"], "prefix": ["chk_dv_dpc", "function:chk_dv_dpc"], "description": "    local function void chk_dv_dpc();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"chk_dv_ptm": {"body": ["chk_dv_ptm(${0:})"], "prefix": ["chk_dv_ptm", "function:chk_dv_ptm"], "description": "    local function void chk_dv_ptm();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"chk_dv_frs": {"body": ["chk_dv_frs(${0:})"], "prefix": ["chk_dv_frs", "function:chk_dv_frs"], "description": "    local function void chk_dv_frs();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"under": {"body": ["under(${0:register})"], "prefix": ["under", "function:under"], "description": "\t   ii.If the function under test reports the Capability Version field (PCI Express Capabilities register) is 2h or greater:\\n\\\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"chk_dv_hid": {"body": ["chk_dv_hid(${0:})"], "prefix": ["chk_dv_hid", "function:chk_dv_hid"], "description": "    local function void chk_dv_hid();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${3:bfm}, ${2:func}, ${1:dn_bfm}, ${0:port_id})"], "prefix": ["new", "function:new"], "description": "    function new(\n\tapci_device    bfm, \n\tapci_func_info func, \n\tapci_device    dn_bfm,\n\tint\t       port_id\t  \t);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"aspm_test_for_table1": {"body": ["aspm_test_for_table1(${0:})"], "prefix": ["aspm_test_for_table1", "task:aspm_test_for_table1"], "description": "    protected task aspm_test_for_table1();\n    "}}
{"aspm_test_for_table2": {"body": ["aspm_test_for_table2(${0:})"], "prefix": ["aspm_test_for_table2", "task:aspm_test_for_table2"], "description": "    protected task aspm_test_for_table2();\n    "}}
{"aspm_test_for_table3": {"body": ["aspm_test_for_table3(${0:})"], "prefix": ["aspm_test_for_table3", "task:aspm_test_for_table3"], "description": "    protected task aspm_test_for_table3();\n    "}}
{"aspm_test_for_table4": {"body": ["aspm_test_for_table4(${0:})"], "prefix": ["aspm_test_for_table4", "task:aspm_test_for_table4"], "description": "    protected task aspm_test_for_table4();\n    "}}
{"collect_all_bdfs": {"body": ["collect_all_bdfs(${0:})"], "prefix": ["collect_all_bdfs", "task:collect_all_bdfs"], "description": "    protected task collect_all_bdfs();\n    "}}
{"aspm_cfg_test": {"body": ["aspm_cfg_test(${1:up_aspm_ctrl}, ${0:dn_aspm_ctrl})"], "prefix": ["aspm_cfg_test", "task:aspm_cfg_test"], "description": "    local task aspm_cfg_test(\n\tinput bit       up_aspm_ctrl,\n\t      bit       dn_aspm_ctrl\n\t);\n    "}}
{"set_link_ctrl": {"body": ["set_link_ctrl(${1:up_aspm_ctrl}, ${0:dn_aspm_ctrl})"], "prefix": ["set_link_ctrl", "task:set_link_ctrl"], "description": "    protected task set_link_ctrl(\n\tinput bit       up_aspm_ctrl,\n\tinput bit       dn_aspm_ctrl\n\t);\n    "}}
{"chk_aspm_state": {"body": ["chk_aspm_state(${1:up_aspm_ctrl}, ${0:dn_aspm_ctrl})"], "prefix": ["chk_aspm_state", "task:chk_aspm_state"], "description": "    protected task chk_aspm_state(\n\tinput bit       up_aspm_ctrl,\n\t      bit       dn_aspm_ctrl\n\t);\n    "}}
{"chk_up_aspm_state_L0s": {"body": ["chk_up_aspm_state_L0s(${5:L0s_en}, ${4:L0s_sup}, ${3:dn_L0s_en}, ${2:dn_L0s_sup}, ${1:enable_L1}, ${0:others_L0s_sup})"], "prefix": ["chk_up_aspm_state_L0s", "task:chk_up_aspm_state_L0s"], "description": "    local task chk_up_aspm_state_L0s(\n\tinput bit L0s_en,\n\t      bit L0s_sup,\n\t      bit dn_L0s_en,\n\t      bit dn_L0s_sup,\n\t      bit enable_L1,\t  \t      bit others_L0s_sup\n\t);\n    "}}
{"chk_up_aspm_state_L1": {"body": ["chk_up_aspm_state_L1(${0:enable_L1})"], "prefix": ["chk_up_aspm_state_L1", "task:chk_up_aspm_state_L1"], "description": "    local task chk_up_aspm_state_L1(\n\tinput bit enable_L1\n\t);\n    "}}
{"cfg_reg_after_rst": {"body": ["cfg_reg_after_rst(${1:cap}, ${0:f})"], "prefix": ["cfg_reg_after_rst", "task:cfg_reg_after_rst"], "description": "    protected task cfg_reg_after_rst(\n\tinput apci_capability cap,\n\t      avery_reg_field f\n\t);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"step4_11": {"body": ["step4_11(${0:aspm_set})"], "prefix": ["step4_11", "task:step4_11"], "description": "    local task step4_11(\n\tinput  aspm_combine aspm_set\n\t);\n    "}}
{"set_aspm_cfg": {"body": ["set_aspm_cfg(${0:aspm_set})"], "prefix": ["set_aspm_cfg", "task:set_aspm_cfg"], "description": "    local task set_aspm_cfg(\n\tinput  aspm_combine aspm_set\n\t);\n    "}}
{"new": {"body": ["new(${3:bfm}, ${2:func}, ${1:chk_bfm}, ${0:port_id})"], "prefix": ["new", "function:new"], "description": "    function new(\n\tapci_device    bfm, \n\tapci_func_info func, \n\tapci_device    chk_bfm,\n\tint\t       port_id\n\t);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"send_att_msg": {"body": ["send_att_msg(${0:v})"], "prefix": ["send_att_msg", "task:send_att_msg"], "description": "    local task send_att_msg(bit        v);\n    "}}
{"send_pwr_msg": {"body": ["send_pwr_msg(${0:v})"], "prefix": ["send_pwr_msg", "task:send_pwr_msg"], "description": "    local task send_pwr_msg(bit        v);\n    "}}
{"rand_send_att_pwr_msg": {"body": ["rand_send_att_pwr_msg(${0:})"], "prefix": ["rand_send_att_pwr_msg", "task:rand_send_att_pwr_msg"], "description": "    local task rand_send_att_pwr_msg();\n    "}}
{"chk_cfg_reg": {"body": ["chk_cfg_reg(${0:})"], "prefix": ["chk_cfg_reg", "task:chk_cfg_reg"], "description": "    local task chk_cfg_reg();\n    "}}
{"new": {"body": ["new(${3:bfm}, ${2:func}, ${1:dn_bfm}, ${0:port_id})"], "prefix": ["new", "function:new"], "description": "    function new(\n\tapci_device    bfm, \n\tapci_func_info func, \n\tapci_device    dn_bfm,\n\tint\t       port_id\t  \t);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(\n\t    apci_device     bfm,\n\t    apci_func_info  func\n\t);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"step3": {"body": ["step3(${1:tgt_bdf}, ${0:f})"], "prefix": ["step3", "task:step3"], "description": "    protected task step3(input apci_bdf_t tgt_bdf, output chk_flag f);\n    "}}
{"rw_test": {"body": ["rw_test(${2:cap}, ${1:cap2}, ${0:tgt_bdf})"], "prefix": ["rw_test", "task:rw_test"], "description": "    local task rw_test(\n\tinout apci_cap_type1 cap, \n\t\t\t     cap2,\n\tinput apci_bdf_t     tgt_bdf\n\t);\n    "}}
{"do_2nd_bus_rst_on_sw_up": {"body": ["do_2nd_bus_rst_on_sw_up(${1:func}, ${0:err})"], "prefix": ["do_2nd_bus_rst_on_sw_up", "task:do_2nd_bus_rst_on_sw_up"], "description": "    local task do_2nd_bus_rst_on_sw_up(\n\tinput apci_func_info func,\n\toutput bit err\n\t);\n    "}}
{"chk_rw_attr": {"body": ["chk_rw_attr(${1:cap}, ${0:cap2})"], "prefix": ["chk_rw_attr", "function:chk_rw_attr"], "description": "    local function chk_flag chk_rw_attr(\n\tinput  apci_cap_type1 cap, \n\t\t\t      cap2\n\t);\n    "}}
{"chk_dv": {"body": ["chk_dv(${1:tgt_bdf}, ${0:f})"], "prefix": ["chk_dv", "task:chk_dv"], "description": "    local task chk_dv(\n\tinput apci_bdf_t     tgt_bdf,\n\t      chk_flag       f\n\t);\n    "}}
{"print_non_sticky_field": {"body": ["print_non_sticky_field(${0:cap})"], "prefix": ["print_non_sticky_field", "function:print_non_sticky_field"], "description": "    function string print_non_sticky_field(apci_cap_type1 cap);\n    "}}
{"new": {"body": ["new(${2:bfm}, ${1:func}, ${0:iter})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func, integer iter);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"step1_4": {"body": ["step1_4(${0:})"], "prefix": ["step1_4", "task:step1_4"], "description": "    protected task step1_4();\n    "}}
{"step5_18": {"body": ["step5_18(${0:err})"], "prefix": ["step5_18", "task:step5_18"], "description": "    local task step5_18(output bit err);\n    "}}
{"get_link_bdf": {"body": ["get_link_bdf(${4:func}, ${3:dn_port_bdf}, ${2:up_port_bdf}, ${1:dn_port_fn0_bdf}, ${0:up_port_fn0_bdf})"], "prefix": ["get_link_bdf", "function:get_link_bdf"], "description": "    protected function void get_link_bdf (\n\t    input apci_func_info func, \n\t    output apci_bdf_t dn_port_bdf, \n\t    output apci_bdf_t up_port_bdf, \n\t    output apci_bdf_t dn_port_fn0_bdf, \n\t    output apci_bdf_t up_port_fn0_bdf );\n    "}}
{"err_msg_max_link_speed": {"body": ["err_msg_max_link_speed(${0:is_fn0})"], "prefix": ["err_msg_max_link_speed", "function:err_msg_max_link_speed"], "description": "    local function void err_msg_max_link_speed(bit is_fn0);\t\n    "}}
{"err_msg_tgt_link_speed": {"body": ["err_msg_tgt_link_speed(${0:})"], "prefix": ["err_msg_tgt_link_speed", "function:err_msg_tgt_link_speed"], "description": "    local function void err_msg_tgt_link_speed();\t\n    "}}
{"new": {"body": ["new(${3:bfm}, ${2:func}, ${1:op_bfm}, ${0:port_id})"], "prefix": ["new", "function:new"], "description": "    function new(\n\tapci_device\tbfm, \n\tapci_func_info\tfunc, \n\tapci_device\top_bfm, \n\tint\t\tport_id\n\t);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"step3_9": {"body": ["step3_9(${0:})"], "prefix": ["step3_9", "task:step3_9"], "description": "    local task step3_9();\n    "}}
{"step3_7": {"body": ["step3_7(${0:})"], "prefix": ["step3_7", "task:step3_7"], "description": "    local task step3_7();\n    "}}
{"change_link_width": {"body": ["change_link_width(${0:})"], "prefix": ["change_link_width", "task:change_link_width"], "description": "    local task change_link_width();\n    "}}
{"chk_up_LWV": {"body": ["chk_up_LWV(${0:})"], "prefix": ["chk_up_LWV", "function:chk_up_LWV"], "description": "    local function bit chk_up_LWV();\n    "}}
{"chk_dn_LWV": {"body": ["chk_dn_LWV(${0:})"], "prefix": ["chk_dn_LWV", "function:chk_dn_LWV"], "description": "    local function bit chk_dn_LWV();\n    "}}
{"chk_detected_linkwidth": {"body": ["chk_detected_linkwidth(${0:})"], "prefix": ["chk_detected_linkwidth", "function:chk_detected_linkwidth"], "description": "    local function bit chk_detected_linkwidth();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"step5_20": {"body": ["step5_20(${0:err})"], "prefix": ["step5_20", "task:step5_20"], "description": "    local task step5_20(output bit err);\n    "}}
{"err_msg_max_link_speed": {"body": ["err_msg_max_link_speed(${0:is_fn0})"], "prefix": ["err_msg_max_link_speed", "function:err_msg_max_link_speed"], "description": "    local function void err_msg_max_link_speed(bit is_fn0);\n    "}}
{"err_msg_tgt_link_speed": {"body": ["err_msg_tgt_link_speed(${0:})"], "prefix": ["err_msg_tgt_link_speed", "function:err_msg_tgt_link_speed"], "description": "    local function void err_msg_tgt_link_speed();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"step6_20": {"body": ["step6_20(${0:err})"], "prefix": ["step6_20", "task:step6_20"], "description": "    local task step6_20(output bit err);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"step8_29": {"body": ["step8_29(${0:err})"], "prefix": ["step8_29", "task:step8_29"], "description": "    local task step8_29(output bit err);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(\n            apci_device     bfm,\n            apci_func_info  func\n        );\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"issue_cfg_req": {"body": ["issue_cfg_req(${0:err})"], "prefix": ["issue_cfg_req", "task:issue_cfg_req"], "description": "     virtual task issue_cfg_req(output bit err);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"new": {"body": ["new(${3:bfm}, ${2:func}, ${1:up_bfm}, ${0:pf_bdf})"], "prefix": ["new", "function:new"], "description": "    function new(\n\tapci_device    bfm, \n\tapci_func_info func, \n\tapci_device    up_bfm,\n\tapci_bdf_t     pf_bdf \n\t);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"aspm_test_for_table1": {"body": ["aspm_test_for_table1(${0:})"], "prefix": ["aspm_test_for_table1", "task:aspm_test_for_table1"], "description": "    local task aspm_test_for_table1();\n    "}}
{"aspm_test_for_table2": {"body": ["aspm_test_for_table2(${0:})"], "prefix": ["aspm_test_for_table2", "task:aspm_test_for_table2"], "description": "    local task aspm_test_for_table2();\n    "}}
{"aspm_test_for_table3": {"body": ["aspm_test_for_table3(${0:})"], "prefix": ["aspm_test_for_table3", "task:aspm_test_for_table3"], "description": "    local task aspm_test_for_table3();\n    "}}
{"aspm_test_for_table4": {"body": ["aspm_test_for_table4(${0:})"], "prefix": ["aspm_test_for_table4", "task:aspm_test_for_table4"], "description": "    local task aspm_test_for_table4();\n    "}}
{"collect_all_bdfs": {"body": ["collect_all_bdfs(${0:})"], "prefix": ["collect_all_bdfs", "task:collect_all_bdfs"], "description": "    protected task collect_all_bdfs();\n    "}}
{"aspm_cfg_test": {"body": ["aspm_cfg_test(${1:up_aspm_ctrl}, ${0:dn_aspm_ctrl})"], "prefix": ["aspm_cfg_test", "task:aspm_cfg_test"], "description": "    local task aspm_cfg_test(\n\tinput bit       up_aspm_ctrl,\n\t      bit       dn_aspm_ctrl\n\t);\n    "}}
{"set_link_ctrl": {"body": ["set_link_ctrl(${1:up_aspm_ctrl}, ${0:dn_aspm_ctrl})"], "prefix": ["set_link_ctrl", "task:set_link_ctrl"], "description": "    protected task set_link_ctrl(\n\tinput bit       up_aspm_ctrl,\n\t      bit       dn_aspm_ctrl\n\t);\n    "}}
{"chk_aspm_state": {"body": ["chk_aspm_state(${1:up_aspm_ctrl}, ${0:dn_aspm_ctrl})"], "prefix": ["chk_aspm_state", "task:chk_aspm_state"], "description": "    protected task chk_aspm_state(\n\tinput bit       up_aspm_ctrl,\n\t      bit       dn_aspm_ctrl\n\t);\n    "}}
{"chk_dn_aspm_state_L0s": {"body": ["chk_dn_aspm_state_L0s(${5:L0s_en}, ${4:L0s_sup}, ${3:up_L0s_en}, ${2:up_L0s_sup}, ${1:enter_l1}, ${0:others_L0s_sup})"], "prefix": ["chk_dn_aspm_state_L0s", "task:chk_dn_aspm_state_L0s"], "description": "    local task chk_dn_aspm_state_L0s(\n\tinput bit L0s_en,\n\t      bit L0s_sup,\n\t      bit up_L0s_en,\n\t      bit up_L0s_sup,\n\t      bit enter_l1,\t  \t      bit others_L0s_sup\n\t);\n    "}}
{"chk_dn_aspm_state_L1": {"body": ["chk_dn_aspm_state_L1(${1:dn_enable_L1}, ${0:up_enable_L1})"], "prefix": ["chk_dn_aspm_state_L1", "task:chk_dn_aspm_state_L1"], "description": "    local task chk_dn_aspm_state_L1(\n\tinput bit dn_enable_L1,\n\tinput bit up_enable_L1\n\t);\n    "}}
{"cfg_reg_after_rst": {"body": ["cfg_reg_after_rst(${1:cap}, ${0:f})"], "prefix": ["cfg_reg_after_rst", "task:cfg_reg_after_rst"], "description": "    protected task cfg_reg_after_rst(\n\tinput apci_capability cap,\n\t      avery_reg_field f\n\t);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(\n\t    apci_device\t    bfm, \n\t    apci_func_info  func\n\t);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"step3": {"body": ["step3(${2:type1_cap_2nd2}, ${1:up_port_bdf}, ${0:f})"], "prefix": ["step3", "task:step3"], "description": "    protected task step3(inout apci_cap_type1 type1_cap_2nd2, input apci_bdf_t up_port_bdf, output f);\n    "}}
{"rw_test": {"body": ["rw_test(${2:cap}, ${1:cap2}, ${0:tgt_bdf})"], "prefix": ["rw_test", "task:rw_test"], "description": "    local task rw_test(\n\tinout apci_cap_type1 cap, \n\t\t\t     cap2,\n\tinput apci_bdf_t     tgt_bdf\n\t);\n    "}}
{"chk_rw_attr": {"body": ["chk_rw_attr(${1:cap}, ${0:cap2})"], "prefix": ["chk_rw_attr", "function:chk_rw_attr"], "description": "    local function chk_flag chk_rw_attr(\n\tinput  apci_cap_type1 cap, \n\t\t\t      cap2\n\t);\n    "}}
{"chk_dv": {"body": ["chk_dv(${2:tgt_bdf}, ${1:cap2}, ${0:f})"], "prefix": ["chk_dv", "task:chk_dv"], "description": "    local task chk_dv(\n\tinput apci_bdf_t     tgt_bdf,\n\t      apci_cap_type1 cap2,\n\t      chk_flag       f\n\t);\n    "}}
{"print_non_sticky_field": {"body": ["print_non_sticky_field(${0:cap})"], "prefix": ["print_non_sticky_field", "function:print_non_sticky_field"], "description": "    function string print_non_sticky_field(apci_cap_type1 cap);\n    "}}
{"new": {"body": ["new(${2:bfm}, ${1:func}, ${0:iter})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func, integer iter);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${3:bfm}, ${2:func}, ${1:op_bfm}, ${0:op_bdf})"], "prefix": ["new", "function:new"], "description": "    function new(\n\tapci_device\tbfm, \n\tapci_func_info\tfunc, \n\tapci_device\top_bfm, \n\tapci_bdf_t\top_bdf\n\t);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"step3_9": {"body": ["step3_9(${0:})"], "prefix": ["step3_9", "task:step3_9"], "description": "    local task step3_9();\n    "}}
{"step3_7": {"body": ["step3_7(${0:})"], "prefix": ["step3_7", "task:step3_7"], "description": "    local task step3_7();\n    "}}
{"change_link_width": {"body": ["change_link_width(${0:})"], "prefix": ["change_link_width", "task:change_link_width"], "description": "    local task change_link_width();\n    "}}
{"chk_up_LWV": {"body": ["chk_up_LWV(${0:})"], "prefix": ["chk_up_LWV", "function:chk_up_LWV"], "description": "    local function bit chk_up_LWV();\n    "}}
{"chk_dn_LWV": {"body": ["chk_dn_LWV(${0:})"], "prefix": ["chk_dn_LWV", "function:chk_dn_LWV"], "description": "    local function bit chk_dn_LWV();\n    "}}
{"chk_detected_linkwidth": {"body": ["chk_detected_linkwidth(${0:})"], "prefix": ["chk_detected_linkwidth", "function:chk_detected_linkwidth"], "description": "    local function bit chk_detected_linkwidth();\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(\n\t    apci_device\t    bfm, \n\t    apci_func_info  func\n\t);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"issue_cfg_req": {"body": ["issue_cfg_req(${0:err})"], "prefix": ["issue_cfg_req", "task:issue_cfg_req"], "description": "    virtual task issue_cfg_req(output bit err);\n    "}}
{"new": {"body": ["new(${2:bfm}, ${1:func}, ${0:iter})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func, integer iter);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"step5_18": {"body": ["step5_18(${0:err})"], "prefix": ["step5_18", "task:step5_18"], "description": "    local task step5_18(output bit err);\n    "}}
{"new": {"body": ["new(${2:bfm}, ${1:func}, ${0:iter})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func, integer iter);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"step6_18": {"body": ["step6_18(${0:err})"], "prefix": ["step6_18", "task:step6_18"], "description": "    local task step6_18(output bit err);\n    "}}
{"new": {"body": ["new(${2:bfm}, ${1:func}, ${0:iter})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func, integer iter);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"step8_29": {"body": ["step8_29(${0:err})"], "prefix": ["step8_29", "task:step8_29"], "description": "    local task step8_29(output bit err);\n    "}}
{"new": {"body": ["new(${1:bfm}, ${0:func})"], "prefix": ["new", "function:new"], "description": "    function new(apci_device bfm, apci_func_info func);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"chk_dv_doe": {"body": ["chk_dv_doe(${0:})"], "prefix": ["chk_dv_doe", "task:chk_dv_doe"], "description": "    local task chk_dv_doe();\n    "}}
{"force_rcvr_detection": {"body": ["force_rcvr_detection(${1:detected}, ${0:is_busA})"], "prefix": ["force_rcvr_detection", "function:force_rcvr_detection"], "description": "    function void force_rcvr_detection(bit       detected, bit is_busA);\n    "}}
{"set_timing": {"body": ["set_timing(${3:entry}, ${2:lane_no}, ${1:n_pclks}, ${0:is_busA})"], "prefix": ["set_timing", "function:set_timing"], "description": "    function void set_timing(string entry, byte lane_no, int n_pclks, bit is_busA);\n    "}}
{"set_value": {"body": ["set_value(${3:entry}, ${2:lane_no}, ${1:value}, ${0:is_busA})"], "prefix": ["set_value", "function:set_value"], "description": "    function void set_value(string entry, byte lane_no, int value, bit is_busA);\n    "}}
{"clk_rate_2_period": {"body": ["clk_rate_2_period(${0:rate})"], "prefix": ["clk_rate_2_period", "function:clk_rate_2_period"], "description": "\tfunction int clk_rate_2_period(int rate);\n    "}}
{"ccix_clk_rate_2_period": {"body": ["ccix_clk_rate_2_period(${0:rate})"], "prefix": ["ccix_clk_rate_2_period", "function:ccix_clk_rate_2_period"], "description": "\tfunction int ccix_clk_rate_2_period(int rate);\n    "}}
{"force_rcvr_detection": {"body": ["force_rcvr_detection(${1:detected}, ${0:is_busA})"], "prefix": ["force_rcvr_detection", "function:force_rcvr_detection"], "description": "    function void force_rcvr_detection(bit       detected, bit is_busA);\n    "}}
{"set_timing": {"body": ["set_timing(${3:entry}, ${2:lane_no}, ${1:n_pclks}, ${0:is_busA})"], "prefix": ["set_timing", "function:set_timing"], "description": "    function void set_timing(string entry, byte lane_no, int n_pclks, bit is_busA);\n    "}}
{"set_value": {"body": ["set_value(${3:entry}, ${2:lane_no}, ${1:value}, ${0:is_busA})"], "prefix": ["set_value", "function:set_value"], "description": "    function void set_value(string entry, byte lane_no, int value, bit is_busA);\n    "}}
{"avery_max": {"body": ["avery_max(${1:i}, ${0:j})"], "prefix": ["avery_max", "function:avery_max"], "description": "        function int       avery_max              ( int i, int j)\n    "}}
{"avery_min": {"body": ["avery_min(${1:i}, ${0:j})"], "prefix": ["avery_min", "function:avery_min"], "description": "        function int       avery_min              ( int i, int j)\n    "}}
{"avery_round_to_dw": {"body": ["avery_round_to_dw(${0:num_bytes})"], "prefix": ["avery_round_to_dw", "function:avery_round_to_dw"], "description": "        function bit       avery_round_to_dw      ( bit       num_bytes)\n    "}}
{"avery_round_up": {"body": ["avery_round_up(${1:a}, ${0:boundary})"], "prefix": ["avery_round_up", "function:avery_round_up"], "description": "        function bit       avery_round_up         (bit       a, bit       boundary);\n    "}}
{"avery_q2a": {"body": ["avery_q2a(${1:from}, ${0:to})"], "prefix": ["avery_q2a", "function:avery_q2a"], "description": "        function void      avery_q2a              ( input bit       from      , output bit       to      )\n    "}}
{"avery_dwords_to_bytes": {"body": ["avery_dwords_to_bytes(${1:dq}, ${0:bq})"], "prefix": ["avery_dwords_to_bytes", "function:avery_dwords_to_bytes"], "description": "        function void      avery_dwords_to_bytes  ( bit       dq      , output bit       bq      )\n    "}}
{"avery_align_addr": {"body": ["avery_align_addr(${3:addr}, ${2:n_bytes}, ${1:out_addr}, ${0:n_dwords})"], "prefix": ["avery_align_addr", "function:avery_align_addr"], "description": "        function void      avery_align_addr       ( input bit       addr, bit       n_bytes, output bit       out_addr, bit       n_dwords)\n    "}}
{"avery_get_device_id": {"body": ["avery_get_device_id(${0:})"], "prefix": ["avery_get_device_id", "function:avery_get_device_id"], "description": "        function int       avery_get_device_id    ( )\n    "}}
{"avery_power_of_two": {"body": ["avery_power_of_two(${0:v})"], "prefix": ["avery_power_of_two", "function:avery_power_of_two"], "description": "        function int       avery_power_of_two     ( bit       v)\n    "}}
{"avery_multiple_of": {"body": ["avery_multiple_of(${1:a}, ${0:b})"], "prefix": ["avery_multiple_of", "function:avery_multiple_of"], "description": "        function bit       avery_multiple_of      ( bit       a, bit       b)\n    "}}
{"avery_two_to_power_of": {"body": ["avery_two_to_power_of(${0:v})"], "prefix": ["avery_two_to_power_of", "function:avery_two_to_power_of"], "description": "        function int       avery_two_to_power_of  ( bit       v)\n    "}}
{"avery_is_power_of_two": {"body": ["avery_is_power_of_two(${0:v})"], "prefix": ["avery_is_power_of_two", "function:avery_is_power_of_two"], "description": "        function bit       avery_is_power_of_two  ( bit       v)\n    "}}
{"avery_is_multiple": {"body": ["avery_is_multiple(${1:a}, ${0:b})"], "prefix": ["avery_is_multiple", "function:avery_is_multiple"], "description": "        function bit       avery_is_multiple      ( bit       a, bit       b)\n    "}}
{"avery_offset_mask": {"body": ["avery_offset_mask(${0:page_size})"], "prefix": ["avery_offset_mask", "function:avery_offset_mask"], "description": "        function bit       avery_offset_mask      ( bit       page_size)\n    "}}
{"avery_page_mask": {"body": ["avery_page_mask(${0:page_size})"], "prefix": ["avery_page_mask", "function:avery_page_mask"], "description": "        function bit       avery_page_mask        ( bit       page_size)\n    "}}
{"avery_print_dw_array": {"body": ["avery_print_dw_array(${1:da}, ${0:prefix})"], "prefix": ["avery_print_dw_array", "function:avery_print_dw_array"], "description": "        function string    avery_print_dw_array   ( bit       da       , int len=16, string prefix=\"\")\n    "}}
{"avery_print_dw_q": {"body": ["avery_print_dw_q(${1:da}, ${0:prefix})"], "prefix": ["avery_print_dw_q", "function:avery_print_dw_q"], "description": "        function string    avery_print_dw_q       ( bit       da      , int len=16, string prefix=\"\")\n    "}}
{"avery_print_bytes": {"body": ["avery_print_bytes(${1:b}, ${0:prefix})"], "prefix": ["avery_print_bytes", "function:avery_print_bytes"], "description": "        function string    avery_print_bytes      ( byte b      , string prefix=\"\")\n    "}}
{"avery_print_u8": {"body": ["avery_print_u8(${1:b}, ${0:prefix})"], "prefix": ["avery_print_u8", "function:avery_print_u8"], "description": "        function string    avery_print_u8         ( bit       b      , string prefix=\"\")\n    "}}
{"avery_dq_2_ba": {"body": ["avery_dq_2_ba(${1:from}, ${0:to})"], "prefix": ["avery_dq_2_ba", "function:avery_dq_2_ba"], "description": "        function void      avery_dq_2_ba          ( ref bit       from      , ref bit       to      );\n    "}}
{"avery_swap_endian": {"body": ["avery_swap_endian(${0:v})"], "prefix": ["avery_swap_endian", "function:avery_swap_endian"], "description": "        function bit       avery_swap_endian      ( bit       v)\n    "}}
{"automatic": {"body": ["automatic(${1:i}, ${0:j})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic bit       avery_max(bit       i, bit       j);\n    "}}
{"automatic": {"body": ["automatic(${1:i}, ${0:j})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic bit       avery_min(bit       i, bit       j);\n    "}}
{"automatic": {"body": ["automatic(${0:a})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic bit       avery_abs(int a);\n    "}}
{"avery_dw_boundary": {"body": ["avery_dw_boundary(${0:offset})"], "prefix": ["avery_dw_boundary", "function:avery_dw_boundary"], "description": "function avery_u32 avery_dw_boundary(avery_u32 offset);\n    "}}
{"automatic": {"body": ["automatic(${0:num_bytes})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic bit        avery_round_to_dw(bit       num_bytes);\n    "}}
{"automatic": {"body": ["automatic(${2:from}, ${1:to}, ${0:start_offset})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic void avery_pack_bytes(\n        ref    bit        from      ,\n        output bit        to      ,\n        input  bit        num_bytes    = -1,             input  bit        start_offset = 0);\n    "}}
{"automatic": {"body": ["automatic(${2:from}, ${1:to}, ${0:start_offset})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic void avery_pack_bytes_arr(\n        ref    bit        from      ,\n        ref    bit        to      ,\n        input  bit        num_bytes    = -1,             input  bit        start_offset = 0\n    );\n    "}}
{"automatic": {"body": ["automatic(${1:from}, ${0:to})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic void avery_q2a(ref bit       from      , ref bit       to      );\n    "}}
{"automatic": {"body": ["automatic(${1:dq}, ${0:bq})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic void avery_dwords_to_bytes(ref bit       dq      , ref bit       bq      );\n    "}}
{"automatic": {"body": ["automatic(${1:bq}, ${0:dq})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic void avery_bytes_to_dwords(ref bit       bq      , ref bit       dq      );\n    "}}
{"automatic": {"body": ["automatic(${1:ba}, ${0:da})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic void avery_ba2va(ref bit       ba      , ref bit       da      );\n    "}}
{"automatic": {"body": ["automatic(${1:from}, ${0:to})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic void avery_unpack_dwords(\n        ref  bit        from      ,           ref  bit        to      );\n    "}}
{"automatic": {"body": ["automatic(${1:from}, ${0:to})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic void avery_unpack_dwords_arr(\n        ref  bit        from      ,            ref  bit        to      );\n    "}}
{"automatic": {"body": ["automatic(${1:from}, ${0:to})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic void avery_va2ba (\n        ref  bit        from      ,            ref  bit        to      );\n    "}}
{"automatic": {"body": ["automatic(${3:from}, ${2:to}, ${1:first_be}, ${0:last_be})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic void avery_va2ba_be(\n        ref  bit        from      ,\n        ref  bit        to      ,\n        input bit        first_be,\n        input bit        last_be\n    );\n    "}}
{"avery_align_addr": {"body": ["avery_align_addr(${3:addr}, ${2:n_bytes}, ${1:out_addr}, ${0:n_dwords})"], "prefix": ["avery_align_addr", "function:avery_align_addr"], "description": "function void avery_align_addr(\n        input  bit       addr,     \n        input  bit       n_bytes,\n        output bit       out_addr,\n        output bit       n_dwords\n    );\n    "}}
{"automatic": {"body": ["automatic(${0:})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic avery_u32 avery_get_device_id();\n    "}}
{"automatic": {"body": ["automatic(${0:})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic avery_u32 avery_get_data_id();\n    "}}
{"automatic": {"body": ["automatic(${0:})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic avery_u32 apqi_get_nvm_id();\n    "}}
{"automatic": {"body": ["automatic(${0:v})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic int avery_power_of_two(bit       v);       "}}
{"avery_is_power_of_two": {"body": ["avery_is_power_of_two(${0:v})"], "prefix": ["avery_is_power_of_two", "function:avery_is_power_of_two"], "description": "function bit avery_is_power_of_two(bit       v);\n    "}}
{"automatic": {"body": ["automatic(${1:a}, ${0:b})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic bit       avery_multiple_of(bit       a, bit       b);\n    "}}
{"automatic": {"body": ["automatic(${1:a}, ${0:boundary})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic bit       avery_round_up(bit       a, bit       boundary);\n    "}}
{"automatic": {"body": ["automatic(${0:v})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic bit       avery_two_to_power_of(bit       v);\n    "}}
{"automatic": {"body": ["automatic(${1:a}, ${0:b})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic bit avery_multiple_check(bit       a, bit       b);\n    "}}
{"automatic": {"body": ["automatic(${1:a}, ${0:b})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic bit avery_is_multiple(bit       a, bit       b);\n    "}}
{"avery_distance_to_page": {"body": ["avery_distance_to_page(${1:page_size}, ${0:addr})"], "prefix": ["avery_distance_to_page", "function:avery_distance_to_page"], "description": "function avery_u64 avery_distance_to_page (avery_u64 page_size, avery_u64 addr);\n    "}}
{"avery_offset_mask": {"body": ["avery_offset_mask(${0:page_size})"], "prefix": ["avery_offset_mask", "function:avery_offset_mask"], "description": "function bit       avery_offset_mask(bit       page_size);\n    "}}
{"avery_page_mask": {"body": ["avery_page_mask(${0:page_size})"], "prefix": ["avery_page_mask", "function:avery_page_mask"], "description": "function bit       avery_page_mask(bit       page_size);\n    "}}
{"avery_page_offset": {"body": ["avery_page_offset(${1:addr}, ${0:page_size})"], "prefix": ["avery_page_offset", "function:avery_page_offset"], "description": "function bit       avery_page_offset(bit       addr, bit       page_size);\n    "}}
{"avery_page_align": {"body": ["avery_page_align(${1:addr}, ${0:page_size})"], "prefix": ["avery_page_align", "function:avery_page_align"], "description": "function bit       avery_page_align(bit       addr, bit       page_size);\n    "}}
{"avery_random64": {"body": ["avery_random64(${1:a}, ${0:b})"], "prefix": ["avery_random64", "function:avery_random64"], "description": "function bit       avery_random64 (bit       a, bit       b);\n    "}}
{"automatic": {"body": ["automatic(${1:da}, ${0:line_break})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic string avery_print_dw_array(ref bit       da      , input int len=16, string prefix=\"\", bit line_break=1);\n    "}}
{"automatic": {"body": ["automatic(${1:dq}, ${0:line_break})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic string avery_print_dw_q(ref bit       dq      , input int len=16, string prefix=\"\", bit line_break=1);\n    "}}
{"automatic": {"body": ["automatic(${1:b}, ${0:in_dword})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic string avery_print_u8(ref bit       b      , input bit       max = -1, string prefix=\"\", bit in_dword = 0);\n    "}}
{"automatic": {"body": ["automatic(${1:b}, ${0:in_dword})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic string avery_print_bytes(ref byte b      , input bit       max = -1, string prefix=\"\", bit in_dword = 0);\n    "}}
{"avery_swap_endian": {"body": ["avery_swap_endian(${0:v})"], "prefix": ["avery_swap_endian", "function:avery_swap_endian"], "description": "function bit       avery_swap_endian (bit       v);\n    "}}
{"automatic": {"body": ["automatic(${1:from}, ${0:to})"], "prefix": ["automatic", "function:automatic"], "description": "function automatic void avery_dq_2_ba(\n        ref bit        from      ,\n        ref bit        to      );\n    "}}
{"new": {"body": ["new(${0:})"], "prefix": ["new", "function:new"], "description": "    function new();\n    "}}
{"push_back": {"body": ["push_back(${1:key}, ${0:v})"], "prefix": ["push_back", "function:push_back"], "description": "    function void push_back(TKEY key, T v);\n    "}}
{"push_front": {"body": ["push_front(${1:key}, ${0:v})"], "prefix": ["push_front", "function:push_front"], "description": "    function void push_front(TKEY key, T v);\n    "}}
{"lookup": {"body": ["lookup(${0:key})"], "prefix": ["lookup", "function:lookup"], "description": "    function T lookup(TKEY key);\n    "}}
{"insert": {"body": ["insert(${1:key}, ${0:v})"], "prefix": ["insert", "function:insert"], "description": "    function void insert(TKEY key, T v);\n    "}}
{"delete_all": {"body": ["delete_all(${0:})"], "prefix": ["delete_all", "function:delete_all"], "description": "    function void delete_all();\n    "}}
{"delete": {"body": ["delete(${0:key})"], "prefix": ["delete", "function:delete"], "description": "    function void delete(TKEY key);\n    "}}
{"new": {"body": ["new(${3:severity}, ${2:id}, ${1:des}, ${0:cvg_cnt})"], "prefix": ["new", "function:new"], "description": "    function new(avery_severity severity, string id, string des, int cvg_cnt = 0);\n    "}}
{"sprint": {"body": ["sprint(${0:verbosity})"], "prefix": ["sprint", "function:sprint"], "description": "    function string sprint(int verbosity = 0);\n    "}}
{"assertion_msg_cb": {"body": ["assertion_msg_cb(${2:msg}, ${1:is_disable}, ${0:item})"], "prefix": ["assertion_msg_cb", "function:assertion_msg_cb"], "description": "    virtual function void assertion_msg_cb(\n                        input string msg,\n                        inout bit is_disable,\n                        ref avery_assertion_item item\n                    );\n    "}}
{"error_msg_cb": {"body": ["error_msg_cb(${1:msg}, ${0:is_disable})"], "prefix": ["error_msg_cb", "function:error_msg_cb"], "description": "    virtual function void error_msg_cb(\n                        input string msg,\n                        inout bit is_disable \n                    );\n    "}}
{"fatal_msg_cb": {"body": ["fatal_msg_cb(${1:msg}, ${0:is_disable})"], "prefix": ["fatal_msg_cb", "function:fatal_msg_cb"], "description": "    virtual function void fatal_msg_cb(\n                        input string msg,\n                        inout bit is_disable\n                    );\n    "}}
{"new": {"body": ["new(${0:name})"], "prefix": ["new", "function:new"], "description": "    function new(string name = \"avery_data_base\");\n    "}}
{"sprint": {"body": ["sprint(${0:prefix})"], "prefix": ["sprint", "function:sprint"], "description": "    virtual function string sprint(int verbosity = 0, string prefix = \"\");\n    "}}
{"copy": {"body": ["copy(${0:to})"], "prefix": ["copy", "function:copy"], "description": "    function vmm_data copy(vmm_data to = null);\n    "}}
{"copy": {"body": ["copy(${0:to})"], "prefix": ["copy", "function:copy"], "description": "    function avery_data_base copy(avery_data_base to = null);\n    "}}
{"sprint_user_str": {"body": ["sprint_user_str(${0:})"], "prefix": ["sprint_user_str", "function:sprint_user_str"], "description": "    virtual function string sprint_user_str();\n    "}}
{"replace_user_str": {"body": ["replace_user_str(${0:msg})"], "prefix": ["replace_user_str", "function:replace_user_str"], "description": "    virtual function void replace_user_str(string msg);\n    "}}
{"append_user_str": {"body": ["append_user_str(${0:msg})"], "prefix": ["append_user_str", "function:append_user_str"], "description": "    virtual function void append_user_str(string msg);\n    "}}
{"new": {"body": ["new(${1:name}, ${0:parent})"], "prefix": ["new", "function:new"], "description": "    function new(\n        string name,\n    `ifdef AVERY_UVM\n        uvm_component        parent = null\n    `else\n        avery_pure_component parent = null\n    `endif\n        );\n    "}}
{"new": {"body": ["new(${1:name}, ${0:`avery_xvm_parent})"], "prefix": ["new", "function:new"], "description": "    function new( string   name,\n                  `avery_xvm_parent);\n    "}}
{"get_name": {"body": ["get_name(${0:})"], "prefix": ["get_name", "function:get_name"], "description": "    virtual function string get_name();\n    "}}
{"check_result": {"body": ["check_result(${0:verbosity})"], "prefix": ["check_result", "function:check_result"], "description": "    virtual function bit check_result( int verbosity = 0 );\n    "}}
{"end_sim_cb": {"body": ["end_sim_cb(${0:msg})"], "prefix": ["end_sim_cb", "task:end_sim_cb"], "description": "    virtual task end_sim_cb(string msg = \"\");\n    "}}
{"sprint": {"body": ["sprint(${0:prefix})"], "prefix": ["sprint", "function:sprint"], "description": "    virtual function string sprint(int verbosity = 0, string prefix = \"\");\n    "}}
{"aprint": {"body": ["aprint(${2:file}, ${1:msg}, ${0:id})"], "prefix": ["aprint", "function:aprint"], "description": "    virtual function void aprint(int file, ref string msg, input int id = 0);\n    "}}
{"aprint_set_file": {"body": ["aprint_set_file(${1:file}, ${0:filename})"], "prefix": ["aprint_set_file", "function:aprint_set_file"], "description": "    virtual function void aprint_set_file(int file, string filename);\n    "}}
{"new": {"body": ["new(${1:name}, ${0:`avery_xvm_parent})"], "prefix": ["new", "function:new"], "description": "    function new(string name, `avery_xvm_parent);\n    "}}
{"new": {"body": ["new(${1:name}, ${0:log})"], "prefix": ["new", "function:new"], "description": "    function new(string name, avery_log log = null);\n    "}}
{"exists": {"body": ["exists(${0:addr})"], "prefix": ["exists", "function:exists"], "description": "    function bit exists(T2 addr);\n    "}}
{"read": {"body": ["read(${0:addr})"], "prefix": ["read", "function:read"], "description": "    function T read(T2 addr);                                                                                                                                                                 \n    "}}
{"write": {"body": ["write(${1:addr}, ${0:data2})"], "prefix": ["write", "function:write"], "description": "    function void write(T2 addr, T data2);\n    "}}
{"size": {"body": ["size(${0:})"], "prefix": ["size", "function:size"], "description": "    function bit       size();\n    "}}
{"delete": {"body": ["delete(${0:addr})"], "prefix": ["delete", "function:delete"], "description": "    function void delete(T2 addr);\n    "}}
{"delete_all": {"body": ["delete_all(${0:})"], "prefix": ["delete_all", "function:delete_all"], "description": "    function void delete_all();\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${1:name}, ${0:`avery_xvm_parent})"], "prefix": ["new", "function:new"], "description": "    extern function new(string name, `avery_xvm_parent);\n    "}}
{"error": {"body": ["error(${0:f})"], "prefix": ["error", "function:error"], "description": "    extern virtual function void error       (string msg = \"\", avery_data_base f=null);\n    "}}
{"fatal": {"body": ["fatal(${1:msg}, ${0:msg2})"], "prefix": ["fatal", "function:fatal"], "description": "    extern virtual function void fatal       (string msg, string msg2 = \"\");\n    "}}
{"info": {"body": ["info(${0:line_breaks_prefix})"], "prefix": ["info", "function:info"], "description": "    extern virtual function void info        (string msg=\"\", int line_breaks_prefix=0)             ;\n    "}}
{"warn": {"body": ["warn(${0:msg})"], "prefix": ["warn", "function:warn"], "description": "    extern virtual function void warn        (string msg=\"\");\n    "}}
{"asst": {"body": ["asst(${1:idname}, ${0:f})"], "prefix": ["asst", "function:asst"], "description": "    extern virtual function void asst        (string idname, string msg=\"\", avery_data_base f=null);\n    "}}
{"usage": {"body": ["usage(${1:msg}, ${0:is_finish})"], "prefix": ["usage", "function:usage"], "description": "    extern virtual function void usage       (string msg, int is_finish=1);\n    "}}
{"trigger": {"body": ["trigger(${0:idname})"], "prefix": ["trigger", "function:trigger"], "description": "    virtual function void trigger            (string idname); \n    "}}
{"set_global_severity": {"body": ["set_global_severity(${1:idname}, ${0:v})"], "prefix": ["set_global_severity", "function:set_global_severity"], "description": "    virtual function void set_global_severity(string idname, avery_severity v) ;\n    "}}
{"set_severity": {"body": ["set_severity(${1:idname}, ${0:v})"], "prefix": ["set_severity", "function:set_severity"], "description": "    virtual function void set_severity       (string idname, avery_severity v) ;\n    "}}
{"is_fired": {"body": ["is_fired(${0:idname})"], "prefix": ["is_fired", "function:is_fired"], "description": "    virtual function bit  is_fired           (string idname );\n    "}}
{"coverage_rpt": {"body": ["coverage_rpt(${0:filename})"], "prefix": ["coverage_rpt", "function:coverage_rpt"], "description": "    virtual function void coverage_rpt       (string filename=\"\");\n    "}}
{"internal": {"body": ["internal(${1:msg}, ${0:f})"], "prefix": ["internal", "function:internal"], "description": "    virtual function void internal           (string msg, bit is_abort = 1, avery_data_base f=null);\n    "}}
{"intern": {"body": ["intern(${1:msg}, ${0:f})"], "prefix": ["intern", "function:intern"], "description": "    virtual function void intern (string msg, bit is_abort = 1, avery_data_base f=null);\n    "}}
{"debug": {"body": ["debug(${0:msg})"], "prefix": ["debug", "function:debug"], "description": "    virtual function void debug              (string msg);\n    "}}
{"spec_error": {"body": ["spec_error(${0:msg})"], "prefix": ["spec_error", "function:spec_error"], "description": "    virtual function void spec_error(string msg);\n    "}}
{"sdebug": {"body": ["sdebug(${1:scope}, ${0:msg})"], "prefix": ["sdebug", "function:sdebug"], "description": "    virtual function void sdebug(string scope, string msg);\n    "}}
{"sinfo": {"body": ["sinfo(${1:scope}, ${0:msg})"], "prefix": ["sinfo", "function:sinfo"], "description": "    virtual function void sinfo(string scope, string msg);\n    "}}
{"swarning": {"body": ["swarning(${1:scope}, ${0:msg})"], "prefix": ["swarning", "function:swarning"], "description": "    virtual function void swarning(string scope, string msg);\n    "}}
{"serror": {"body": ["serror(${1:scope}, ${0:msg})"], "prefix": ["serror", "function:serror"], "description": "    virtual function void serror(string scope, string msg);\n    "}}
{"susage": {"body": ["susage(${2:scope}, ${1:msg}, ${0:is_abort})"], "prefix": ["susage", "function:susage"], "description": "    virtual function void susage(string scope, string msg, bit is_abort = 0);\n    "}}
{"sstep": {"body": ["sstep(${1:scope}, ${0:msg})"], "prefix": ["sstep", "function:sstep"], "description": "    virtual function void sstep(string scope, string msg);\n    "}}
{"todo": {"body": ["todo(${1:msg}, ${0:is_finish})"], "prefix": ["todo", "function:todo"], "description": "    function void todo( string msg, int is_finish = 0);\n    "}}
{"runlog_is_stdout": {"body": ["runlog_is_stdout(${0:})"], "prefix": ["runlog_is_stdout", "function:runlog_is_stdout"], "description": "    function bit runlog_is_stdout();\n    "}}
{"append_callback": {"body": ["append_callback(${0:cb})"], "prefix": ["append_callback", "function:append_callback"], "description": "    function void append_callback(input avery_log_callbacks cb);\n    "}}
{"new": {"body": ["new(${3:id}, ${2:qsize}, ${1:entry_size}, ${0:base})"], "prefix": ["new", "function:new"], "description": "    extern function new(int id, int qsize, int entry_size, bit       base = 0);\n    "}}
{"peek": {"body": ["peek(${0:})"], "prefix": ["peek", "function:peek"], "description": "    extern virtual function T peek();\n    "}}
{"push": {"body": ["push(${0:v})"], "prefix": ["push", "function:push"], "description": "    extern virtual function void push (T v);\n    "}}
{"size": {"body": ["size(${0:})"], "prefix": ["size", "function:size"], "description": "    extern virtual function int size();\n    "}}
{"num_entries": {"body": ["num_entries(${0:})"], "prefix": ["num_entries", "function:num_entries"], "description": "    extern virtual function int num_entries();\n    "}}
{"num_unused_entries": {"body": ["num_unused_entries(${0:})"], "prefix": ["num_unused_entries", "function:num_unused_entries"], "description": "    extern virtual function int num_unused_entries();\n    "}}
{"delete": {"body": ["delete(${0:i})"], "prefix": ["delete", "function:delete"], "description": "    extern virtual function void delete(int i);\n    "}}
{"delete_all": {"body": ["delete_all(${0:})"], "prefix": ["delete_all", "function:delete_all"], "description": "    extern virtual function void delete_all();\n    "}}
{"is_full": {"body": ["is_full(${0:})"], "prefix": ["is_full", "function:is_full"], "description": "    extern virtual function bit is_full();\n    "}}
{"is_empty": {"body": ["is_empty(${0:})"], "prefix": ["is_empty", "function:is_empty"], "description": "    extern virtual function bit is_empty();\n    "}}
{"is_wrap": {"body": ["is_wrap(${1:total}, ${0:num_wrapped})"], "prefix": ["is_wrap", "function:is_wrap"], "description": "    extern virtual function bit is_wrap(input int total, output int num_wrapped);\n    "}}
{"get_qsize": {"body": ["get_qsize(${0:})"], "prefix": ["get_qsize", "function:get_qsize"], "description": "    extern virtual function int get_qsize();\n    "}}
{"get_entry_size": {"body": ["get_entry_size(${0:})"], "prefix": ["get_entry_size", "function:get_entry_size"], "description": "    extern virtual function int get_entry_size();\n    "}}
{"get_entry_size_dw": {"body": ["get_entry_size_dw(${0:})"], "prefix": ["get_entry_size_dw", "function:get_entry_size_dw"], "description": "    extern virtual function int get_entry_size_dw();\n    "}}
{"get_tail": {"body": ["get_tail(${0:})"], "prefix": ["get_tail", "function:get_tail"], "description": "    extern virtual function bit       get_tail();\n    "}}
{"get_pi": {"body": ["get_pi(${0:})"], "prefix": ["get_pi", "function:get_pi"], "description": "    extern virtual function bit       get_pi();\n    "}}
{"get_head": {"body": ["get_head(${0:})"], "prefix": ["get_head", "function:get_head"], "description": "    extern virtual function bit       get_head();\n    "}}
{"get_ci": {"body": ["get_ci(${0:})"], "prefix": ["get_ci", "function:get_ci"], "description": "    extern virtual function bit       get_ci();\n    "}}
{"get_tail_addr": {"body": ["get_tail_addr(${0:})"], "prefix": ["get_tail_addr", "function:get_tail_addr"], "description": "    extern virtual function bit       get_tail_addr();\n    "}}
{"get_pi_addr": {"body": ["get_pi_addr(${0:})"], "prefix": ["get_pi_addr", "function:get_pi_addr"], "description": "    extern virtual function bit       get_pi_addr();\n    "}}
{"get_head_addr": {"body": ["get_head_addr(${0:})"], "prefix": ["get_head_addr", "function:get_head_addr"], "description": "    extern virtual function bit       get_head_addr();\n    "}}
{"get_ci_addr": {"body": ["get_ci_addr(${0:})"], "prefix": ["get_ci_addr", "function:get_ci_addr"], "description": "    extern virtual function bit       get_ci_addr();\n    "}}
{"get_base_addr": {"body": ["get_base_addr(${0:})"], "prefix": ["get_base_addr", "function:get_base_addr"], "description": "    extern virtual function bit       get_base_addr();\n    "}}
{"head_diff": {"body": ["head_diff(${0:new_head})"], "prefix": ["head_diff", "function:head_diff"], "description": "    extern virtual function int head_diff(int new_head);\n    "}}
{"tail_diff": {"body": ["tail_diff(${0:new_tail})"], "prefix": ["tail_diff", "function:tail_diff"], "description": "    extern virtual function int tail_diff(int new_tail);\n    "}}
{"pointer_diff": {"body": ["pointer_diff(${0:})"], "prefix": ["pointer_diff", "function:pointer_diff"], "description": "    extern virtual function int pointer_diff();\n    "}}
{"sprint": {"body": ["sprint(${0:prefix})"], "prefix": ["sprint", "function:sprint"], "description": "    extern virtual function string sprint(int verbosity = 0, string prefix=\"\");\n    "}}
{"pop": {"body": ["pop(${0:})"], "prefix": ["pop", "function:pop"], "description": "    function T pop();\n    "}}
{"new": {"body": ["new(${1:timeout}, ${0:is_fatal})"], "prefix": ["new", "function:new"], "description": "    extern function new(\n            avery_log  log = null, \n            time       timeout,                       time       min_timeout = 0,               string     msg = \"\",\n            bit        is_fatal = 0\n        );\n    "}}
{"set_timeout": {"body": ["set_timeout(${0:t})"], "prefix": ["set_timeout", "function:set_timeout"], "description": "    extern virtual function void set_timeout(time t);       "}}
{"set_min_timeout": {"body": ["set_min_timeout(${0:t})"], "prefix": ["set_min_timeout", "function:set_min_timeout"], "description": "    extern virtual function void set_min_timeout(time t);       "}}
{"new": {"body": ["new(${0:`avery_xvm_parent})"], "prefix": ["new", "function:new"], "description": "    function new(string name = \"avery_param_log\", `avery_xvm_parent);\n    "}}
{"merge_coverage": {"body": ["merge_coverage(${0:log_base_a})"], "prefix": ["merge_coverage", "function:merge_coverage"], "description": "    virtual function void merge_coverage (avery_param_log_base log_base_a); \n    "}}
{"new": {"body": ["new(${2:name}, ${1:`avery_xvm_parent}, ${0:product_name})"], "prefix": ["new", "function:new"], "description": "    extern function new(string name, `avery_xvm_parent, string product_name = \"AVY\");\n    "}}
{"new": {"body": ["new(${0:start2})"], "prefix": ["new", "function:new"], "description": "    extern function new (\n        input int isw= -1, \n        input int total2= 1,\n        input bit        start2 = 0);\n    "}}
{"new": {"body": ["new(${0:is_dw2})"], "prefix": ["new", "function:new"], "description": "    extern function new (\n        input int isw= -1, \n        input int total2= 1,\n        input bit        start2 = 0,\n        input bit is_dw2= 0);\n    "}}
{"new": {"body": ["new(${2:field_size}, ${1:lsb_loc}, ${0:is_static})"], "prefix": ["new", "function:new"], "description": "    function new(\n            string           name = \"avery_reg_field\",\n            avery_reg        parent = null,                  int              field_size,                     int              lsb_loc,                        avery_reg_val_t  default_val  = 0,\n            bit              sticky       = 0,\n            avery_reg_acc_e  acctype      = AVERY_REG_ACC_RsvdP,               bit              rand_default = 1,               bit              rand_sticky  = 1,               bit              rand_acc     = 1,               bit              is_static    = 0            );\n    "}}
{"set_v": {"body": ["set_v(${0:v})"], "prefix": ["set_v", "function:set_v"], "description": "    extern virtual function void set_v(avery_reg_val_t v);\n    "}}
{"set_dv": {"body": ["set_dv(${0:dv})"], "prefix": ["set_dv", "function:set_dv"], "description": "    extern virtual function void set_dv(avery_reg_val_t dv);\n    "}}
{"set_acctype": {"body": ["set_acctype(${0:acctype})"], "prefix": ["set_acctype", "function:set_acctype"], "description": "    virtual function void set_acctype(avery_reg_acc_e acctype);\n    "}}
{"set_sticky": {"body": ["set_sticky(${0:sticky})"], "prefix": ["set_sticky", "function:set_sticky"], "description": "    virtual function void set_sticky(bit sticky);\n    "}}
{"set_sticky_flr": {"body": ["set_sticky_flr(${0:sticky_flr})"], "prefix": ["set_sticky_flr", "function:set_sticky_flr"], "description": "    virtual function void set_sticky_flr(bit sticky_flr);\n    "}}
{"set_lsb_loc": {"body": ["set_lsb_loc(${0:lsb_loc})"], "prefix": ["set_lsb_loc", "function:set_lsb_loc"], "description": "    extern virtual function void set_lsb_loc(int lsb_loc);\n    "}}
{"set_write_mask": {"body": ["set_write_mask(${0:mask})"], "prefix": ["set_write_mask", "function:set_write_mask"], "description": "    extern virtual function void set_write_mask(avery_reg_val_t mask);\n    "}}
{"get_write_mask": {"body": ["get_write_mask(${0:})"], "prefix": ["get_write_mask", "function:get_write_mask"], "description": "    extern virtual function avery_reg_val_t get_write_mask();\n    "}}
{"get_field_size": {"body": ["get_field_size(${0:})"], "prefix": ["get_field_size", "function:get_field_size"], "description": "    extern virtual function int get_field_size();\n    "}}
{"get_lsb_loc": {"body": ["get_lsb_loc(${0:})"], "prefix": ["get_lsb_loc", "function:get_lsb_loc"], "description": "    extern virtual function int get_lsb_loc();\n    "}}
{"read_dw": {"body": ["read_dw(${1:bit_offset}, ${0:bit_enable})"], "prefix": ["read_dw", "function:read_dw"], "description": "    extern virtual function avery_reg_val_t read_dw(int bit_offset, avery_u32 bit_enable = 'hffff_ffff);\n    "}}
{"write_dw": {"body": ["write_dw(${2:bit_offset}, ${1:value}, ${0:dbg})"], "prefix": ["write_dw", "function:write_dw"], "description": "    extern virtual function void write_dw(\n                                    int       bit_offset,\n                                    avery_u32 value     ,\n                                    avery_u32 bit_enable='hffff_ffff,                                       string    dbg=\"\"     );\n    "}}
{"sprint_path": {"body": ["sprint_path(${0:verbosity})"], "prefix": ["sprint_path", "function:sprint_path"], "description": "    extern virtual function string sprint_path(int verbosity = 0);\n    "}}
{"get_offset_dw": {"body": ["get_offset_dw(${0:})"], "prefix": ["get_offset_dw", "function:get_offset_dw"], "description": "    extern virtual function bit       get_offset_dw();\n    "}}
{"get_offset": {"body": ["get_offset(${0:})"], "prefix": ["get_offset", "function:get_offset"], "description": "    extern virtual function bit       get_offset();\n    "}}
{"set_shared": {"body": ["set_shared(${0:shared})"], "prefix": ["set_shared", "function:set_shared"], "description": "    extern virtual function void set_shared(avery_reg_field shared);\n    "}}
{"inverse": {"body": ["inverse(${0:})"], "prefix": ["inverse", "function:inverse"], "description": "    extern virtual function void inverse();\n    "}}
{"set_one": {"body": ["set_one(${0:})"], "prefix": ["set_one", "function:set_one"], "description": "    extern virtual function void set_one();\n    "}}
{"compare": {"body": ["compare(${0:tgt})"], "prefix": ["compare", "function:compare"], "description": "    extern virtual function bit compare(avery_reg_field tgt);\n    "}}
{"set_print_verbosity": {"body": ["set_print_verbosity(${0:v})"], "prefix": ["set_print_verbosity", "function:set_print_verbosity"], "description": "    extern virtual function void set_print_verbosity(int v);\n    "}}
{"new": {"body": ["new(${0:name})"], "prefix": ["new", "function:new"], "description": "    function new(string name = \"avery_reg\");\n    "}}
{"get_size_dw": {"body": ["get_size_dw(${0:})"], "prefix": ["get_size_dw", "function:get_size_dw"], "description": "    extern virtual function int get_size_dw();\n    "}}
{"get_size": {"body": ["get_size(${0:})"], "prefix": ["get_size", "function:get_size"], "description": "    extern virtual function int get_size();\n    "}}
{"fread_dw": {"body": ["fread_dw(${1:dw_offset}, ${0:byte_enable})"], "prefix": ["fread_dw", "function:fread_dw"], "description": "    extern virtual function avery_reg_val_t fread_dw( int      dw_offset  ,\n                                                      bit       byte_enable = 4'b1111 );\n    "}}
{"fwrite_dw": {"body": ["fwrite_dw(${2:dw_offset}, ${1:value}, ${0:modifier})"], "prefix": ["fwrite_dw", "function:fwrite_dw"], "description": "    extern virtual function void fwrite_dw( int             dw_offset  ,\n                                            avery_u32       value      ,\n                                            bit              byte_enable = 4'b1111,\n                                            avery_data_base modifier    = null );\n    "}}
{"sprint": {"body": ["sprint(${0:prefix})"], "prefix": ["sprint", "function:sprint"], "description": "    extern virtual function string sprint(int verbosity = 0, string prefix = \"\");\n    "}}
{"configure": {"body": ["configure(${0:n_dwords})"], "prefix": ["configure", "function:configure"], "description": "    extern function void configure(int n_dwords = 0);\n    "}}
{"get_dword": {"body": ["get_dword(${0:dw_offset})"], "prefix": ["get_dword", "function:get_dword"], "description": "    extern function avery_reg_val_t get_dword(int dw_offset);\n    "}}
{"sprint_dword": {"body": ["sprint_dword(${1:dw_offset}, ${0:verbosity})"], "prefix": ["sprint_dword", "function:sprint_dword"], "description": "    extern function string sprint_dword(int dw_offset, int verbosity= 0);\n    "}}
{"set_dword": {"body": ["set_dword(${2:dw_offset}, ${1:value}, ${0:modifier})"], "prefix": ["set_dword", "function:set_dword"], "description": "    extern virtual function void set_dword(\n            int             dw_offset  ,\n            avery_u32       value      ,\n            bit              byte_enable = 4'b1111,\n            avery_data_base modifier    = null );\n    "}}
{"create_dynamic_fields": {"body": ["create_dynamic_fields(${0:})"], "prefix": ["create_dynamic_fields", "function:create_dynamic_fields"], "description": "    virtual function void create_dynamic_fields();\n    "}}
{"apci_sprint_fc": {"body": ["apci_sprint_fc(${0:fc})"], "prefix": ["apci_sprint_fc", "function:apci_sprint_fc"], "description": "function string apci_sprint_fc(apci_flow_crd_t fc);\n    "}}
{"apci_sprint_atpt_entry": {"body": ["apci_sprint_atpt_entry(${0:e})"], "prefix": ["apci_sprint_atpt_entry", "function:apci_sprint_atpt_entry"], "description": "function string apci_sprint_atpt_entry(apci_atpt_entry_t e);\n    "}}
{"apci_be_to_bit_mask": {"body": ["apci_be_to_bit_mask(${0:be})"], "prefix": ["apci_be_to_bit_mask", "function:apci_be_to_bit_mask"], "description": "function bit       apci_be_to_bit_mask(bit       be);\n    "}}
{"new": {"body": ["new(${0:name})"], "prefix": ["new", "function:new"], "description": "    function new(string name = \"apci_data_base\");\n    "}}
{"annotate": {"body": ["annotate(${0:s})"], "prefix": ["annotate", "function:annotate"], "description": "    virtual function void annotate(string s);\n    "}}
{"run": {"body": ["run(${0:})"], "prefix": ["run", "task:run"], "description": "    virtual task run();\n    "}}
{"new": {"body": ["new(${0:name})"], "prefix": ["new", "function:new"], "description": "    function new(string name = \"apci_mm_handler\");\n    "}}
{"write_dw": {"body": ["write_dw(${2:offset}, ${1:v}, ${0:byte_enable})"], "prefix": ["write_dw", "function:write_dw"], "description": "    virtual function void write_dw(bit       offset, bit       v, bit       byte_enable);\n    "}}
{"read_dw": {"body": ["read_dw(${1:offset}, ${0:byte_enable})"], "prefix": ["read_dw", "function:read_dw"], "description": "    virtual function bit       read_dw(bit       offset, bit       byte_enable);\n    "}}
{"sprint": {"body": ["sprint(${0:prefix})"], "prefix": ["sprint", "function:sprint"], "description": "    virtual function string sprint(int verbosity=0, string prefix=\"\");\n    "}}
{"sanity_check": {"body": ["sanity_check(${0:log})"], "prefix": ["sanity_check", "function:sanity_check"], "description": "    virtual function void sanity_check(apci_log log);\n    "}}
{"get_size_dw": {"body": ["get_size_dw(${0:})"], "prefix": ["get_size_dw", "function:get_size_dw"], "description": "    virtual function int get_size_dw();\n    "}}
{"new": {"body": ["new(${3:port_id}, ${2:func_id}, ${1:bar_id}, ${0:log})"], "prefix": ["new", "function:new"], "description": "    function new(int port_id, int func_id, int bar_id, apci_log log);\n    "}}
{"delete": {"body": ["delete(${0:h})"], "prefix": ["delete", "function:delete"], "description": "    function void delete(apci_mm_handler h);\n    "}}
{"check_overlap": {"body": ["check_overlap(${0:msg})"], "prefix": ["check_overlap", "function:check_overlap"], "description": "    function void check_overlap(string msg = \"\");\n    "}}
{"sprint": {"body": ["sprint(${0:prefix})"], "prefix": ["sprint", "function:sprint"], "description": "    virtual function string sprint(int verbosity = 0, string prefix=\"\");\n    "}}
{"new": {"body": ["new(${1:port_id}, ${0:is_tx})"], "prefix": ["new", "function:new"], "description": "    function new(int port_id, bit is_tx);\n    "}}
{"set": {"body": ["set(${3:bfm}, ${2:port_id}, ${1:logic_lane_num}, ${0:raw})"], "prefix": ["set", "function:set"], "description": "    function void set( apci_device    bfm\t\t,\n\t\t       int\t      port_id\t\t,\n\t\t       int\t      logic_lane_num\t,\n\t\t       apci_raw_sym_t raw\t\t );\n    "}}
{"set": {"body": ["set(${5:bfm}, ${4:port_id}, ${3:logic_lane_num}, ${2:sym}, ${1:os_type}, ${0:os_index})"], "prefix": ["set", "function:set"], "description": "    function void set( apci_device  bfm\t\t    , \n\t\t       int\t    port_id\t    , \n\t\t       int\t    logic_lane_num  , \n\t\t       bit      \t    sym\t\t    , \n\t\t       apci_os_type os_type\t    , \n\t\t       bit      \t    os_index\t     );\n    "}}
{"set": {"body": ["set(${3:bfm}, ${2:port_id}, ${1:active_oses}, ${0:inactive_oses})"], "prefix": ["set", "function:set"], "description": "    function void set( apci_device    bfm\t\t,\n\t\t       int\t      port_id\t\t,\n\t\t       apci_os\t      active_oses      \t,\n\t\t       apci_os\t      inactive_oses         );\n    "}}
{"set": {"body": ["set(${2:bfm}, ${1:logic_lane_num}, ${0:os})"], "prefix": ["set", "function:set"], "description": "    function void set( apci_device    bfm\t\t,\n\t\t       int\t      logic_lane_num    , \n\t\t       apci_os        os\t\t);\n    "}}
{"write_mem_line": {"body": ["write_mem_line(${3:addr}, ${2:byte_enable}, ${1:bytes}, ${0:src})"], "prefix": ["write_mem_line", "task:write_mem_line"], "description": "    virtual task write_mem_line(\n            input bit               addr        ,\n            input bit               byte_enable ,\n\t    ref   bit               bytes           ,\n\t    input avery_data_base   src = null       \n\t);\t\n    "}}
{"read_mem_line": {"body": ["read_mem_line(${2:addr}, ${1:bytes}, ${0:src})"], "prefix": ["read_mem_line", "task:read_mem_line"], "description": "    virtual task read_mem_line(\n\t    input bit               addr        ,\n\t    ref   bit               bytes           ,\n\t    input avery_data_base   src = null \n\t);\t\n    "}}
{"write_noncoh_mem": {"body": ["write_noncoh_mem(${4:addr}, ${3:first_be}, ${2:last_be}, ${1:va}, ${0:src})"], "prefix": ["write_noncoh_mem", "task:write_noncoh_mem"], "description": "    virtual task write_noncoh_mem(\n\t    input bit             addr       ,\n\t    input bit              first_be   ,\n\t    input bit              last_be    ,\n\t    ref   bit             va             ,\n\t    input avery_data_base src         \n\t);\t\n    "}}
{"read_noncoh_mem": {"body": ["read_noncoh_mem(${5:addr}, ${4:ndw}, ${3:first_be}, ${2:last_be}, ${1:va}, ${0:src})"], "prefix": ["read_noncoh_mem", "task:read_noncoh_mem"], "description": "    virtual task read_noncoh_mem(\n\t    input bit             addr    ,\n\t    input bit             ndw     ,\n\t    input bit              first_be,\n\t    input bit              last_be ,\n\t    ref   bit             va      ,\n\t    input avery_data_base src\n\t);\t\n    "}}
{"send_over_lpif": {"body": ["send_over_lpif(${0:d})"], "prefix": ["send_over_lpif", "function:send_over_lpif"], "description": "    virtual function void send_over_lpif(apci_data_base d);\n    "}}
{"wait_from_lpif": {"body": ["wait_from_lpif(${0:d})"], "prefix": ["wait_from_lpif", "task:wait_from_lpif"], "description": "    virtual task wait_from_lpif(output apci_data_base d);\n    "}}
{"sprint": {"body": ["sprint(${0:})"], "prefix": ["sprint", "function:sprint"], "description": "    virtual function string sprint();\n    "}}
{"new": {"body": ["new(${0:link_speed})"], "prefix": ["new", "function:new"], "description": "    extern function new (`avery_strname  apci_os_type kind = APCI_OS_unknown, bit is_8b10b = 1, int link_speed = 1);\n    "}}
{"copy": {"body": ["copy(${0:level})"], "prefix": ["copy", "function:copy"], "description": "    extern function apci_os copy(apci_os to = null, int level = -1);\n    "}}
{"is_ts": {"body": ["is_ts(${0:})"], "prefix": ["is_ts", "function:is_ts"], "description": "    function bit is_ts()            ; return kind inside {APCI_OS_ts1, APCI_OS_ts2}      ; endfunction\n    "}}
{"is_ts1": {"body": ["is_ts1(${0:})"], "prefix": ["is_ts1", "function:is_ts1"], "description": "    function bit is_ts1()           ; return kind == APCI_OS_ts1                         ; endfunction\n    "}}
{"is_ts2": {"body": ["is_ts2(${0:})"], "prefix": ["is_ts2", "function:is_ts2"], "description": "    function bit is_ts2()           ; return kind == APCI_OS_ts2                         ; endfunction\n    "}}
{"is_ts0": {"body": ["is_ts0(${0:})"], "prefix": ["is_ts0", "function:is_ts0"], "description": "    function bit is_ts0()           ; return kind == APCI_OS_ts0                         ; endfunction\n    "}}
{"is_skp": {"body": ["is_skp(${0:})"], "prefix": ["is_skp", "function:is_skp"], "description": "    function bit is_skp()           ; return kind inside {APCI_OS_skp, APCI_OS_ctrl_skp} ; endfunction\n    "}}
{"is_ctrl_skp": {"body": ["is_ctrl_skp(${0:})"], "prefix": ["is_ctrl_skp", "function:is_ctrl_skp"], "description": "    function bit is_ctrl_skp()      ; return kind == APCI_OS_ctrl_skp                    ; endfunction\n    "}}
{"is_ei": {"body": ["is_ei(${0:})"], "prefix": ["is_ei", "function:is_ei"], "description": "    function bit is_ei()            ; return kind == APCI_OS_ei                          ; endfunction\n    "}}
{"is_eie": {"body": ["is_eie(${0:})"], "prefix": ["is_eie", "function:is_eie"], "description": "    function bit is_eie()           ; return kind inside {APCI_OS_eie, APCI_OS_ccix_eie} ; endfunction\n    "}}
{"is_fts": {"body": ["is_fts(${0:})"], "prefix": ["is_fts", "function:is_fts"], "description": "    function bit is_fts()           ; return kind == APCI_OS_fts                         ; endfunction\n    "}}
{"is_compliance": {"body": ["is_compliance(${0:})"], "prefix": ["is_compliance", "function:is_compliance"], "description": "    function bit is_compliance()    ; return kind == APCI_OS_compliance                  ; endfunction\n    "}}
{"is_mod_compliance": {"body": ["is_mod_compliance(${0:})"], "prefix": ["is_mod_compliance", "function:is_mod_compliance"], "description": "    function bit is_mod_compliance(); return kind == APCI_OS_mod_compliance              ; endfunction\n    "}}
{"is_lidl": {"body": ["is_lidl(${0:})"], "prefix": ["is_lidl", "function:is_lidl"], "description": "    function bit is_lidl()          ; return kind == APCI_OS_lidl                        ; endfunction\n    "}}
{"is_sds": {"body": ["is_sds(${0:})"], "prefix": ["is_sds", "function:is_sds"], "description": "    function bit is_sds()           ; return kind == APCI_OS_sds                         ; endfunction\n    "}}
{"is_user": {"body": ["is_user(${0:})"], "prefix": ["is_user", "function:is_user"], "description": "    function bit is_user()          ; return kind == APCI_OS_user                        ; endfunction\n    "}}
{"compare": {"body": ["compare(${1:to}, ${0:diff})"], "prefix": ["compare", "function:compare"], "description": "    extern virtual function bit compare(apci_os to, output string diff);\n    "}}
{"get_length": {"body": ["get_length(${0:})"], "prefix": ["get_length", "function:get_length"], "description": "    extern virtual function int get_length();\n    "}}
{"sprint": {"body": ["sprint(${0:prefix})"], "prefix": ["sprint", "function:sprint"], "description": "    extern virtual function string sprint(int verbosity = 0, string prefix = \"\");\n    "}}
{"is_std_ts2": {"body": ["is_std_ts2(${0:})"], "prefix": ["is_std_ts2", "function:is_std_ts2"], "description": "    extern virtual function bit is_std_ts2();\n    "}}
{"is_eq_ts2": {"body": ["is_eq_ts2(${0:})"], "prefix": ["is_eq_ts2", "function:is_eq_ts2"], "description": "    extern virtual function bit is_eq_ts2();\n    "}}
{"is_eq_ts2_8b10b": {"body": ["is_eq_ts2_8b10b(${0:})"], "prefix": ["is_eq_ts2_8b10b", "function:is_eq_ts2_8b10b"], "description": "    extern virtual function bit is_eq_ts2_8b10b();\n    "}}
{"is_eq_ts2_128b": {"body": ["is_eq_ts2_128b(${0:})"], "prefix": ["is_eq_ts2_128b", "function:is_eq_ts2_128b"], "description": "    extern virtual function bit is_eq_ts2_128b();\n    "}}
{"is_eq_ts1": {"body": ["is_eq_ts1(${0:})"], "prefix": ["is_eq_ts1", "function:is_eq_ts1"], "description": "    extern virtual function bit is_eq_ts1();\n    "}}
{"is_mod_ts": {"body": ["is_mod_ts(${0:})"], "prefix": ["is_mod_ts", "function:is_mod_ts"], "description": "    extern virtual function bit is_mod_ts();\n    "}}
{"is_mod_ts1": {"body": ["is_mod_ts1(${0:})"], "prefix": ["is_mod_ts1", "function:is_mod_ts1"], "description": "    extern virtual function bit is_mod_ts1();\n    "}}
{"is_mod_ts2": {"body": ["is_mod_ts2(${0:})"], "prefix": ["is_mod_ts2", "function:is_mod_ts2"], "description": "    extern virtual function bit is_mod_ts2();\n    "}}
{"is_compliance_step1_128b": {"body": ["is_compliance_step1_128b(${0:})"], "prefix": ["is_compliance_step1_128b", "function:is_compliance_step1_128b"], "description": "    extern virtual function bit is_compliance_step1_128b();\n    "}}
{"is_compliance_step2_128b": {"body": ["is_compliance_step2_128b(${0:})"], "prefix": ["is_compliance_step2_128b", "function:is_compliance_step2_128b"], "description": "    extern virtual function bit is_compliance_step2_128b();\n    "}}
{"is_compliance_step3_128b": {"body": ["is_compliance_step3_128b(${0:})"], "prefix": ["is_compliance_step3_128b", "function:is_compliance_step3_128b"], "description": "    extern virtual function bit is_compliance_step3_128b();\n    "}}
{"is_8b10b_mod_compliance_with_delay": {"body": ["is_8b10b_mod_compliance_with_delay(${0:})"], "prefix": ["is_8b10b_mod_compliance_with_delay", "function:is_8b10b_mod_compliance_with_delay"], "description": "    extern virtual function bit is_8b10b_mod_compliance_with_delay();\n    "}}
{"rehash_parity": {"body": ["rehash_parity(${0:})"], "prefix": ["rehash_parity", "function:rehash_parity"], "description": "    extern virtual function void rehash_parity();\n    "}}
{"rehash_margin": {"body": ["rehash_margin(${0:})"], "prefix": ["rehash_margin", "function:rehash_margin"], "description": "    extern virtual function void rehash_margin();\n    "}}
{"make_cp_8b10b": {"body": ["make_cp_8b10b(${1:with_delay}, ${0:err_status})"], "prefix": ["make_cp_8b10b", "function:make_cp_8b10b"], "description": "    extern virtual function void make_cp_8b10b(bit with_delay, bit       err_status);\n    "}}
{"make_cp_128b": {"body": ["make_cp_128b(${2:step}, ${1:lane_no}, ${0:tx_preset})"], "prefix": ["make_cp_128b", "function:make_cp_128b"], "description": "    extern virtual function void make_cp_128b(byte step, byte lane_no, bit       tx_preset); \n    "}}
{"make_cp_1b1b": {"body": ["make_cp_1b1b(${1:step}, ${0:lane_no})"], "prefix": ["make_cp_1b1b", "function:make_cp_1b1b"], "description": "    extern virtual function void make_cp_1b1b(byte step, byte lane_no);\n    "}}
{"rehash_gen6_ts": {"body": ["rehash_gen6_ts(${0:})"], "prefix": ["rehash_gen6_ts", "function:rehash_gen6_ts"], "description": "    extern virtual function void rehash_gen6_ts();\n    "}}
{"mod_ec": {"body": ["mod_ec(${0:ec})"], "prefix": ["mod_ec", "function:mod_ec"], "description": "    extern virtual function void mod_ec(bit       ec);\n    "}}
{"get_ec": {"body": ["get_ec(${0:})"], "prefix": ["get_ec", "function:get_ec"], "description": "    extern virtual function bit       get_ec();\n    "}}
{"check_100fs_time_precision": {"body": ["check_100fs_time_precision(${0:})"], "prefix": ["check_100fs_time_precision", "task:check_100fs_time_precision"], "description": "task check_100fs_time_precision();\n    "}}
{"uvm_raise_objection": {"body": ["uvm_raise_objection(${0:})"], "prefix": ["uvm_raise_objection", "function:uvm_raise_objection"], "description": "    local function void uvm_raise_objection();\n    "}}
{"uvm_drop_objection": {"body": ["uvm_drop_objection(${0:})"], "prefix": ["uvm_drop_objection", "function:uvm_drop_objection"], "description": "    local function void uvm_drop_objection();\n    "}}
{"new": {"body": ["new(${1:name}, ${0:`avery_xvm_parent})"], "prefix": ["new", "function:new"], "description": "\tfunction new(string name, `avery_xvm_parent); \\\n    "}}
