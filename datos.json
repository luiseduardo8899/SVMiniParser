{"new": {"prefix": ["new", "function:new"], "body": ["new(${1:.link_speed( )});"], "description": "    extern function new (`avery_strname  apci_os_type kind = APCI_OS_unknown, bit is_8b10b = 1, int link_speed = 1);\n    "}, "tx_create_cxl_msg": {"prefix": ["tx_create_cxl_msg", "function:tx_create_cxl_msg"], "body": ["tx_create_cxl_msg(${1:.bfm( )}, ${2:.msg( )});"], "description": "    virtual function void tx_create_cxl_msg(\n\t    input apci_device   bfm,\n\t    input acxl_msg      msg\n\t);\n    "}, "tx_cxl_msg_exit_tl": {"prefix": ["tx_cxl_msg_exit_tl", "function:tx_cxl_msg_exit_tl"], "body": ["tx_cxl_msg_exit_tl(${1:.bfm( )}, ${2:.msg( )});"], "description": "    virtual function void tx_cxl_msg_exit_tl(\n\t    input apci_device      bfm,\n\t    input acxl_msg         msg \n\t);\treturn;\n    "}, "tx_flit_before_encrypt": {"prefix": ["tx_flit_before_encrypt", "function:tx_flit_before_encrypt"], "body": ["tx_flit_before_encrypt(${1:.bfm( )}, ${2:.flit( )});"], "description": "    virtual function void tx_flit_before_encrypt(\n\t    apci_device   bfm,\n\t    acxl_flit     flit \n\t);\n    "}, "tx_ide_mac_epoch_created": {"prefix": ["tx_ide_mac_epoch_created", "function:tx_ide_mac_epoch_created"], "body": ["tx_ide_mac_epoch_created(${1:.bfm( )}, ${2:.last_flit( )}, ${3:.truncated( )});"], "description": "    virtual function void tx_ide_mac_epoch_created(\n\t    apci_device   bfm,\n\t    acxl_flit     last_flit,\n\t    bit           truncated\n\t);\n    "}, "tx_flit_exit_dll": {"prefix": ["tx_flit_exit_dll", "function:tx_flit_exit_dll"], "body": ["tx_flit_exit_dll(${1:.bfm( )}, ${2:.flit( )});"], "description": "    virtual function void tx_flit_exit_dll(\n\t    apci_device   bfm,\n\t    apci_flit     flit \n\t);  return;\n    "}, "tx_flit_exit_arbmux": {"prefix": ["tx_flit_exit_arbmux", "function:tx_flit_exit_arbmux"], "body": ["tx_flit_exit_arbmux(${1:.bfm( )}, ${2:.flit( )});"], "description": "    virtual function void tx_flit_exit_arbmux(\n\t    apci_device   bfm,\n\t    acxl_flit     flit \n\t);\n    "}, "tx_flit_exit_mac": {"prefix": ["tx_flit_exit_mac", "function:tx_flit_exit_mac"], "body": ["tx_flit_exit_mac(${1:.bfm( )}, ${2:.flit( )});"], "description": "    virtual function void tx_flit_exit_mac(\n\t    apci_device   bfm,\n\t    apci_flit     flit \n\t);  return;\n    "}, "rx_flit_enter_mac": {"prefix": ["rx_flit_enter_mac", "function:rx_flit_enter_mac"], "body": ["rx_flit_enter_mac(${1:.bfm( )}, ${2:.flit( )});"], "description": "    virtual function void rx_flit_enter_mac(\n\t    apci_device   bfm,\n\t    apci_flit     flit \n\t);  return;\n    "}, "rx_flit_enter_arbmux": {"prefix": ["rx_flit_enter_arbmux", "function:rx_flit_enter_arbmux"], "body": ["rx_flit_enter_arbmux(${1:.bfm( )}, ${2:.flit( )});"], "description": "    virtual function void rx_flit_enter_arbmux(\n\t    apci_device  bfm,\n\t    acxl_flit    flit\n\t);\n    "}, "rx_flit_enter_dll": {"prefix": ["rx_flit_enter_dll", "function:rx_flit_enter_dll"], "body": ["rx_flit_enter_dll(${1:.bfm( )}, ${2:.flit( )});"], "description": "    virtual function void rx_flit_enter_dll(\n\t    apci_device  bfm,\n\t    acxl_flit    flit\n\t);\n    "}, "rx_flit_after_decrypt": {"prefix": ["rx_flit_after_decrypt", "function:rx_flit_after_decrypt"], "body": ["rx_flit_after_decrypt(${1:.bfm( )}, ${2:.flit( )});"], "description": "    virtual function void rx_flit_after_decrypt(\n\t    apci_device  bfm,\n\t    acxl_flit    flit\n\t);\n    "}, "rx_cxl_msg_enter_tl": {"prefix": ["rx_cxl_msg_enter_tl", "function:rx_cxl_msg_enter_tl"], "body": ["rx_cxl_msg_enter_tl(${1:.bfm( )}, ${2:.msg( )});"], "description": "    virtual function void rx_cxl_msg_enter_tl(\n\t    input apci_device      bfm,\n\t    input acxl_msg         msg \n\t);\n    "}, "read_mem_line_cb": {"prefix": ["read_mem_line_cb", "function:read_mem_line_cb"], "body": ["read_mem_line_cb(${1:.addr( )}, ${2:.bytes( )}, ${3:.src( )});"], "description": "    virtual function void read_mem_line_cb(\n\t    input bit               addr        ,\n\t    ref   bit               bytes           ,\n\t    input avery_data_base   src = null\n\t);\t\n    "}, "write_mem_line_cb": {"prefix": ["write_mem_line_cb", "function:write_mem_line_cb"], "body": ["write_mem_line_cb(${1:.addr( )}, ${2:.byte_enable( )}, ${3:.bytes( )}, ${4:.src( )});"], "description": "    virtual function void write_mem_line_cb(\n            input bit               addr        ,\n            input bit               byte_enable ,\n\t    ref   bit               bytes           ,\n\t    input avery_data_base   src = null       \n\t);\t\n    "}, "force_rcvr_detection": {"prefix": ["force_rcvr_detection", "function:force_rcvr_detection"], "body": ["force_rcvr_detection(${1:.detected( )}, ${2:.is_busA( )});"], "description": "    function void force_rcvr_detection(bit       detected, bit is_busA);\n    "}, "set_timing": {"prefix": ["set_timing", "function:set_timing"], "body": ["set_timing(${1:.entry( )}, ${2:.lane_no( )}, ${3:.n_pclks( )}, ${4:.is_busA( )});"], "description": "    function void set_timing(string entry, byte lane_no, int n_pclks, bit is_busA);\n    "}, "set_value": {"prefix": ["set_value", "function:set_value"], "body": ["set_value(${1:.entry( )}, ${2:.lane_no( )}, ${3:.value( )}, ${4:.is_busA( )});"], "description": "    function void set_value(string entry, byte lane_no, int value, bit is_busA);\n    "}, "wait_tx_msg": {"prefix": ["wait_tx_msg", "task:wait_tx_msg"], "body": ["wait_tx_msg(${1:.port_id( )}, ${2:.code( )}, ${3:.msg( )});"], "description": "virtual task wait_tx_msg(int port_id, apci_msg_code_e code, time timer = 0, string msg = \"\");\n    "}, "wait_rx_msg": {"prefix": ["wait_rx_msg", "task:wait_rx_msg"], "body": ["wait_rx_msg(${1:.port_id( )}, ${2:.code( )}, ${3:.msg( )});"], "description": "virtual task wait_rx_msg(int port_id, apci_msg_code_e code, time timer = 0, string msg = \"\");\n    "}, "wait_rx_err_msg": {"prefix": ["wait_rx_err_msg", "task:wait_rx_err_msg"], "body": ["wait_rx_err_msg(${1:.port_id( )}, ${2:.tlp( )});"], "description": "virtual task wait_rx_err_msg(int port_id, time timer = 0, string msg = \"\", output apci_tlp tlp);\n    "}, "wait_tx_dllp": {"prefix": ["wait_tx_dllp", "task:wait_tx_dllp"], "body": ["wait_tx_dllp(${1:.port_id( )}, ${2:.t( )}, ${3:.msg( )});"], "description": "virtual task wait_tx_dllp(int port_id, apci_dllp_type t, time timer = 0, string msg = \"\");\n    "}, "wait_rx_dllp": {"prefix": ["wait_rx_dllp", "task:wait_rx_dllp"], "body": ["wait_rx_dllp(${1:.port_id( )}, ${2:.t( )}, ${3:.msg( )});"], "description": "virtual task wait_rx_dllp(int port_id, apci_dllp_type t, time timer = 0, string msg = \"\");\n    "}, "msix_mask_unmask": {"prefix": ["msix_mask_unmask", "task:msix_mask_unmask"], "body": ["msix_mask_unmask(${1:.bdf( )}, ${2:.is_mask( )}, ${3:.int_vector( )}, ${4:.err( )});"], "description": "virtual task msix_mask_unmask(apci_bdf_t bdf, bit is_mask, int int_vector, output bit err);\n    "}, "get_interrupt_enabled": {"prefix": ["get_interrupt_enabled", "task:get_interrupt_enabled"], "body": ["get_interrupt_enabled(${1:.port_id( )}, ${2:.func_id( )}, ${3:.pin_enabled( )}, ${4:.msi_enabled( )}, ${5:.msix_enabled( )});"], "description": "virtual task get_interrupt_enabled(\n        input  int port_id     ,\n        input  int func_id     ,\n        output bit pin_enabled ,\n        output bit msi_enabled ,\n        output bit msix_enabled );\n    "}, "clear_reg_interrupt_status": {"prefix": ["clear_reg_interrupt_status", "task:clear_reg_interrupt_status"], "body": ["clear_reg_interrupt_status(${1:.port_id( )}, ${2:.func_id( )});"], "description": "virtual task clear_reg_interrupt_status (\n        input  int port_id     ,\n        input  int func_id);\n    "}, "check_dev_type": {"prefix": ["check_dev_type", "function:check_dev_type"], "body": ["check_dev_type(${1:.dt( )}, ${2:.msg( )});"], "description": "local function void check_dev_type(apci_device_type dt, string msg);\n    "}, "convert_rw_size": {"prefix": ["convert_rw_size", "function:convert_rw_size"], "body": ["convert_rw_size(${1:.addr( )}, ${2:.size( )}, ${3:.dw_addr( )}, ${4:.first_be( )}, ${5:.last_be( )}, ${6:.dw_size( )});"], "description": "virtual function void convert_rw_size(\n    input  bit       addr,\t             bit       size,\t      output bit       dw_addr,\n           bit       first_be,\n           bit       last_be,\n           int       dw_size\n    );\n    "}, "dw_to_byte": {"prefix": ["dw_to_byte", "function:dw_to_byte"], "body": ["dw_to_byte(${1:.first_be( )}, ${2:.last_be( )}, ${3:.va( )}, ${4:.ba( )});"], "description": "virtual function void dw_to_byte(\n    input  bit       first_be,\n           bit       last_be,\n    ref    bit       va      ,\n    output bit       ba      \n    );\n    "}, "byte_to_dw": {"prefix": ["byte_to_dw", "function:byte_to_dw"], "body": ["byte_to_dw(${1:.first_be( )}, ${2:.last_be( )}, ${3:.dw_size( )}, ${4:.ba( )}, ${5:.va( )});"], "description": "virtual function void byte_to_dw(\n    input  bit       first_be,\n           bit       last_be,\n           int       dw_size,\n           bit       ba      ,\n    ref    bit       va      \n    );\n    "}, "be_trace": {"prefix": ["be_trace", "function:be_trace"], "body": ["be_trace(${1:.be( )}, ${2:.start( )}, ${3:.limit( )});"], "description": "local function void be_trace(\n    input  bit       be,\n    output int\t     start,\n\t   int\t     limit\n    );\n    "}, "rc_get_BDF_BAR": {"prefix": ["rc_get_BDF_BAR", "task:rc_get_BDF_BAR"], "body": ["rc_get_BDF_BAR(${1:.bdf2( )}, ${2:.pcie_cap2( )}, ${3:.total2( )});"], "description": "task rc_get_BDF_BAR(   \n    input apci_bdf_t bdf2,\n    input apci_cap_type0 pcie_cap2,\n    input int start2= 0,       input int total2= 1);       "}, "send_doe_data": {"prefix": ["send_doe_data", "task:send_doe_data"], "body": ["send_doe_data(${1:.bdf( )}, ${2:.doe_cap( )}, ${3:.dd( )}, ${4:.wait_response( )});"], "description": "task send_doe_data(apci_bdf_t bdf, apci_cap_doe doe_cap, apci_doe_data dd, bit wait_response = 1);\n    "}, "fetch_doe_data": {"prefix": ["fetch_doe_data", "task:fetch_doe_data"], "body": ["fetch_doe_data(${1:.bdf( )}, ${2:.cap( )}, ${3:.req( )}, ${4:.rsp( )}, ${5:.err( )});"], "description": "task fetch_doe_data(apci_bdf_t bdf, apci_cap_doe cap, apci_doe_data req, output apci_doe_data rsp, bit err);\n    "}, "do_doe_discovery": {"prefix": ["do_doe_discovery", "task:do_doe_discovery"], "body": ["do_doe_discovery(${1:.bdf( )}, ${2:.doe_cap( )}, ${3:.d_table( )}, ${4:.err( )});"], "description": "task do_doe_discovery(apci_bdf_t bdf, apci_cap_doe doe_cap, output apci_doe_discovery_table d_table, bit err);\n    "}, "do_doe_cdat_search": {"prefix": ["do_doe_cdat_search", "task:do_doe_cdat_search"], "body": ["do_doe_cdat_search(${1:.bdf( )}, ${2:.doe_cap( )}, ${3:.cdat( )}, ${4:.err( )});"], "description": "task do_doe_cdat_search(apci_bdf_t bdf, apci_cap_doe doe_cap, output acxl_coh_dev_attr_table cdat, bit err);\n    "}, "send_cxl_device_cmd": {"prefix": ["send_cxl_device_cmd", "task:send_cxl_device_cmd"], "body": ["send_cxl_device_cmd(${1:.cmd( )});"], "description": "task send_cxl_device_cmd(acxl_device_cmd cmd);\n    "}, "cfgwr_wait_done": {"prefix": ["cfgwr_wait_done", "task:cfgwr_wait_done"], "body": ["cfgwr_wait_done(${1:.bdf( )}, ${2:.offset( )}, ${3:.v( )}, ${4:.err( )}, ${5:.dbg( )});"], "description": "local task cfgwr_wait_done(apci_bdf_t bdf, avery_u16 offset, avery_u32 v, output bit err, input string dbg=\"\");\n    "}, "cfgrd_wait_done": {"prefix": ["cfgrd_wait_done", "task:cfgrd_wait_done"], "body": ["cfgrd_wait_done(${1:.bdf( )}, ${2:.offset( )}, ${3:.v( )}, ${4:.err( )}, ${5:.dbg( )});"], "description": "local task cfgrd_wait_done(apci_bdf_t bdf, avery_u16 offset, output avery_u32 v, output bit err, input string dbg=\"\");\n    "}, "clk_rate_2_period": {"prefix": ["clk_rate_2_period", "function:clk_rate_2_period"], "body": ["clk_rate_2_period(${1:.rate( )});"], "description": "\tfunction int clk_rate_2_period(int rate);\n    "}, "ccix_clk_rate_2_period": {"prefix": ["ccix_clk_rate_2_period", "function:ccix_clk_rate_2_period"], "body": ["ccix_clk_rate_2_period(${1:.rate( )});"], "description": "\tfunction int ccix_clk_rate_2_period(int rate);\n    "}, "A_modify_skpos": {"prefix": ["A_modify_skpos", "function:A_modify_skpos"], "body": ["A_modify_skpos(${0:});"], "description": "function void A_modify_skpos();\n    "}, "to_dataBusWidth": {"prefix": ["to_dataBusWidth", "function:to_dataBusWidth"], "body": ["to_dataBusWidth(${1:.n_bytes( )});"], "description": "function int to_dataBusWidth(int n_bytes);\n    "}, "a_reset": {"prefix": ["a_reset", "task:a_reset"], "body": ["a_reset(${0:});"], "description": "task a_reset();\n    "}, "is_start_sos": {"prefix": ["is_start_sos", "function:is_start_sos"], "body": ["is_start_sos(${1:.sym( )});"], "description": "function bit is_start_sos(apci_ebuf_data_t  sym);\n    "}, "dbg_phy_rx": {"prefix": ["dbg_phy_rx", "task:dbg_phy_rx"], "body": ["dbg_phy_rx(${0:});"], "description": "task dbg_phy_rx();\n    "}, "add_dut": {"prefix": ["add_dut", "function:add_dut"], "body": ["add_dut(${1:.vendor_id( )}, ${2:.device_id( )});"], "description": "    virtual function void add_dut(int vendor_id, int device_id);\n    "}, "is_dut": {"prefix": ["is_dut", "function:is_dut"], "body": ["is_dut(${1:.vendor_id( )}, ${2:.device_id( )});"], "description": "    virtual function bit is_dut(int vendor_id, int device_id);\n    "}, "sprint": {"prefix": ["sprint", "function:sprint"], "body": ["sprint(${1:.prefix( )});"], "description": "    extern virtual function string sprint(int verbosity = 0, string prefix = \"\");\n    "}, "setup_cfg_space": {"prefix": ["setup_cfg_space", "function:setup_cfg_space"], "body": ["setup_cfg_space(${1:.bfm( )}, ${2:.csp( )});"], "description": "    virtual function void setup_cfg_space(\n\t    input apci_device      bfm,\n\t    input apci_cfg_space   csp\n\t);\treturn;\n    "}, "setup_mmio_reg": {"prefix": ["setup_mmio_reg", "function:setup_mmio_reg"], "body": ["setup_mmio_reg(${1:.bfm( )}, ${2:.mmreg( )});"], "description": "    virtual function void setup_mmio_reg(\n\t    input apci_device      bfm,\n\t    input apci_mmio_reg    mmreg \n\t);\treturn;\n    "}, "pre_enum_wait_user": {"prefix": ["pre_enum_wait_user", "task:pre_enum_wait_user"], "body": ["pre_enum_wait_user(${1:.bfm( )});"], "description": "    virtual task pre_enum_wait_user(input apci_device bfm);\n    "}, "pre_enum_phase0": {"prefix": ["pre_enum_phase0", "function:pre_enum_phase0"], "body": ["pre_enum_phase0(${1:.bfm( )}, ${2:.bus( )}, ${3:.skip_enum( )});"], "description": "    virtual function void pre_enum_phase0(\n\t    input apci_device  bfm,\n\t    input bit           bus,\n\t    inout bit          skip_enum   \t);\treturn;\n    "}, "pre_enum_phase1": {"prefix": ["pre_enum_phase1", "function:pre_enum_phase1"], "body": ["pre_enum_phase1(${1:.bfm( )}, ${2:.dmgr( )}, ${3:.bdf( )}, ${4:.skip_enum( )});"], "description": "    virtual function void pre_enum_phase1(\n\t    apci_device     bfm,\n\t    apci_device_mgr dmgr,\n\t    apci_bdf_t      bdf,\n\t    inout bit       skip_enum\n\t);\treturn;\n    "}, "enum_done": {"prefix": ["enum_done", "function:enum_done"], "body": ["enum_done(${1:.bfm( )}, ${2:.mgr( )});"], "description": "    virtual function void enum_done(\n\t    input apci_device     bfm,\n\t    input apci_device_mgr mgr\n\t);\treturn;\n    "}, "enum_done_wait_user": {"prefix": ["enum_done_wait_user", "task:enum_done_wait_user"], "body": ["enum_done_wait_user(${1:.bfm( )}, ${2:.mgrs( )});"], "description": "    virtual task enum_done_wait_user(\n\t    input apci_device     bfm,\n\t    input apci_device_mgr mgrs      \n\t);\treturn;\n    "}, "read_mem_cb": {"prefix": ["read_mem_cb", "function:read_mem_cb"], "body": ["read_mem_cb(${1:.is_host_mem( )}, ${2:.addr( )}, ${3:.ndw( )}, ${4:.first_be( )}, ${5:.last_be( )}, ${6:.va( )}, ${7:.src( )});"], "description": "    virtual function void read_mem_cb(\n\t    input bit             is_host_mem,\n\t    input bit             addr    ,\n\t    input bit             ndw     ,\n\t    input bit              first_be,\n\t    input bit              last_be ,\n\t    ref   bit             va      ,\n\t    input avery_data_base src\n\t);\t\n    "}, "write_mem_cb": {"prefix": ["write_mem_cb", "function:write_mem_cb"], "body": ["write_mem_cb(${1:.is_host_mem( )}, ${2:.addr( )}, ${3:.first_be( )}, ${4:.last_be( )}, ${5:.va( )}, ${6:.src( )});"], "description": "    virtual function void write_mem_cb(\n            input bit             is_host_mem,\n            input bit             addr       ,\n            input bit              first_be   ,\n            input bit              last_be    ,\n\t    ref   bit             va             ,\n\t    input avery_data_base src         \n\t);\t\n    "}, "rx_interrupt": {"prefix": ["rx_interrupt", "function:rx_interrupt"], "body": ["rx_interrupt(${1:.rc( )}, ${2:.irq( )});"], "description": "    virtual function void rx_interrupt(\n\t        apci_device  rc,\n\t    ref apci_irq_t   irq\n\t);\treturn;\n    "}, "tx_transaction_done": {"prefix": ["tx_transaction_done", "function:tx_transaction_done"], "body": ["tx_transaction_done(${1:.bfm( )}, ${2:.tr( )});"], "description": "    virtual function void tx_transaction_done(\n\t    apci_device      bfm,\n\t    apci_transaction tr\n\t);\treturn;\n    "}, "tx_create_cpl": {"prefix": ["tx_create_cpl", "function:tx_create_cpl"], "body": ["tx_create_cpl(${1:.bfm( )}, ${2:.req( )}, ${3:.cpl( )}, ${4:.ith_split( )}, ${5:.mps_dw( )}, ${6:.rcb_dw( )}, ${7:.delay_ns( )});"], "description": "    virtual function void tx_create_cpl(\n\t    input apci_device bfm      ,\n\t    input apci_tlp    req      ,\n\t    input apci_tlp    cpl      ,\n\t    input int         ith_split,\n\t    input int         mps_dw   ,\n\t    input int         rcb_dw   ,\n\t    inout int         delay_ns  \n\t);\treturn;\n    "}, "tx_pkt_exit_tl": {"prefix": ["tx_pkt_exit_tl", "function:tx_pkt_exit_tl"], "body": ["tx_pkt_exit_tl(${1:.bfm( )}, ${2:.tlp( )});"], "description": "    virtual function void tx_pkt_exit_tl(\n\t    apci_device   bfm,\n\t    apci_tlp      tlp\n\t);\treturn;\n    "}, "tx_pkt_exit_dll": {"prefix": ["tx_pkt_exit_dll", "function:tx_pkt_exit_dll"], "body": ["tx_pkt_exit_dll(${1:.bfm( )}, ${2:.pkt( )});"], "description": "    virtual function void tx_pkt_exit_dll(\n\t    apci_device      bfm,\n\t    apci_packet      pkt\n\t);\treturn;\n    "}, "tx_pkt_exit_mac": {"prefix": ["tx_pkt_exit_mac", "function:tx_pkt_exit_mac"], "body": ["tx_pkt_exit_mac(${1:.bfm( )}, ${2:.pkt( )});"], "description": "    virtual function void tx_pkt_exit_mac(\n\t    apci_device      bfm,\n\t    apci_packet      pkt\n\t);\treturn;\n    "}, "tx_pkt_enter_lane": {"prefix": ["tx_pkt_enter_lane", "function:tx_pkt_enter_lane"], "body": ["tx_pkt_enter_lane(${1:.bfm( )}, ${2:.port_id( )}, ${3:.pkts( )}, ${4:.syms( )}, ${5:.os_after( )}, ${6:.block128_index( )});"], "description": "    virtual function void tx_pkt_enter_lane(\n\t    input apci_device    bfm,\n\t    input int            port_id,\n\t    ref   apci_packet    pkts      ,\n\t    ref   apci_raw_sym_t syms      ,\n\t    ref   apci_os        os_after,       \n\t    input int            block128_index\n\t);\treturn;\n    "}, "tx_os_enter_lane": {"prefix": ["tx_os_enter_lane", "function:tx_os_enter_lane"], "body": ["tx_os_enter_lane(${1:.bfm( )}, ${2:.port_id( )}, ${3:.active_oses( )}, ${4:.inactive_oses( )});"], "description": "    virtual function void tx_os_enter_lane(\n\t    input apci_device   bfm,\n\t    input int           port_id,\n\t    ref   apci_os       active_oses      ,\n\t    ref   apci_os       inactive_oses      \n\t);\treturn;\n    "}, "rx_os_enter_lane": {"prefix": ["rx_os_enter_lane", "function:rx_os_enter_lane"], "body": ["rx_os_enter_lane(${1:.bfm( )}, ${2:.logic_lane_num( )}, ${3:.os( )});"], "description": "    virtual function void rx_os_enter_lane(\n\t    apci_device  bfm,\n\t    int          logic_lane_num,\n\t    apci_os      os\n\t);\treturn;\n    "}, "rx_pkt_enter_mac": {"prefix": ["rx_pkt_enter_mac", "function:rx_pkt_enter_mac"], "body": ["rx_pkt_enter_mac(${1:.bfm( )}, ${2:.pkt( )});"], "description": "    virtual function void rx_pkt_enter_mac(\n\t    apci_device  bfm,\n\t    apci_packet  pkt \n\t);\treturn;\n    "}, "rx_pkt_enter_dll": {"prefix": ["rx_pkt_enter_dll", "function:rx_pkt_enter_dll"], "body": ["rx_pkt_enter_dll(${1:.bfm( )}, ${2:.pkt( )});"], "description": "    virtual function void rx_pkt_enter_dll(\n\t    apci_device  bfm,\n\t    apci_packet  pkt \n\t);\treturn;\n    "}, "rx_pkt_enter_tl": {"prefix": ["rx_pkt_enter_tl", "function:rx_pkt_enter_tl"], "body": ["rx_pkt_enter_tl(${1:.bfm( )}, ${2:.tlp( )});"], "description": "    virtual function void rx_pkt_enter_tl(\n\t    apci_device  bfm,\n\t    apci_tlp     tlp\n\t);\treturn;\n    "}, "commit_data": {"prefix": ["commit_data", "function:commit_data"], "body": ["commit_data(${1:.host( )});"], "description": "    virtual function void commit_data(\n\t    apci_device   host\n\t);\treturn;\n    "}, "tx_sym_before_scramble": {"prefix": ["tx_sym_before_scramble", "function:tx_sym_before_scramble"], "body": ["tx_sym_before_scramble(${1:.bfm( )}, ${2:.port_id( )}, ${3:.logic_lane_num( )}, ${4:.raw( )});"], "description": "    virtual function void tx_sym_before_scramble(\n            input apci_device    bfm           ,\n            input int            port_id       ,\n            input int            logic_lane_num,\n            inout apci_raw_sym_t raw            );\n    "}, "tx_sym_after_scramble": {"prefix": ["tx_sym_after_scramble", "function:tx_sym_after_scramble"], "body": ["tx_sym_after_scramble(${1:.bfm( )}, ${2:.port_id( )}, ${3:.logic_lane_num( )}, ${4:.raw( )});"], "description": "    virtual function void tx_sym_after_scramble(\n                  apci_device    bfm           ,\n                  int            port_id       ,\n                  int            logic_lane_num,\n            inout apci_raw_sym_t raw            );\n    "}, "rx_sym_before_scramble": {"prefix": ["rx_sym_before_scramble", "function:rx_sym_before_scramble"], "body": ["rx_sym_before_scramble(${1:.bfm( )}, ${2:.port_id( )}, ${3:.logic_lane_num( )}, ${4:.sym( )}, ${5:.os_type( )}, ${6:.os_index( )});"], "description": "    virtual function void rx_sym_before_scramble(\n            input apci_device    bfm           ,\n            input int            port_id       ,\n            input int            logic_lane_num,\n            inout bit             sym           ,\n\t    input apci_os_type   os_type       ,\n\t    input bit             os_index      \n\t);\n    "}, "rx_sym_after_scramble": {"prefix": ["rx_sym_after_scramble", "function:rx_sym_after_scramble"], "body": ["rx_sym_after_scramble(${1:.bfm( )}, ${2:.port_id( )}, ${3:.logic_lane_num( )}, ${4:.sym( )}, ${5:.os_type( )}, ${6:.os_index( )});"], "description": "    virtual function void rx_sym_after_scramble(\n            input apci_device    bfm           ,\n            input int            port_id       ,\n            input int            logic_lane_num,\n            inout bit             sym           ,\n\t    input apci_os_type   os_type       ,\n\t    input bit             os_index      \n\t);\n    "}, "start_acknak_latency_timer": {"prefix": ["start_acknak_latency_timer", "function:start_acknak_latency_timer"], "body": ["start_acknak_latency_timer(${1:.bfm( )}, ${2:.latency_limit( )}, ${3:.speed( )}, ${4:.mps( )}, ${5:.linkwidth( )}, ${6:.latency( )});"], "description": "    virtual function void start_acknak_latency_timer(\n                  apci_device bfm    ,\n                  int   latency_limit,\n                  int   speed        ,\n                  int   mps          ,\n                  int   linkwidth    ,\n            inout int   latency        \n       \t);\n    "}, "ltssm_transition": {"prefix": ["ltssm_transition", "function:ltssm_transition"], "body": ["ltssm_transition(${1:.bfm( )}, ${2:.port_id( )}, ${3:.from( )}, ${4:.to( )});"], "description": "    virtual function void ltssm_transition (\n                  apci_device        bfm    , \n                  int                port_id, \n                  apci_ltssm_state_e from   , \n                  apci_ltssm_state_e to\n       \t);\n    "}, "equalization_check_coef": {"prefix": ["equalization_check_coef", "function:equalization_check_coef"], "body": ["equalization_check_coef(${1:.bfm( )}, ${2:.port_id( )}, ${3:.logic_lane_num( )}, ${4:.fs( )}, ${5:.lf( )}, ${6:.use_preset( )}, ${7:.preset( )}, ${8:.postcc( )}, ${9:.cc( )}, ${10:.precc( )}, ${11:.sec_precc( )}, ${12:.reject( )});"], "description": "    virtual function void equalization_check_coef (\n\t          apci_device bfm           ,\n\t          int         port_id       ,\n\t          int         logic_lane_num,\n\t          byte        fs            ,\n\t          byte        lf            ,\n\t          bit         use_preset    ,\n\t    inout byte        preset        ,\n\t    inout bit          postcc        ,\n\t    inout bit          cc            ,\n\t    inout bit          precc         ,\n\t    inout bit          sec_precc     ,\n\t    inout bit         reject\n\t);\n    "}, "equalization_request_coef": {"prefix": ["equalization_request_coef", "function:equalization_request_coef"], "body": ["equalization_request_coef(${1:.bfm( )}, ${2:.port_id( )}, ${3:.logic_lane_num( )}, ${4:.fs( )}, ${5:.lf( )}, ${6:.use_preset( )}, ${7:.preset( )}, ${8:.postcc( )}, ${9:.cc( )}, ${10:.precc( )}, ${11:.sec_precc( )});"], "description": "    virtual function void equalization_request_coef (\n\t          apci_device bfm           ,\n\t          int         port_id       ,\n\t          int         logic_lane_num,\n\t          byte        fs            ,\n\t          byte        lf            ,\n\t    inout bit         use_preset    ,\n\t    inout byte        preset        ,\n\t    inout bit          postcc        ,\n\t    inout bit          cc            ,\n\t    inout bit          precc         ,\n\t    inout bit          sec_precc\n\t);\n    "}, "rx_margin_cmd_before_update": {"prefix": ["rx_margin_cmd_before_update", "function:rx_margin_cmd_before_update"], "body": ["rx_margin_cmd_before_update(${1:.bfm( )}, ${2:.logic_lane_num( )}, ${3:.cmd( )});"], "description": "    virtual function void rx_margin_cmd_before_update(\n            apci_device     bfm,\n            int             logic_lane_num,\n            apci_margin_cmd cmd\n        );      return;\n    "}, "mon_tx_os_enter_lane": {"prefix": ["mon_tx_os_enter_lane", "function:mon_tx_os_enter_lane"], "body": ["mon_tx_os_enter_lane(${1:.bfm( )}, ${2:.logic_lane_num( )}, ${3:.os( )});"], "description": "    virtual function void mon_tx_os_enter_lane(\n\t    apci_device  bfm,\n\t    int          logic_lane_num,\n\t    apci_os      os\n\t);\treturn;\n    "}, "tx_pkt_after_encrypt": {"prefix": ["tx_pkt_after_encrypt", "function:tx_pkt_after_encrypt"], "body": ["tx_pkt_after_encrypt(${1:.bfm( )}, ${2:.tlp( )});"], "description": "    virtual function void tx_pkt_after_encrypt(\n            apci_device  bfm,\n            apci_tlp     tlp\n        );      return;\n    "}, "rx_doe_data": {"prefix": ["rx_doe_data", "function:rx_doe_data"], "body": ["rx_doe_data(${1:.bfm( )}, ${2:.bdf( )}, ${3:.rx_dwords( )}, ${4:.user_tx_dwords( )});"], "description": "    virtual function void rx_doe_data(\n            input apci_device bfm,\n\t    input apci_bdf_t  bdf,\n            ref   bit         rx_dwords      ,\n            ref   bit         user_tx_dwords      \n        );      return;\n    "}, "rx_device_cmd": {"prefix": ["rx_device_cmd", "task:rx_device_cmd"], "body": ["rx_device_cmd(${1:.bfm( )}, ${2:.cmd( )});"], "description": "    virtual task rx_device_cmd (\n            input apci_device     bfm,\n\t    input acxl_device_cmd cmd\n        );      return;\n    "}, "get_sym_time": {"prefix": ["get_sym_time", "function:get_sym_time"], "body": ["get_sym_time(${1:.rate( )});"], "description": "function real get_sym_time(byte rate); \n    "}, "get_total_skew": {"prefix": ["get_total_skew", "function:get_total_skew"], "body": ["get_total_skew(${1:.skew( )});"], "description": "function int get_total_skew(int skew);\n    "}, "sample_cxl_msg": {"prefix": ["sample_cxl_msg", "function:sample_cxl_msg"], "body": ["sample_cxl_msg(${1:.m( )});"], "description": "    virtual function void sample_cxl_msg(acxl_msg m);\n    "}, "sample_flit": {"prefix": ["sample_flit", "function:sample_flit"], "body": ["sample_flit(${1:.f( )}, ${2:.cxl_host_tx( )});"], "description": "    virtual function void sample_flit(acxl_flit f, bit cxl_host_tx);\n    "}, "sample_vlsm_state": {"prefix": ["sample_vlsm_state", "function:sample_vlsm_state"], "body": ["sample_vlsm_state(${1:.st( )});"], "description": "    virtual function void sample_vlsm_state(acxl_vlsm_state_e st);\n    "}, "sample_tlp_at_dll": {"prefix": ["sample_tlp_at_dll", "function:sample_tlp_at_dll"], "body": ["sample_tlp_at_dll(${1:.p( )});"], "description": "    virtual function void sample_tlp_at_dll(apci_packet p);\n    "}, "sample_tlp_dllp": {"prefix": ["sample_tlp_dllp", "function:sample_tlp_dllp"], "body": ["sample_tlp_dllp(${1:.p( )});"], "description": "    virtual function void sample_tlp_dllp(apci_packet p);\n    "}, "sample_os": {"prefix": ["sample_os", "function:sample_os"], "body": ["sample_os(${1:.os( )}, ${2:.ltssm_state( )}, ${3:.link_speed( )});"], "description": "    virtual function void sample_os(\n            apci_os            os         ,\n            apci_ltssm_state_e ltssm_state,\n            byte               link_speed);\n    "}, "get_lf_fs_from_mac": {"prefix": ["get_lf_fs_from_mac", "task:get_lf_fs_from_mac"], "body": ["get_lf_fs_from_mac(${0:});"], "description": "task get_lf_fs_from_mac();\n    "}, "random_setting": {"prefix": ["random_setting", "function:random_setting"], "body": ["random_setting(${1:.is_preset( )}, ${2:.coef( )});"], "description": "function void random_setting(bit is_preset, inout pset_coef_t coef);\n    "}, "test_summary_register": {"prefix": ["test_summary_register", "function:test_summary_register"], "body": ["test_summary_register(${1:.c( )});"], "description": "function void test_summary_register(avery_component c);\n    "}, "test_summary": {"prefix": ["test_summary", "task:test_summary"], "body": ["test_summary(${1:.test_name( )});"], "description": "task test_summary( string s = \"UNKNOWN\", string reason=\"\", string test_name = \"\");\n    "}, "apci_test_severity_register": {"prefix": ["apci_test_severity_register", "function:apci_test_severity_register"], "body": ["apci_test_severity_register(${1:.l( )});"], "description": "function void apci_test_severity_register(apci_log l);\n    "}, "apci_test_set_severity": {"prefix": ["apci_test_set_severity", "function:apci_test_set_severity"], "body": ["apci_test_set_severity(${1:.id( )}, ${2:.v( )});"], "description": "function void apci_test_set_severity(string id, avery_severity v);\n    "}, "apci_test_report_register": {"prefix": ["apci_test_report_register", "function:apci_test_report_register"], "body": ["apci_test_report_register(${1:.b( )});"], "description": "function void apci_test_report_register(apci_device b);\n    "}, "apci_seq_report_register": {"prefix": ["apci_seq_report_register", "function:apci_seq_report_register"], "body": ["apci_seq_report_register(${1:.b( )});"], "description": "function void apci_seq_report_register(apci_seq_common b);\n    "}, "apci_test_report": {"prefix": ["apci_test_report", "task:apci_test_report"], "body": ["apci_test_report(${1:.t( )});"], "description": "task apci_test_report(apci_testcase_base t);\n    "}, "automatic": {"prefix": ["automatic", "function:automatic"], "body": ["automatic(${1:.from( )}, ${2:.to( )});"], "description": "function automatic void avery_dq_2_ba(\n        ref bit        from      ,\n        ref bit        to      );\n    "}, "apci_test_select2": {"prefix": ["apci_test_select2", "function:apci_test_select2"], "body": ["apci_test_select2(${1:.testname( )});"], "description": "function apci_testcase_base apci_test_select2(string testname);\n    "}, "apci_test_select_check": {"prefix": ["apci_test_select_check", "task:apci_test_select_check"], "body": ["apci_test_select_check(${0:});"], "description": "task apci_test_select_check();\n    "}, "seq_info": {"prefix": ["seq_info", "function:seq_info"], "body": ["seq_info(${1:.s( )});"], "description": "    function void seq_info(string s);\n    "}, "seq_debug": {"prefix": ["seq_debug", "function:seq_debug"], "body": ["seq_debug(${1:.s( )});"], "description": "    function void seq_debug(string s);\n    "}, "seq_warn": {"prefix": ["seq_warn", "function:seq_warn"], "body": ["seq_warn(${1:.s( )});"], "description": "    function void seq_warn(string s);\n    "}, "seq_usage": {"prefix": ["seq_usage", "function:seq_usage"], "body": ["seq_usage(${1:.s( )});"], "description": "    function void seq_usage(string s);\n    "}, "copy": {"prefix": ["copy", "function:copy"], "body": ["copy(${1:.level( )});"], "description": "    extern function apci_os copy(apci_os to = null, int level = -1);\n    "}, "run": {"prefix": ["run", "task:run"], "body": ["run(${0:});"], "description": "    virtual task run();\n    "}, "before_run": {"prefix": ["before_run", "task:before_run"], "body": ["before_run(${0:});"], "description": "    virtual task before_run();\n    "}, "run_body": {"prefix": ["run_body", "task:run_body"], "body": ["run_body(${0:});"], "description": "    virtual task run_body();\n    "}, "end_messages": {"prefix": ["end_messages", "function:end_messages"], "body": ["end_messages(${1:.s( )});"], "description": "    virtual function void end_messages(output string s);\n    "}, "after_run": {"prefix": ["after_run", "task:after_run"], "body": ["after_run(${0:});"], "description": "    virtual task after_run();\n    "}, "seq_error": {"prefix": ["seq_error", "function:seq_error"], "body": ["seq_error(${1:.s( )});"], "description": "    function void seq_error(string s);\n    "}, "seq_print_history": {"prefix": ["seq_print_history", "function:seq_print_history"], "body": ["seq_print_history(${0:});"], "description": "    function void seq_print_history();\n    "}, "grab_test": {"prefix": ["grab_test", "function:grab_test"], "body": ["grab_test(${1:.t( )});"], "description": "    static function apci_testcase_base grab_test(ref string t);\n    "}, "add_rc": {"prefix": ["add_rc", "function:add_rc"], "body": ["add_rc(${1:.h( )});"], "description": "    function void add_rc(apci_device h);\n    "}, "add_sw": {"prefix": ["add_sw", "function:add_sw"], "body": ["add_sw(${1:.h( )});"], "description": "    function void add_sw(apci_device h);\n    "}, "add_ep": {"prefix": ["add_ep", "function:add_ep"], "body": ["add_ep(${1:.h( )});"], "description": "    function void add_ep(apci_device h);\n    "}, "add_bfm": {"prefix": ["add_bfm", "function:add_bfm"], "body": ["add_bfm(${1:.h( )});"], "description": "    function void add_bfm(apci_device h);\n    "}, "add_rc_app_bfm": {"prefix": ["add_rc_app_bfm", "function:add_rc_app_bfm"], "body": ["add_rc_app_bfm(${1:.h( )});"], "description": "    function void add_rc_app_bfm(apci_device h);\n    "}, "add_dut1_bfm": {"prefix": ["add_dut1_bfm", "function:add_dut1_bfm"], "body": ["add_dut1_bfm(${1:.h( )});"], "description": "    function void add_dut1_bfm(apci_device h);\n    "}, "add_dut_pif": {"prefix": ["add_dut_pif", "function:add_dut_pif"], "body": ["add_dut_pif(${1:.h( )});"], "description": "    function void add_dut_pif(virtual apci_pipe_intf h      );\n    "}, "add_dut_cxl_seq": {"prefix": ["add_dut_cxl_seq", "function:add_dut_cxl_seq"], "body": ["add_dut_cxl_seq(${1:.h( )});"], "description": "    function void add_dut_cxl_seq(acxl_dut_seq h);\n    "}, "set_severity_except_myself": {"prefix": ["set_severity_except_myself", "function:set_severity_except_myself"], "body": ["set_severity_except_myself(${1:.bfm( )}, ${2:.id( )}, ${3:.serverity( )});"], "description": "    function void set_severity_except_myself(apci_device bfm, apci_chklist_id_e id, avery_severity serverity);\n    "}, "pre_bfm_started": {"prefix": ["pre_bfm_started", "task:pre_bfm_started"], "body": ["pre_bfm_started(${0:});"], "description": "    virtual task pre_bfm_started();\n    "}, "wait_eps": {"prefix": ["wait_eps", "task:wait_eps"], "body": ["wait_eps(${1:.how_many( )});"], "description": "    virtual task wait_eps(bit configured = 0,    \t                      int how_many = 0);\n    "}, "test_body": {"prefix": ["test_body", "task:test_body"], "body": ["test_body(${0:});"], "description": "    virtual task test_body();\n    "}, "test_body_per_bfm_sequential": {"prefix": ["test_body_per_bfm_sequential", "task:test_body_per_bfm_sequential"], "body": ["test_body_per_bfm_sequential(${1:.bfm( )});"], "description": "    virtual task test_body_per_bfm_sequential(apci_device bfm);\n    "}, "test_body_per_bfm_parallel": {"prefix": ["test_body_per_bfm_parallel", "task:test_body_per_bfm_parallel"], "body": ["test_body_per_bfm_parallel(${1:.bfm( )});"], "description": "    virtual task test_body_per_bfm_parallel(apci_device bfm);\n    "}, "collect_coverage": {"prefix": ["collect_coverage", "task:collect_coverage"], "body": ["collect_coverage(${0:});"], "description": "    virtual task collect_coverage();\n    "}, "wrapup": {"prefix": ["wrapup", "task:wrapup"], "body": ["wrapup(${0:});"], "description": "    virtual task wrapup();                                                                       \n    "}, "find_controller_bfm": {"prefix": ["find_controller_bfm", "function:find_controller_bfm"], "body": ["find_controller_bfm(${1:.ep_id( )});"], "description": "    virtual function apci_device find_controller_bfm(int ep_id);\n    "}, "sprint_topology": {"prefix": ["sprint_topology", "function:sprint_topology"], "body": ["sprint_topology(${1:.prefix( )});"], "description": "    virtual function string sprint_topology(string prefix = \"\\t\");\n    "}, "avery_max": {"prefix": ["avery_max", "function:avery_max"], "body": ["avery_max(${1:.i( )}, ${2:.j( )});"], "description": "        function int       avery_max              ( int i, int j)\n    "}, "avery_min": {"prefix": ["avery_min", "function:avery_min"], "body": ["avery_min(${1:.i( )}, ${2:.j( )});"], "description": "        function int       avery_min              ( int i, int j)\n    "}, "avery_round_to_dw": {"prefix": ["avery_round_to_dw", "function:avery_round_to_dw"], "body": ["avery_round_to_dw(${1:.num_bytes( )});"], "description": "        function bit       avery_round_to_dw      ( bit       num_bytes)\n    "}, "avery_round_up": {"prefix": ["avery_round_up", "function:avery_round_up"], "body": ["avery_round_up(${1:.a( )}, ${2:.boundary( )});"], "description": "        function bit       avery_round_up         (bit       a, bit       boundary);\n    "}, "avery_q2a": {"prefix": ["avery_q2a", "function:avery_q2a"], "body": ["avery_q2a(${1:.from( )}, ${2:.to( )});"], "description": "        function void      avery_q2a              ( input bit       from      , output bit       to      )\n    "}, "avery_dwords_to_bytes": {"prefix": ["avery_dwords_to_bytes", "function:avery_dwords_to_bytes"], "body": ["avery_dwords_to_bytes(${1:.dq( )}, ${2:.bq( )});"], "description": "        function void      avery_dwords_to_bytes  ( bit       dq      , output bit       bq      )\n    "}, "avery_align_addr": {"prefix": ["avery_align_addr", "function:avery_align_addr"], "body": ["avery_align_addr(${1:.addr( )}, ${2:.n_bytes( )}, ${3:.out_addr( )}, ${4:.n_dwords( )});"], "description": "function void avery_align_addr(\n        input  bit       addr,     \n        input  bit       n_bytes,\n        output bit       out_addr,\n        output bit       n_dwords\n    );\n    "}, "avery_get_device_id": {"prefix": ["avery_get_device_id", "function:avery_get_device_id"], "body": ["avery_get_device_id(${0:});"], "description": "        function int       avery_get_device_id    ( )\n    "}, "avery_power_of_two": {"prefix": ["avery_power_of_two", "function:avery_power_of_two"], "body": ["avery_power_of_two(${1:.v( )});"], "description": "        function int       avery_power_of_two     ( bit       v)\n    "}, "avery_multiple_of": {"prefix": ["avery_multiple_of", "function:avery_multiple_of"], "body": ["avery_multiple_of(${1:.a( )}, ${2:.b( )});"], "description": "        function bit       avery_multiple_of      ( bit       a, bit       b)\n    "}, "avery_two_to_power_of": {"prefix": ["avery_two_to_power_of", "function:avery_two_to_power_of"], "body": ["avery_two_to_power_of(${1:.v( )});"], "description": "        function int       avery_two_to_power_of  ( bit       v)\n    "}, "avery_is_power_of_two": {"prefix": ["avery_is_power_of_two", "function:avery_is_power_of_two"], "body": ["avery_is_power_of_two(${1:.v( )});"], "description": "function bit avery_is_power_of_two(bit       v);\n    "}, "avery_is_multiple": {"prefix": ["avery_is_multiple", "function:avery_is_multiple"], "body": ["avery_is_multiple(${1:.a( )}, ${2:.b( )});"], "description": "        function bit       avery_is_multiple      ( bit       a, bit       b)\n    "}, "avery_offset_mask": {"prefix": ["avery_offset_mask", "function:avery_offset_mask"], "body": ["avery_offset_mask(${1:.page_size( )});"], "description": "function bit       avery_offset_mask(bit       page_size);\n    "}, "avery_page_mask": {"prefix": ["avery_page_mask", "function:avery_page_mask"], "body": ["avery_page_mask(${1:.page_size( )});"], "description": "function bit       avery_page_mask(bit       page_size);\n    "}, "avery_print_dw_array": {"prefix": ["avery_print_dw_array", "function:avery_print_dw_array"], "body": ["avery_print_dw_array(${1:.da( )}, ${2:.prefix( )});"], "description": "        function string    avery_print_dw_array   ( bit       da       , int len=16, string prefix=\"\")\n    "}, "avery_print_dw_q": {"prefix": ["avery_print_dw_q", "function:avery_print_dw_q"], "body": ["avery_print_dw_q(${1:.da( )}, ${2:.prefix( )});"], "description": "        function string    avery_print_dw_q       ( bit       da      , int len=16, string prefix=\"\")\n    "}, "avery_print_bytes": {"prefix": ["avery_print_bytes", "function:avery_print_bytes"], "body": ["avery_print_bytes(${1:.b( )}, ${2:.prefix( )});"], "description": "        function string    avery_print_bytes      ( byte b      , string prefix=\"\")\n    "}, "avery_print_u8": {"prefix": ["avery_print_u8", "function:avery_print_u8"], "body": ["avery_print_u8(${1:.b( )}, ${2:.prefix( )});"], "description": "        function string    avery_print_u8         ( bit       b      , string prefix=\"\")\n    "}, "avery_dq_2_ba": {"prefix": ["avery_dq_2_ba", "function:avery_dq_2_ba"], "body": ["avery_dq_2_ba(${1:.from( )}, ${2:.to( )});"], "description": "        function void      avery_dq_2_ba          ( ref bit       from      , ref bit       to      );\n    "}, "avery_swap_endian": {"prefix": ["avery_swap_endian", "function:avery_swap_endian"], "body": ["avery_swap_endian(${1:.v( )});"], "description": "function bit       avery_swap_endian (bit       v);\n    "}, "avery_dw_boundary": {"prefix": ["avery_dw_boundary", "function:avery_dw_boundary"], "body": ["avery_dw_boundary(${1:.offset( )});"], "description": "function avery_u32 avery_dw_boundary(avery_u32 offset);\n    "}, "avery_distance_to_page": {"prefix": ["avery_distance_to_page", "function:avery_distance_to_page"], "body": ["avery_distance_to_page(${1:.page_size( )}, ${2:.addr( )});"], "description": "function avery_u64 avery_distance_to_page (avery_u64 page_size, avery_u64 addr);\n    "}, "avery_page_offset": {"prefix": ["avery_page_offset", "function:avery_page_offset"], "body": ["avery_page_offset(${1:.addr( )}, ${2:.page_size( )});"], "description": "function bit       avery_page_offset(bit       addr, bit       page_size);\n    "}, "avery_page_align": {"prefix": ["avery_page_align", "function:avery_page_align"], "body": ["avery_page_align(${1:.addr( )}, ${2:.page_size( )});"], "description": "function bit       avery_page_align(bit       addr, bit       page_size);\n    "}, "avery_random64": {"prefix": ["avery_random64", "function:avery_random64"], "body": ["avery_random64(${1:.a( )}, ${2:.b( )});"], "description": "function bit       avery_random64 (bit       a, bit       b);\n    "}, "push_back": {"prefix": ["push_back", "function:push_back"], "body": ["push_back(${1:.key( )}, ${2:.v( )});"], "description": "    function void push_back(TKEY key, T v);\n    "}, "push_front": {"prefix": ["push_front", "function:push_front"], "body": ["push_front(${1:.key( )}, ${2:.v( )});"], "description": "    function void push_front(TKEY key, T v);\n    "}, "lookup": {"prefix": ["lookup", "function:lookup"], "body": ["lookup(${1:.key( )});"], "description": "    function T lookup(TKEY key);\n    "}, "insert": {"prefix": ["insert", "function:insert"], "body": ["insert(${1:.key( )}, ${2:.v( )});"], "description": "    function void insert(TKEY key, T v);\n    "}, "delete_all": {"prefix": ["delete_all", "function:delete_all"], "body": ["delete_all(${0:});"], "description": "    extern virtual function void delete_all();\n    "}, "delete": {"prefix": ["delete", "function:delete"], "body": ["delete(${1:.h( )});"], "description": "    function void delete(apci_mm_handler h);\n    "}, "assertion_msg_cb": {"prefix": ["assertion_msg_cb", "function:assertion_msg_cb"], "body": ["assertion_msg_cb(${1:.msg( )}, ${2:.is_disable( )}, ${3:.item( )});"], "description": "    virtual function void assertion_msg_cb(\n                        input string msg,\n                        inout bit is_disable,\n                        ref avery_assertion_item item\n                    );\n    "}, "error_msg_cb": {"prefix": ["error_msg_cb", "function:error_msg_cb"], "body": ["error_msg_cb(${1:.msg( )}, ${2:.is_disable( )});"], "description": "    virtual function void error_msg_cb(\n                        input string msg,\n                        inout bit is_disable \n                    );\n    "}, "fatal_msg_cb": {"prefix": ["fatal_msg_cb", "function:fatal_msg_cb"], "body": ["fatal_msg_cb(${1:.msg( )}, ${2:.is_disable( )});"], "description": "    virtual function void fatal_msg_cb(\n                        input string msg,\n                        inout bit is_disable\n                    );\n    "}, "sprint_user_str": {"prefix": ["sprint_user_str", "function:sprint_user_str"], "body": ["sprint_user_str(${0:});"], "description": "    virtual function string sprint_user_str();\n    "}, "replace_user_str": {"prefix": ["replace_user_str", "function:replace_user_str"], "body": ["replace_user_str(${1:.msg( )});"], "description": "    virtual function void replace_user_str(string msg);\n    "}, "append_user_str": {"prefix": ["append_user_str", "function:append_user_str"], "body": ["append_user_str(${1:.msg( )});"], "description": "    virtual function void append_user_str(string msg);\n    "}, "get_name": {"prefix": ["get_name", "function:get_name"], "body": ["get_name(${0:});"], "description": "    virtual function string get_name();\n    "}, "check_result": {"prefix": ["check_result", "function:check_result"], "body": ["check_result(${1:.verbosity( )});"], "description": "    virtual function bit check_result( int verbosity = 0 );\n    "}, "end_sim_cb": {"prefix": ["end_sim_cb", "task:end_sim_cb"], "body": ["end_sim_cb(${1:.msg( )});"], "description": "    virtual task end_sim_cb(string msg = \"\");\n    "}, "aprint": {"prefix": ["aprint", "function:aprint"], "body": ["aprint(${1:.file( )}, ${2:.msg( )}, ${3:.id( )});"], "description": "    virtual function void aprint(int file, ref string msg, input int id = 0);\n    "}, "aprint_set_file": {"prefix": ["aprint_set_file", "function:aprint_set_file"], "body": ["aprint_set_file(${1:.file( )}, ${2:.filename( )});"], "description": "    virtual function void aprint_set_file(int file, string filename);\n    "}, "exists": {"prefix": ["exists", "function:exists"], "body": ["exists(${1:.addr( )});"], "description": "    function bit exists(T2 addr);\n    "}, "read": {"prefix": ["read", "function:read"], "body": ["read(${1:.addr( )});"], "description": "    function T read(T2 addr);                                                                                                                                                                 \n    "}, "write": {"prefix": ["write", "function:write"], "body": ["write(${1:.addr( )}, ${2:.data2( )});"], "description": "    function void write(T2 addr, T data2);\n    "}, "size": {"prefix": ["size", "function:size"], "body": ["size(${0:});"], "description": "    extern virtual function int size();\n    "}, "error": {"prefix": ["error", "function:error"], "body": ["error(${1:.f( )});"], "description": "    extern virtual function void error       (string msg = \"\", avery_data_base f=null);\n    "}, "fatal": {"prefix": ["fatal", "function:fatal"], "body": ["fatal(${1:.msg( )}, ${2:.msg2( )});"], "description": "    extern virtual function void fatal       (string msg, string msg2 = \"\");\n    "}, "info": {"prefix": ["info", "function:info"], "body": ["info(${1:.line_breaks_prefix( )});"], "description": "    extern virtual function void info        (string msg=\"\", int line_breaks_prefix=0)             ;\n    "}, "warn": {"prefix": ["warn", "function:warn"], "body": ["warn(${1:.msg( )});"], "description": "    extern virtual function void warn        (string msg=\"\");\n    "}, "asst": {"prefix": ["asst", "function:asst"], "body": ["asst(${1:.idname( )}, ${2:.f( )});"], "description": "    extern virtual function void asst        (string idname, string msg=\"\", avery_data_base f=null);\n    "}, "usage": {"prefix": ["usage", "function:usage"], "body": ["usage(${1:.msg( )}, ${2:.is_finish( )});"], "description": "    extern virtual function void usage       (string msg, int is_finish=1);\n    "}, "trigger": {"prefix": ["trigger", "function:trigger"], "body": ["trigger(${1:.idname( )});"], "description": "    virtual function void trigger            (string idname); \n    "}, "set_global_severity": {"prefix": ["set_global_severity", "function:set_global_severity"], "body": ["set_global_severity(${1:.idname( )}, ${2:.v( )});"], "description": "    virtual function void set_global_severity(string idname, avery_severity v) ;\n    "}, "set_severity": {"prefix": ["set_severity", "function:set_severity"], "body": ["set_severity(${1:.idname( )}, ${2:.v( )});"], "description": "    virtual function void set_severity       (string idname, avery_severity v) ;\n    "}, "is_fired": {"prefix": ["is_fired", "function:is_fired"], "body": ["is_fired(${1:.idname( )});"], "description": "    virtual function bit  is_fired           (string idname );\n    "}, "coverage_rpt": {"prefix": ["coverage_rpt", "function:coverage_rpt"], "body": ["coverage_rpt(${1:.filename( )});"], "description": "    virtual function void coverage_rpt       (string filename=\"\");\n    "}, "internal": {"prefix": ["internal", "function:internal"], "body": ["internal(${1:.msg( )}, ${2:.f( )});"], "description": "    virtual function void internal           (string msg, bit is_abort = 1, avery_data_base f=null);\n    "}, "intern": {"prefix": ["intern", "function:intern"], "body": ["intern(${1:.msg( )}, ${2:.f( )});"], "description": "    virtual function void intern (string msg, bit is_abort = 1, avery_data_base f=null);\n    "}, "debug": {"prefix": ["debug", "function:debug"], "body": ["debug(${1:.msg( )});"], "description": "    virtual function void debug              (string msg);\n    "}, "spec_error": {"prefix": ["spec_error", "function:spec_error"], "body": ["spec_error(${1:.msg( )});"], "description": "    virtual function void spec_error(string msg);\n    "}, "sdebug": {"prefix": ["sdebug", "function:sdebug"], "body": ["sdebug(${1:.scope( )}, ${2:.msg( )});"], "description": "    virtual function void sdebug(string scope, string msg);\n    "}, "sinfo": {"prefix": ["sinfo", "function:sinfo"], "body": ["sinfo(${1:.scope( )}, ${2:.msg( )});"], "description": "    virtual function void sinfo(string scope, string msg);\n    "}, "swarning": {"prefix": ["swarning", "function:swarning"], "body": ["swarning(${1:.scope( )}, ${2:.msg( )});"], "description": "    virtual function void swarning(string scope, string msg);\n    "}, "serror": {"prefix": ["serror", "function:serror"], "body": ["serror(${1:.scope( )}, ${2:.msg( )});"], "description": "    virtual function void serror(string scope, string msg);\n    "}, "susage": {"prefix": ["susage", "function:susage"], "body": ["susage(${1:.scope( )}, ${2:.msg( )}, ${3:.is_abort( )});"], "description": "    virtual function void susage(string scope, string msg, bit is_abort = 0);\n    "}, "sstep": {"prefix": ["sstep", "function:sstep"], "body": ["sstep(${1:.scope( )}, ${2:.msg( )});"], "description": "    virtual function void sstep(string scope, string msg);\n    "}, "todo": {"prefix": ["todo", "function:todo"], "body": ["todo(${1:.msg( )}, ${2:.is_finish( )});"], "description": "    function void todo( string msg, int is_finish = 0);\n    "}, "runlog_is_stdout": {"prefix": ["runlog_is_stdout", "function:runlog_is_stdout"], "body": ["runlog_is_stdout(${0:});"], "description": "    function bit runlog_is_stdout();\n    "}, "append_callback": {"prefix": ["append_callback", "function:append_callback"], "body": ["append_callback(${1:.cb( )});"], "description": "    function void append_callback(input avery_log_callbacks cb);\n    "}, "peek": {"prefix": ["peek", "function:peek"], "body": ["peek(${0:});"], "description": "    extern virtual function T peek();\n    "}, "push": {"prefix": ["push", "function:push"], "body": ["push(${1:.v( )});"], "description": "    extern virtual function void push (T v);\n    "}, "num_entries": {"prefix": ["num_entries", "function:num_entries"], "body": ["num_entries(${0:});"], "description": "    extern virtual function int num_entries();\n    "}, "num_unused_entries": {"prefix": ["num_unused_entries", "function:num_unused_entries"], "body": ["num_unused_entries(${0:});"], "description": "    extern virtual function int num_unused_entries();\n    "}, "is_full": {"prefix": ["is_full", "function:is_full"], "body": ["is_full(${0:});"], "description": "    extern virtual function bit is_full();\n    "}, "is_empty": {"prefix": ["is_empty", "function:is_empty"], "body": ["is_empty(${0:});"], "description": "    extern virtual function bit is_empty();\n    "}, "is_wrap": {"prefix": ["is_wrap", "function:is_wrap"], "body": ["is_wrap(${1:.total( )}, ${2:.num_wrapped( )});"], "description": "    extern virtual function bit is_wrap(input int total, output int num_wrapped);\n    "}, "get_qsize": {"prefix": ["get_qsize", "function:get_qsize"], "body": ["get_qsize(${0:});"], "description": "    extern virtual function int get_qsize();\n    "}, "get_entry_size": {"prefix": ["get_entry_size", "function:get_entry_size"], "body": ["get_entry_size(${0:});"], "description": "    extern virtual function int get_entry_size();\n    "}, "get_entry_size_dw": {"prefix": ["get_entry_size_dw", "function:get_entry_size_dw"], "body": ["get_entry_size_dw(${0:});"], "description": "    extern virtual function int get_entry_size_dw();\n    "}, "get_tail": {"prefix": ["get_tail", "function:get_tail"], "body": ["get_tail(${0:});"], "description": "    extern virtual function bit       get_tail();\n    "}, "get_pi": {"prefix": ["get_pi", "function:get_pi"], "body": ["get_pi(${0:});"], "description": "    extern virtual function bit       get_pi();\n    "}, "get_head": {"prefix": ["get_head", "function:get_head"], "body": ["get_head(${0:});"], "description": "    extern virtual function bit       get_head();\n    "}, "get_ci": {"prefix": ["get_ci", "function:get_ci"], "body": ["get_ci(${0:});"], "description": "    extern virtual function bit       get_ci();\n    "}, "get_tail_addr": {"prefix": ["get_tail_addr", "function:get_tail_addr"], "body": ["get_tail_addr(${0:});"], "description": "    extern virtual function bit       get_tail_addr();\n    "}, "get_pi_addr": {"prefix": ["get_pi_addr", "function:get_pi_addr"], "body": ["get_pi_addr(${0:});"], "description": "    extern virtual function bit       get_pi_addr();\n    "}, "get_head_addr": {"prefix": ["get_head_addr", "function:get_head_addr"], "body": ["get_head_addr(${0:});"], "description": "    extern virtual function bit       get_head_addr();\n    "}, "get_ci_addr": {"prefix": ["get_ci_addr", "function:get_ci_addr"], "body": ["get_ci_addr(${0:});"], "description": "    extern virtual function bit       get_ci_addr();\n    "}, "get_base_addr": {"prefix": ["get_base_addr", "function:get_base_addr"], "body": ["get_base_addr(${0:});"], "description": "    extern virtual function bit       get_base_addr();\n    "}, "head_diff": {"prefix": ["head_diff", "function:head_diff"], "body": ["head_diff(${1:.new_head( )});"], "description": "    extern virtual function int head_diff(int new_head);\n    "}, "tail_diff": {"prefix": ["tail_diff", "function:tail_diff"], "body": ["tail_diff(${1:.new_tail( )});"], "description": "    extern virtual function int tail_diff(int new_tail);\n    "}, "pointer_diff": {"prefix": ["pointer_diff", "function:pointer_diff"], "body": ["pointer_diff(${0:});"], "description": "    extern virtual function int pointer_diff();\n    "}, "pop": {"prefix": ["pop", "function:pop"], "body": ["pop(${0:});"], "description": "    function T pop();\n    "}, "set_timeout": {"prefix": ["set_timeout", "function:set_timeout"], "body": ["set_timeout(${1:.t( )});"], "description": "    extern virtual function void set_timeout(time t);       "}, "set_min_timeout": {"prefix": ["set_min_timeout", "function:set_min_timeout"], "body": ["set_min_timeout(${1:.t( )});"], "description": "    extern virtual function void set_min_timeout(time t);       "}, "merge_coverage": {"prefix": ["merge_coverage", "function:merge_coverage"], "body": ["merge_coverage(${1:.log_base_a( )});"], "description": "    virtual function void merge_coverage (avery_param_log_base log_base_a); \n    "}, "set_v": {"prefix": ["set_v", "function:set_v"], "body": ["set_v(${1:.v( )});"], "description": "    extern virtual function void set_v(avery_reg_val_t v);\n    "}, "set_dv": {"prefix": ["set_dv", "function:set_dv"], "body": ["set_dv(${1:.dv( )});"], "description": "    extern virtual function void set_dv(avery_reg_val_t dv);\n    "}, "set_acctype": {"prefix": ["set_acctype", "function:set_acctype"], "body": ["set_acctype(${1:.acctype( )});"], "description": "    virtual function void set_acctype(avery_reg_acc_e acctype);\n    "}, "set_sticky": {"prefix": ["set_sticky", "function:set_sticky"], "body": ["set_sticky(${1:.sticky( )});"], "description": "    virtual function void set_sticky(bit sticky);\n    "}, "set_sticky_flr": {"prefix": ["set_sticky_flr", "function:set_sticky_flr"], "body": ["set_sticky_flr(${1:.sticky_flr( )});"], "description": "    virtual function void set_sticky_flr(bit sticky_flr);\n    "}, "set_lsb_loc": {"prefix": ["set_lsb_loc", "function:set_lsb_loc"], "body": ["set_lsb_loc(${1:.lsb_loc( )});"], "description": "    extern virtual function void set_lsb_loc(int lsb_loc);\n    "}, "set_write_mask": {"prefix": ["set_write_mask", "function:set_write_mask"], "body": ["set_write_mask(${1:.mask( )});"], "description": "    extern virtual function void set_write_mask(avery_reg_val_t mask);\n    "}, "get_write_mask": {"prefix": ["get_write_mask", "function:get_write_mask"], "body": ["get_write_mask(${0:});"], "description": "    extern virtual function avery_reg_val_t get_write_mask();\n    "}, "get_field_size": {"prefix": ["get_field_size", "function:get_field_size"], "body": ["get_field_size(${0:});"], "description": "    extern virtual function int get_field_size();\n    "}, "get_lsb_loc": {"prefix": ["get_lsb_loc", "function:get_lsb_loc"], "body": ["get_lsb_loc(${0:});"], "description": "    extern virtual function int get_lsb_loc();\n    "}, "read_dw": {"prefix": ["read_dw", "function:read_dw"], "body": ["read_dw(${1:.offset( )}, ${2:.byte_enable( )});"], "description": "    virtual function bit       read_dw(bit       offset, bit       byte_enable);\n    "}, "write_dw": {"prefix": ["write_dw", "function:write_dw"], "body": ["write_dw(${1:.offset( )}, ${2:.v( )}, ${3:.byte_enable( )});"], "description": "    virtual function void write_dw(bit       offset, bit       v, bit       byte_enable);\n    "}, "sprint_path": {"prefix": ["sprint_path", "function:sprint_path"], "body": ["sprint_path(${1:.verbosity( )});"], "description": "    extern virtual function string sprint_path(int verbosity = 0);\n    "}, "get_offset_dw": {"prefix": ["get_offset_dw", "function:get_offset_dw"], "body": ["get_offset_dw(${0:});"], "description": "    extern virtual function bit       get_offset_dw();\n    "}, "get_offset": {"prefix": ["get_offset", "function:get_offset"], "body": ["get_offset(${0:});"], "description": "    extern virtual function bit       get_offset();\n    "}, "set_shared": {"prefix": ["set_shared", "function:set_shared"], "body": ["set_shared(${1:.shared( )});"], "description": "    extern virtual function void set_shared(avery_reg_field shared);\n    "}, "inverse": {"prefix": ["inverse", "function:inverse"], "body": ["inverse(${0:});"], "description": "    extern virtual function void inverse();\n    "}, "set_one": {"prefix": ["set_one", "function:set_one"], "body": ["set_one(${0:});"], "description": "    extern virtual function void set_one();\n    "}, "compare": {"prefix": ["compare", "function:compare"], "body": ["compare(${1:.to( )}, ${2:.diff( )});"], "description": "    extern virtual function bit compare(apci_os to, output string diff);\n    "}, "set_print_verbosity": {"prefix": ["set_print_verbosity", "function:set_print_verbosity"], "body": ["set_print_verbosity(${1:.v( )});"], "description": "    extern virtual function void set_print_verbosity(int v);\n    "}, "get_size_dw": {"prefix": ["get_size_dw", "function:get_size_dw"], "body": ["get_size_dw(${0:});"], "description": "    virtual function int get_size_dw();\n    "}, "get_size": {"prefix": ["get_size", "function:get_size"], "body": ["get_size(${0:});"], "description": "    extern virtual function int get_size();\n    "}, "fread_dw": {"prefix": ["fread_dw", "function:fread_dw"], "body": ["fread_dw(${1:.dw_offset( )}, ${2:.byte_enable( )});"], "description": "    extern virtual function avery_reg_val_t fread_dw( int      dw_offset  ,\n                                                      bit       byte_enable = 4'b1111 );\n    "}, "fwrite_dw": {"prefix": ["fwrite_dw", "function:fwrite_dw"], "body": ["fwrite_dw(${1:.dw_offset( )}, ${2:.value( )}, ${3:.modifier( )});"], "description": "    extern virtual function void fwrite_dw( int             dw_offset  ,\n                                            avery_u32       value      ,\n                                            bit              byte_enable = 4'b1111,\n                                            avery_data_base modifier    = null );\n    "}, "configure": {"prefix": ["configure", "function:configure"], "body": ["configure(${1:.n_dwords( )});"], "description": "    extern function void configure(int n_dwords = 0);\n    "}, "get_dword": {"prefix": ["get_dword", "function:get_dword"], "body": ["get_dword(${1:.dw_offset( )});"], "description": "    extern function avery_reg_val_t get_dword(int dw_offset);\n    "}, "sprint_dword": {"prefix": ["sprint_dword", "function:sprint_dword"], "body": ["sprint_dword(${1:.dw_offset( )}, ${2:.verbosity( )});"], "description": "    extern function string sprint_dword(int dw_offset, int verbosity= 0);\n    "}, "set_dword": {"prefix": ["set_dword", "function:set_dword"], "body": ["set_dword(${1:.dw_offset( )}, ${2:.value( )}, ${3:.modifier( )});"], "description": "    extern virtual function void set_dword(\n            int             dw_offset  ,\n            avery_u32       value      ,\n            bit              byte_enable = 4'b1111,\n            avery_data_base modifier    = null );\n    "}, "create_dynamic_fields": {"prefix": ["create_dynamic_fields", "function:create_dynamic_fields"], "body": ["create_dynamic_fields(${0:});"], "description": "    virtual function void create_dynamic_fields();\n    "}, "check_100fs_time_precision": {"prefix": ["check_100fs_time_precision", "task:check_100fs_time_precision"], "body": ["check_100fs_time_precision(${0:});"], "description": "task check_100fs_time_precision();\n    "}, "apci_sprint_fc": {"prefix": ["apci_sprint_fc", "function:apci_sprint_fc"], "body": ["apci_sprint_fc(${1:.fc( )});"], "description": "function string apci_sprint_fc(apci_flow_crd_t fc);\n    "}, "apci_sprint_atpt_entry": {"prefix": ["apci_sprint_atpt_entry", "function:apci_sprint_atpt_entry"], "body": ["apci_sprint_atpt_entry(${1:.e( )});"], "description": "function string apci_sprint_atpt_entry(apci_atpt_entry_t e);\n    "}, "apci_be_to_bit_mask": {"prefix": ["apci_be_to_bit_mask", "function:apci_be_to_bit_mask"], "body": ["apci_be_to_bit_mask(${1:.be( )});"], "description": "function bit       apci_be_to_bit_mask(bit       be);\n    "}, "annotate": {"prefix": ["annotate", "function:annotate"], "body": ["annotate(${1:.s( )});"], "description": "    virtual function void annotate(string s);\n    "}, "sanity_check": {"prefix": ["sanity_check", "function:sanity_check"], "body": ["sanity_check(${1:.log( )});"], "description": "    virtual function void sanity_check(apci_log log);\n    "}, "check_overlap": {"prefix": ["check_overlap", "function:check_overlap"], "body": ["check_overlap(${1:.msg( )});"], "description": "    function void check_overlap(string msg = \"\");\n    "}, "set": {"prefix": ["set", "function:set"], "body": ["set(${1:.bfm( )}, ${2:.logic_lane_num( )}, ${3:.os( )});"], "description": "    function void set( apci_device    bfm\t\t,\n\t\t       int\t      logic_lane_num    , \n\t\t       apci_os        os\t\t);\n    "}, "write_mem_line": {"prefix": ["write_mem_line", "task:write_mem_line"], "body": ["write_mem_line(${1:.addr( )}, ${2:.byte_enable( )}, ${3:.bytes( )}, ${4:.src( )});"], "description": "    virtual task write_mem_line(\n            input bit               addr        ,\n            input bit               byte_enable ,\n\t    ref   bit               bytes           ,\n\t    input avery_data_base   src = null       \n\t);\t\n    "}, "read_mem_line": {"prefix": ["read_mem_line", "task:read_mem_line"], "body": ["read_mem_line(${1:.addr( )}, ${2:.bytes( )}, ${3:.src( )});"], "description": "    virtual task read_mem_line(\n\t    input bit               addr        ,\n\t    ref   bit               bytes           ,\n\t    input avery_data_base   src = null \n\t);\t\n    "}, "write_noncoh_mem": {"prefix": ["write_noncoh_mem", "task:write_noncoh_mem"], "body": ["write_noncoh_mem(${1:.addr( )}, ${2:.first_be( )}, ${3:.last_be( )}, ${4:.va( )}, ${5:.src( )});"], "description": "    virtual task write_noncoh_mem(\n\t    input bit             addr       ,\n\t    input bit              first_be   ,\n\t    input bit              last_be    ,\n\t    ref   bit             va             ,\n\t    input avery_data_base src         \n\t);\t\n    "}, "read_noncoh_mem": {"prefix": ["read_noncoh_mem", "task:read_noncoh_mem"], "body": ["read_noncoh_mem(${1:.addr( )}, ${2:.ndw( )}, ${3:.first_be( )}, ${4:.last_be( )}, ${5:.va( )}, ${6:.src( )});"], "description": "    virtual task read_noncoh_mem(\n\t    input bit             addr    ,\n\t    input bit             ndw     ,\n\t    input bit              first_be,\n\t    input bit              last_be ,\n\t    ref   bit             va      ,\n\t    input avery_data_base src\n\t);\t\n    "}, "send_over_lpif": {"prefix": ["send_over_lpif", "function:send_over_lpif"], "body": ["send_over_lpif(${1:.d( )});"], "description": "    virtual function void send_over_lpif(apci_data_base d);\n    "}, "wait_from_lpif": {"prefix": ["wait_from_lpif", "task:wait_from_lpif"], "body": ["wait_from_lpif(${1:.d( )});"], "description": "    virtual task wait_from_lpif(output apci_data_base d);\n    "}, "is_ts": {"prefix": ["is_ts", "function:is_ts"], "body": ["is_ts(${0:});"], "description": "    function bit is_ts()            ; return kind inside {APCI_OS_ts1, APCI_OS_ts2}      ; endfunction\n    "}, "is_ts1": {"prefix": ["is_ts1", "function:is_ts1"], "body": ["is_ts1(${0:});"], "description": "    function bit is_ts1()           ; return kind == APCI_OS_ts1                         ; endfunction\n    "}, "is_ts2": {"prefix": ["is_ts2", "function:is_ts2"], "body": ["is_ts2(${0:});"], "description": "    function bit is_ts2()           ; return kind == APCI_OS_ts2                         ; endfunction\n    "}, "is_ts0": {"prefix": ["is_ts0", "function:is_ts0"], "body": ["is_ts0(${0:});"], "description": "    function bit is_ts0()           ; return kind == APCI_OS_ts0                         ; endfunction\n    "}, "is_skp": {"prefix": ["is_skp", "function:is_skp"], "body": ["is_skp(${0:});"], "description": "    function bit is_skp()           ; return kind inside {APCI_OS_skp, APCI_OS_ctrl_skp} ; endfunction\n    "}, "is_ctrl_skp": {"prefix": ["is_ctrl_skp", "function:is_ctrl_skp"], "body": ["is_ctrl_skp(${0:});"], "description": "    function bit is_ctrl_skp()      ; return kind == APCI_OS_ctrl_skp                    ; endfunction\n    "}, "is_ei": {"prefix": ["is_ei", "function:is_ei"], "body": ["is_ei(${0:});"], "description": "    function bit is_ei()            ; return kind == APCI_OS_ei                          ; endfunction\n    "}, "is_eie": {"prefix": ["is_eie", "function:is_eie"], "body": ["is_eie(${0:});"], "description": "    function bit is_eie()           ; return kind inside {APCI_OS_eie, APCI_OS_ccix_eie} ; endfunction\n    "}, "is_fts": {"prefix": ["is_fts", "function:is_fts"], "body": ["is_fts(${0:});"], "description": "    function bit is_fts()           ; return kind == APCI_OS_fts                         ; endfunction\n    "}, "is_compliance": {"prefix": ["is_compliance", "function:is_compliance"], "body": ["is_compliance(${0:});"], "description": "    function bit is_compliance()    ; return kind == APCI_OS_compliance                  ; endfunction\n    "}, "is_mod_compliance": {"prefix": ["is_mod_compliance", "function:is_mod_compliance"], "body": ["is_mod_compliance(${0:});"], "description": "    function bit is_mod_compliance(); return kind == APCI_OS_mod_compliance              ; endfunction\n    "}, "is_lidl": {"prefix": ["is_lidl", "function:is_lidl"], "body": ["is_lidl(${0:});"], "description": "    function bit is_lidl()          ; return kind == APCI_OS_lidl                        ; endfunction\n    "}, "is_sds": {"prefix": ["is_sds", "function:is_sds"], "body": ["is_sds(${0:});"], "description": "    function bit is_sds()           ; return kind == APCI_OS_sds                         ; endfunction\n    "}, "is_user": {"prefix": ["is_user", "function:is_user"], "body": ["is_user(${0:});"], "description": "    function bit is_user()          ; return kind == APCI_OS_user                        ; endfunction\n    "}, "get_length": {"prefix": ["get_length", "function:get_length"], "body": ["get_length(${0:});"], "description": "    extern virtual function int get_length();\n    "}, "is_std_ts2": {"prefix": ["is_std_ts2", "function:is_std_ts2"], "body": ["is_std_ts2(${0:});"], "description": "    extern virtual function bit is_std_ts2();\n    "}, "is_eq_ts2": {"prefix": ["is_eq_ts2", "function:is_eq_ts2"], "body": ["is_eq_ts2(${0:});"], "description": "    extern virtual function bit is_eq_ts2();\n    "}, "is_eq_ts2_8b10b": {"prefix": ["is_eq_ts2_8b10b", "function:is_eq_ts2_8b10b"], "body": ["is_eq_ts2_8b10b(${0:});"], "description": "    extern virtual function bit is_eq_ts2_8b10b();\n    "}, "is_eq_ts2_128b": {"prefix": ["is_eq_ts2_128b", "function:is_eq_ts2_128b"], "body": ["is_eq_ts2_128b(${0:});"], "description": "    extern virtual function bit is_eq_ts2_128b();\n    "}, "is_eq_ts1": {"prefix": ["is_eq_ts1", "function:is_eq_ts1"], "body": ["is_eq_ts1(${0:});"], "description": "    extern virtual function bit is_eq_ts1();\n    "}, "is_mod_ts": {"prefix": ["is_mod_ts", "function:is_mod_ts"], "body": ["is_mod_ts(${0:});"], "description": "    extern virtual function bit is_mod_ts();\n    "}, "is_mod_ts1": {"prefix": ["is_mod_ts1", "function:is_mod_ts1"], "body": ["is_mod_ts1(${0:});"], "description": "    extern virtual function bit is_mod_ts1();\n    "}, "is_mod_ts2": {"prefix": ["is_mod_ts2", "function:is_mod_ts2"], "body": ["is_mod_ts2(${0:});"], "description": "    extern virtual function bit is_mod_ts2();\n    "}, "is_compliance_step1_128b": {"prefix": ["is_compliance_step1_128b", "function:is_compliance_step1_128b"], "body": ["is_compliance_step1_128b(${0:});"], "description": "    extern virtual function bit is_compliance_step1_128b();\n    "}, "is_compliance_step2_128b": {"prefix": ["is_compliance_step2_128b", "function:is_compliance_step2_128b"], "body": ["is_compliance_step2_128b(${0:});"], "description": "    extern virtual function bit is_compliance_step2_128b();\n    "}, "is_compliance_step3_128b": {"prefix": ["is_compliance_step3_128b", "function:is_compliance_step3_128b"], "body": ["is_compliance_step3_128b(${0:});"], "description": "    extern virtual function bit is_compliance_step3_128b();\n    "}, "is_8b10b_mod_compliance_with_delay": {"prefix": ["is_8b10b_mod_compliance_with_delay", "function:is_8b10b_mod_compliance_with_delay"], "body": ["is_8b10b_mod_compliance_with_delay(${0:});"], "description": "    extern virtual function bit is_8b10b_mod_compliance_with_delay();\n    "}, "rehash_parity": {"prefix": ["rehash_parity", "function:rehash_parity"], "body": ["rehash_parity(${0:});"], "description": "    extern virtual function void rehash_parity();\n    "}, "rehash_margin": {"prefix": ["rehash_margin", "function:rehash_margin"], "body": ["rehash_margin(${0:});"], "description": "    extern virtual function void rehash_margin();\n    "}, "make_cp_8b10b": {"prefix": ["make_cp_8b10b", "function:make_cp_8b10b"], "body": ["make_cp_8b10b(${1:.with_delay( )}, ${2:.err_status( )});"], "description": "    extern virtual function void make_cp_8b10b(bit with_delay, bit       err_status);\n    "}, "make_cp_128b": {"prefix": ["make_cp_128b", "function:make_cp_128b"], "body": ["make_cp_128b(${1:.step( )}, ${2:.lane_no( )}, ${3:.tx_preset( )});"], "description": "    extern virtual function void make_cp_128b(byte step, byte lane_no, bit       tx_preset); \n    "}, "make_cp_1b1b": {"prefix": ["make_cp_1b1b", "function:make_cp_1b1b"], "body": ["make_cp_1b1b(${1:.step( )}, ${2:.lane_no( )});"], "description": "    extern virtual function void make_cp_1b1b(byte step, byte lane_no);\n    "}, "rehash_gen6_ts": {"prefix": ["rehash_gen6_ts", "function:rehash_gen6_ts"], "body": ["rehash_gen6_ts(${0:});"], "description": "    extern virtual function void rehash_gen6_ts();\n    "}, "mod_ec": {"prefix": ["mod_ec", "function:mod_ec"], "body": ["mod_ec(${1:.ec( )});"], "description": "    extern virtual function void mod_ec(bit       ec);\n    "}, "get_ec": {"prefix": ["get_ec", "function:get_ec"], "body": ["get_ec(${0:});"], "description": "    extern virtual function bit       get_ec();\n    "}, "uvm_raise_objection": {"prefix": ["uvm_raise_objection", "function:uvm_raise_objection"], "body": ["uvm_raise_objection(${0:});"], "description": "    local function void uvm_raise_objection();\n    "}, "uvm_drop_objection": {"prefix": ["uvm_drop_objection", "function:uvm_drop_objection"], "body": ["uvm_drop_objection(${0:});"], "description": "    local function void uvm_drop_objection();\n    "}}